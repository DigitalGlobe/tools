/************************************************************************

            Copyright (c) 2002-2007 Macrovision Europe Ltd. and/or Macrovision Corporation. All Rights Reserved.
        This software has been provided pursuant to a License Agreement
        containing restrictions on its use.  This software contains
        valuable trade secrets and proprietary information of 
        Macrovision Corporation and is protected by law.  It may 
        not be copied or distributed in any form or medium, disclosed 
        to third parties, reverse engineered or used in any manner not 
        provided for in said License Agreement except with the prior 
        written authorization from Macrovision Corporation.

 ************************************************************************/

 /***********************************************************************
*
*  Module Description:
*  ------------------
*  This source is meant as a skeleton interface to FLEXnet Licensing's Flexible API
*  in order for users of development platforms such as Visual Basic 
*  and Delphi to have access to TRL. 
*
*  In order to create this DLL properly a developer must link into this 
*  library a copy of the lm_new.obj that is created in the FLEXnet Licensing toolkit 
*  when it is first built.
*
*  Requirements:
*  ------------
*	- C/C++ compiler & linker that can generate Win32
*	  Dynamic Linked Library modules.
*	  (Microsoft Visual C++ recommended) 
*	- Text editor.
*       - Installed FLEXnet Licensing toolkit.
*	- valid vendor codes from Macrovision Corporation..
*	- lm_new.obj file generated by the FLEXnet Licensing toolkit.
*
************************************************************************/

#include <windows.h>
#include "string.h"

#include "lmclient.h"
#include "lm_attr.h"

#include "lmprikey.h"
#include "lmseeds.h"

#include "vb_dll.h"

/***********************************************************************
*
*  DLL Entry point.
*
************************************************************************/

BOOL WINAPI DllMain( HINSTANCE hModule, DWORD dwReason, LPVOID lpReserved )
{
	// add any additional DLL initialization code here
	return TRUE;
}

/***********************************************************************
*
*  Function	lp_setup
*
*  Description	To initialize FLEXnet Licensing flexible API in order to create a
*		valid job handle.
*
*  Parameters	(char *) szLicDefault - Default location to find license
*				        server and/or license files.
*				        i.e., c:\myprog, 
*				              27000@myserver
*					      27000@myserver.mycompany.com
*
*
************************************************************************/

int WINAPI lp_setup(szLicDefault)
char* szLicDefault;
{
	if (lc_new_job(0, lc_new_job_arg2, &code, &lm_job))
	{
		lc_perror(lm_job, "lc_new_job failed");
		return (lc_get_errno(lm_job));
	}

	lc_set_attr(lm_job, LM_A_PERROR_MSGBOX, (LM_A_VAL_TYPE)0);

	if (szLicDefault == NULL)
		strcpy(szLicDefault, ".");	// look in current location

	lc_set_attr(lm_job, LM_A_LICENSE_DEFAULT, (LM_A_VAL_TYPE)szLicDefault);

	return ERROR_NONE;
}

/***********************************************************************
*
*  Function	lp_checkout
*
*  Description	This will attempt to checkout a feature passed to it
*		from the interfacing code.		
*
*  Parameters	(char*) szFeatureName - Feature name provided by caller
*		(char*) szFeatureVer - Feature version id provided by 
*				     caller
*		(int) iLicCount - Number of licenses to checkout if 
*                                successful
*
************************************************************************/

int WINAPI lp_checkout(szFeatureName, szFeatureVer, iLicCount)
char *szFeatureName;
char *szFeatureVer;
int iLicCount;
{
	if (lc_checkout(lm_job, 
			szFeatureName, 
			szFeatureVer, 
			iLicCount, 
			LM_CO_NOWAIT, 
			&code, 
			LM_DUP_NONE))
	{
		lc_perror(lm_job, "checkout failed");
		return(lc_get_errno(lm_job));
        }
	else
		return ERROR_NONE;

}

/***********************************************************************
*
*  Function	lp_checkin
*
*  Description	Will return a license back in a server if server is 
*		present.
*		
*  Parameters	(char*) szFeatureName - Feature name provided by caller
*
************************************************************************/

int WINAPI lp_checkin(szFeatureName)
char *szFeatureName;
{
	lc_checkin(lm_job, szFeatureName ,0);
	return ERROR_NONE;
}

/***********************************************************************
*
*  Function	lp_heartbeat
*
*  Description	
*		
*  Parameters	(int) iReconnect - Number of reconnections
*		(int) iRetry - Number of retries 
*
************************************************************************/

int WINAPI lp_heartbeat(iReconnect, iMin)
int iReconnect;
int iMin;
{
	return lc_heartbeat(lm_job, &iReconnect, iMin);
}

/***********************************************************************
*
*  Function	lp_errstring
*
*  Description	
*		
*  Parameters	(char*) szErrorString - Error string buffer
*		(int) iBufLen - Buffer length of resulting error string
*			        buffer.
*
************************************************************************/

int WINAPI lp_errstring(szErrorString, iBufLen)
char *szErrorString;
int iBufLen;
{
	wsprintf(szErrorString, "%s", lc_errstring(lm_job));
	iBufLen = strlen(szErrorString);
	return ERROR_NONE;
}

/***********************************************************************
*
*  Function	lp_hostid
*
*  Description	
*		
*  Parameters	(int) iType - HostID to query
*		(char*) szBuffer - String buffer to be filled with target
*				   HostID. HOSTID types are documented in 
*                                  lmclient.h
*		(int) iBufLen - return string buffer length
*
************************************************************************/

int WINAPI lp_hostid(iType, szBuffer, iBufLen)
int iType;
char *szBuffer;
int iBufLen;
{
int iReturn;
char szData[MAX_CONFIG_LINE];

	iReturn = lc_hostid(lm_job, iType, szData);
	if (iReturn == 0)
	{
		strcpy(szBuffer, szData);
		iBufLen = strlen(szBuffer);
	}
	else
	{
		strcpy(szBuffer, "");	// problem with request
		iBufLen = 0;
	}
	return iReturn;
}

/***********************************************************************
*
*  Function	lp_cryptstr
*
*  Description	
*		
*  Parameters	(char*) szInString - Raw input string to encrypt
*		(char*) szOutString - Encrypted license string.
*		(int) iBufLen - License string length
*
************************************************************************/

int WINAPI lp_cryptstr(szInString, szOutString, iBufLen, iFlag)
char *szInString;
char *szOutString;
int iBufLen;
int iFlag;
{
int iReturn;
char *szErr;
char *szOut;
	iReturn = lc_cryptstr(lm_job, 
			      szInString, 
			      &szOut, 
			      &code,
			      iFlag,
			      (char*)0,		// filename buffer
			      &szErr);		// error string buffer
	iBufLen = strlen(szOut);
	strcpy(szOutString, szOut);
	return iReturn;
}

/***********************************************************************
*
*  Function	lp_shutdown
*
*  Description	Clean up all job handles.		
*
*  Parameters	<none>
*
************************************************************************/

int WINAPI lp_shutdown()
{
	if (lm_job != NULL)
		lc_free_job(lm_job);
	return ERROR_NONE;
}
