<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dotnetLibLAS</name>
    </assembly>
    <members>
        <member name="T:LibLAS.LASException">
            <summary>
            LASException class
            </summary>
        </member>
        <member name="M:LibLAS.LASException.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="message">string to show</param>
        </member>
        <member name="M:LibLAS.LASException.GetString(System.Int32)">
            <summary>
            TODO
            </summary>
            <param name="value">TODO</param>
            <returns>the string </returns>
        </member>
        <member name="T:LibLAS.LASVariableLengthRecord">
            <summary>
            LASVariableLengthRecord class
            </summary>
        </member>
        <member name="M:LibLAS.LASVariableLengthRecord.Dispose">
            <summary>
            The object user should call this method when they finished with the object.
            </summary>
        </member>
        <member name="M:LibLAS.LASVariableLengthRecord.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LibLAS.LASVariableLengthRecord.#ctor(System.IntPtr)">
            <summary>
            Creates a new variable length record uing the LASVLRH opaque pointer
            </summary>
            <param name="hVlrh">LASVLRH opaque pointer</param>
        </member>
        <member name="M:LibLAS.LASVariableLengthRecord.GetPointer">
            <summary>
            Get the LASVLRH opaque pointer.
            </summary>
            <returns>LASVLRH opaque pointer </returns>
        </member>
        <member name="M:LibLAS.LASVariableLengthRecord.GetData(System.Byte[]@)">
            <summary>
            Gets the data stream for the variable length record as an array of bytes
            </summary>
            <param name="data">a empty array of bytes where place the array</param>
        </member>
        <member name="M:LibLAS.LASVariableLengthRecord.SetData(System.Byte[]@)">
            <summary>
            Sets the data stream for the variable length record as an array of bytes
            </summary>
            <param name="data">array of bytes</param>
        </member>
        <member name="P:LibLAS.LASVariableLengthRecord.UserId">
            <summary>
            the User Id for the variable length record.
            </summary>
            <remarks> It will be clipped to fit within 16 characters</remarks>
        </member>
        <member name="P:LibLAS.LASVariableLengthRecord.Description">
            <summary>
            the description for the variable length record.
            </summary>
            <remarks> It will be clipped to fit within 32 characters</remarks>
        </member>
        <member name="P:LibLAS.LASVariableLengthRecord.RecordLength">
            <summary>
            the record length of the data stored in the variable length record.
            </summary>
        </member>
        <member name="P:LibLAS.LASVariableLengthRecord.RecordId">
            <summary>
            the record id for the variable length record.
            </summary>
        </member>
        <member name="P:LibLAS.LASVariableLengthRecord.Reserved">
            <summary>
            the reserved value of the variable length record.  
            </summary>
            <remarks>This should be 0 and should always be 0.</remarks>
        </member>
        <member name="T:LibLAS.LASReadWriteMode">
            <summary>
            LASReadWriteMode enum
            </summary>
        </member>
        <member name="F:LibLAS.LASReadWriteMode.LASModeRead">
            <summary>
            Mode of Read
            </summary>
        </member>
        <member name="F:LibLAS.LASReadWriteMode.LASModeWrite">
            <summary>
            Mode of Write
            </summary>
        </member>
        <member name="F:LibLAS.LASReadWriteMode.LASModeAppend">
            <summary>
            Mode of ppend
            </summary>
        </member>
        <member name="T:LibLAS.LASWriter">
            <summary>
            LASWriter class
            </summary>
        </member>
        <member name="M:LibLAS.LASWriter.Dispose">
            <summary>
            The object user should call this method when they finished with the object.
            </summary>
        </member>
        <member name="M:LibLAS.LASWriter.#ctor(System.String,LibLAS.LASHeader,LibLAS.LASReadWriteMode)">
            <summary>
            Default constructor of the class
            </summary>
            <param name="filename">string with the path of the LAS file</param>
            <param name="hHeader">LASHeader to add the LAS file</param>
            <param name="mode">mode to use the file by LASReadWriteMode enumeration</param>
        </member>
        <member name="M:LibLAS.LASWriter.WritePoint(LibLAS.LASPoint)">
            <summary>
            Write a new point in the LAS file
            </summary>
            <param name="point">LASPoint to write in the file</param>
        </member>
        <member name="T:LibLAS.LASReader">
            <summary>
            LASReader class
            </summary>
        </member>
        <member name="M:LibLAS.LASReader.#ctor(System.String)">
            <summary>
            Creates a LASReaderH object that can be used to read LASHeaderH and LASPointH objects with.
            </summary>
            <remarks>The LASReaderH must not be created with a filename that is opened for read or write by any other API functions. </remarks>
            <param name="filename">filename to open for read</param>
        </member>
        <member name="M:LibLAS.LASReader.GetNextPoint">
            <summary>
            Reads the next available point on the LASReaderH instance. 
            </summary>
            <returns>true if we have next point</returns>
        </member>
        <member name="M:LibLAS.LASReader.GetPoint">
            <summary>
            get the current LASPoint.
            </summary>
            <returns>current LASPoint object</returns>
        </member>
        <member name="M:LibLAS.LASReader.GetPointAt(System.UInt32)">
            <summary>
            Reads a LASPointH from the given position in the LAS file represented by the LASReader instance.
            </summary>
            <remarks> If no point is available at that location, NULL is returned. </remarks>
            <param name="position">the integer position of the point in the file to read.</param>
            <returns>LASPoint object</returns>
        </member>
        <member name="M:LibLAS.LASReader.GetHeader">
            <summary>
            Get the header for the file associated with this Reader Class.
            </summary>
            <returns>LASHeader representing the header for the file.</returns>
        </member>
        <member name="M:LibLAS.LASReader.Dispose">
            <summary>
            The object user should call this method when they finished with the object. In .NET is magaged by the GC.
            </summary>
        </member>
        <member name="T:LibLAS.LASHeader">
            <summary>
            LASHeader class
            </summary>
        </member>
        <member name="M:LibLAS.LASHeader.Dispose">
            <summary>
            The object user should call this method when they finished with the object.
            In .NET is magaged by the GC.
            </summary>
        </member>
        <member name="M:LibLAS.LASHeader.GetPointer">
            <summary>
            gets the opaque pointer to the LASHeaderH instance.
            </summary>
            <returns>opaque pointer to the LASHeaderH instance.</returns>
        </member>
        <member name="M:LibLAS.LASHeader.#ctor(System.IntPtr)">
            <summary>
            LASHeader constructor using the LASHeaderH opaque pointer.
            </summary>
            <param name="hLASHeader"></param>
        </member>
        <member name="M:LibLAS.LASHeader.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>The default constructed header is configured according
            to the ASPRS LAS 1.1 Specification, point data format set to 0.
            Other fields filled with 0.</remarks>
        </member>
        <member name="M:LibLAS.LASHeader.Copy">
            <summary>
            Copy the LASHeader in a new instance
            </summary>
            <returns>new LASHeader instance.</returns>
        </member>
        <member name="M:LibLAS.LASHeader.Destroy">
            <summary>
            Destroy the unmanaged resources to the instance.
            </summary>
            <remarks>The user could call this method when they finished with the object.</remarks>
        </member>
        <member name="M:LibLAS.LASHeader.op_Equality(LibLAS.LASHeader,LibLAS.LASHeader)">
            <summary>
            Comparison overload to the LASHeader
            </summary>
            <param name="lasHeader1">LASHeader instance to be compared</param>
            <param name="lasHeader2">LASHeader instance to be compared</param>
            <returns>true if lasHeader1==lasHeader2</returns>
        </member>
        <member name="M:LibLAS.LASHeader.op_Inequality(LibLAS.LASHeader,LibLAS.LASHeader)">
            <summary>
            Comparison overload to the LASHeader
            </summary>
            <param name="lasHeader1">LASHeader instance to be compared</param>
            <param name="lasHeader2">LASHeader instance to be compared</param>
            <returns></returns>
        </member>
        <member name="M:LibLAS.LASHeader.GetPointRecordsByReturnCount(System.Int32)">
            <summary>
            Returns the number of point records by return.
            </summary>
            <param name="index">the return number to fetch the count for</param>
            <returns>the number of point records for a given return</returns>
        </member>
        <member name="M:LibLAS.LASHeader.SetPointRecordsByReturnCount(System.Int32,System.UInt32)">
            <summary>
            Sets the number of point records for a given return
            </summary>
            <param name="index">the return number to set the count for</param>
            <param name="value">the number of point records for the return </param>
        </member>
        <member name="M:LibLAS.LASHeader.GetScaleX">
            <summary>
            Get scale factor for X coordinate.
            </summary>
            <returns>scale factor for X coordinate.</returns>
        </member>
        <member name="M:LibLAS.LASHeader.GetScaleY">
            <summary>
            Get scale factor for Y coordinate.
            </summary>
            <returns>scale factor for Y coordinate.</returns>
        </member>
        <member name="M:LibLAS.LASHeader.GetScaleZ">
            <summary>
            Get scale factor for Z coordinate.
            </summary>
            <returns>scale factor for Z coordinate.</returns>
        </member>
        <member name="M:LibLAS.LASHeader.SetScale(System.Double,System.Double,System.Double)">
            <summary>
            Set values of scale factor for X, Y and Z coordinates.
            </summary>
            <param name="x">X scale factor of the coordinate</param>
            <param name="y">Y scale factor of the coordinate</param>
            <param name="z">Z scale factor of the coordinate</param>
        </member>
        <member name="M:LibLAS.LASHeader.GetOffsetX">
            <summary>
            Get X coordinate offset.
            </summary>
            <returns>X coordinate offset.</returns>
        </member>
        <member name="M:LibLAS.LASHeader.GetOffsetY">
            <summary>
            Get Y coordinate offset.
            </summary>
            <returns>Y coordinate offset.</returns>
        </member>
        <member name="M:LibLAS.LASHeader.GetOffsetZ">
            <summary>
            Get Z coordinate offset.
            </summary>
            <returns>Z coordinate offset.</returns>
        </member>
        <member name="M:LibLAS.LASHeader.SetOffset(System.Double,System.Double,System.Double)">
            <summary>
            Set values of X, Y and Z coordinates offset.
            </summary>
            <param name="x">X coordinate offset.</param>
            <param name="y">Y coordinate offset.</param>
            <param name="z">Z coordinate offset.</param>
        </member>
        <member name="M:LibLAS.LASHeader.MaxX">
            <summary>
            Get maximum value of extent of X coordinate.
            </summary>
            <returns>maximum value of extent of X coordinate.</returns>
        </member>
        <member name="M:LibLAS.LASHeader.GetMaxY">
            <summary>
            Get maximum value of extent of Y coordinate.
            </summary>
            <returns>maximum value of extent of Y coordinate.</returns>
        </member>
        <member name="M:LibLAS.LASHeader.GetMaxZ">
            <summary>
            Get maximum value of extent of Z coordinate.
            </summary>
            <returns>maximum value of extent of Z coordinate.</returns>
        </member>
        <member name="M:LibLAS.LASHeader.GetMinX">
            <summary>
            Get minimum value of extent of X coordinate.
            </summary>
            <returns>minimum value of extent of X coordinate.</returns>
        </member>
        <member name="M:LibLAS.LASHeader.GetMinY">
            <summary>
            Get minimum value of extent of Y coordinate.
            </summary>
            <returns>minimum value of extent of Y coordinate.</returns>
        </member>
        <member name="M:LibLAS.LASHeader.GetMinZ">
            <summary>
            Get minimum value of extent of Z coordinate.
            </summary>
            <returns>minimum value of extent of Z coordinate.</returns>
        </member>
        <member name="M:LibLAS.LASHeader.SetMax(System.Double,System.Double,System.Double)">
            <summary>
            Set maximum values of extent of X, Y and Z coordinates.
            </summary>
            <param name="x">maximum value of extent of X coordinate.</param>
            <param name="y">maximum value of extent of Y coordinate.</param>
            <param name="z">maximum value of extent of Z coordinate.</param>
        </member>
        <member name="M:LibLAS.LASHeader.SetMin(System.Double,System.Double,System.Double)">
            <summary>
            Set minimum values of extent of X, Y and Z coordinates.
            </summary>
            <param name="x">Set minimum value of extent of X coordinate.</param>
            <param name="y">Set minimum value of extent of Y coordinate.</param>
            <param name="z">Set minimum value of extent of Z coordinate.</param>
        </member>
        <member name="M:LibLAS.LASHeader.AddVariableLengthRecord(LibLAS.LASVariableLengthRecord)">
            <summary>
            Adds a variable length record instance to the header. 
            </summary>
            <param name="variableLengthRecord">variable Length record instance to add</param>
        </member>
        <member name="M:LibLAS.LASHeader.GetVariableLengthRecord(System.UInt32)">
            <summary>
            Returns the variable length record for the given index.  
            </summary>
            <param name="i">the index starting from 0 of the variable length record to fetch</param>
            <returns>a new variable length record instance</returns>
            <remarks>Use VariableLengthRecordsCount property to determine the number of
            variable length records available on the header.</remarks>
        </member>
        <member name="M:LibLAS.LASHeader.DeleteVariableLengthRecord(System.UInt32)">
            <summary>
            Deletes a variable length record from the header for the given index.
            </summary>
            <param name="index">the index starting from 0 of the variable length record to delete</param>
        </member>
        <member name="P:LibLAS.LASHeader.FileSignature">
            <summary>
            Get ASPRS LAS file signature.
            </summary>
            <remarks>The only value allowed as file signature is "LASF",</remarks>
        </member>
        <member name="P:LibLAS.LASHeader.FileSourceId">
            <summary>
            file source identifier.
            </summary>
            <remarks> should be set to a value between 1 and 65535.</remarks>
        </member>
        <member name="P:LibLAS.LASHeader.Reserved">
            <summary>
            Get value field reserved by the ASPRS LAS Specification.
            </summary>
            <remarks>This field is always filled with 0.</remarks>
        </member>
        <member name="P:LibLAS.LASHeader.ProjectId">
            <summary>
            Get project identifier.
            </summary>
            <remarks>return Global Unique Identifier.</remarks>
        </member>
        <member name="P:LibLAS.LASHeader.VersionMajor">
            <summary>
            major component of version of LAS format.
            </summary>
            <remarks>Always 1 as the only valid value. value between
            eVersionMajorMin and eVersionMajorMax (always 1).</remarks>
        </member>
        <member name="P:LibLAS.LASHeader.VersionMinor">
            <summary>
            minor component of version of LAS format.
            </summary>
            <remarks>Valid values are 1 or 0. value between
            eVersionMinorMin and eVersionMinorMax.</remarks>
        </member>
        <member name="P:LibLAS.LASHeader.SystemId">
            <summary>
            system identifier
            </summary>
            <remarks>Default value is "libLAS" specified as the SystemIdentifier constant.
            string is padded right with spaces and its length is 32 bytes.</remarks>
        </member>
        <member name="P:LibLAS.LASHeader.SoftwareId">
            <summary>
            software identifier
            </summary>
            <remarks>Default value is "libLAS 1.0", specified as the SoftwareIdentifier constant.
            String is padded right with spaces and its length is 32 bytes.</remarks>
        </member>
        <member name="P:LibLAS.LASHeader.CreationDOY">
            <summary>
            day of year of file creation date.
            </summary>
            <remarks>Use full date structure instead of Julian date number.
            value is lower than number 366.</remarks>
        </member>
        <member name="P:LibLAS.LASHeader.CreationYear">
            <summary>
            year of file creation date.
            </summary>
            <remarks>value is lower than number 9999.</remarks>
        </member>
        <member name="P:LibLAS.LASHeader.HeaderSize">
            <summary>
            number of bytes of generic verion of public header block storage.
            </summary>
            <remarks>Standard version of the public header block is 227 bytes long.</remarks>
        </member>
        <member name="P:LibLAS.LASHeader.DataOffset">
            <summary>
            number of bytes from the beginning to the first point record.
            </summary>
        </member>
        <member name="P:LibLAS.LASHeader.VariableLengthRecordsCount">
            <summary>
            Returns the number of variable length records in the header
            </summary>
        </member>
        <member name="P:LibLAS.LASHeader.DataFormatId">
            <summary>
            the data format id for the file.  
            </summary>
            <remarks>The value should be 1 or 0, with 1 being points that contain
            time values and 0 being points that do not.</remarks>
        </member>
        <member name="P:LibLAS.LASHeader.DataRecordLength">
            <summary>
            return the record length for the points based on their data format id in bytes.
            </summary>
        </member>
        <member name="P:LibLAS.LASHeader.PointRecordsCount">
            <summary>
            number of point records in the file.  
            </summary>
            <remarks>This value may not reflect the actual number of point
            records in the file.</remarks>
        </member>
        <member name="P:LibLAS.LASHeader.GUID">
            <summary>
            GUID value for the header.
            </summary>
            <remarks>sets and gets the LASGuid instance of the header.</remarks>
        </member>
        <member name="P:LibLAS.LASHeader.Proj4">
            <summary>
            sets and gets the Proj4 in the header.
            </summary>
        </member>
        <member name="F:LibLAS.LASHeader.FormatVersion.eVersionMajorMin">
            Minimum of major component
        </member>
        <member name="F:LibLAS.LASHeader.FormatVersion.eVersionMajorMax">
            Maximum of major component        
        </member>
        <member name="F:LibLAS.LASHeader.FormatVersion.eVersionMinorMin">
            Minimum of minor component
        </member>
        <member name="F:LibLAS.LASHeader.FormatVersion.eVersionMinorMax">
            Maximum of minor component
        </member>
        <member name="T:LibLAS.LASHeader.PointFormat">
            Versions of point record format.
        </member>
        <member name="F:LibLAS.LASHeader.PointFormat.ePointFormat0">
            Point Data Format \e 0
        </member>
        <member name="F:LibLAS.LASHeader.PointFormat.ePointFormat1">
            Point Data Format \e 1
        </member>
        <member name="T:LibLAS.LASHeader.PointSize">
            Number of bytes of point record storage in particular format.
        </member>
        <member name="F:LibLAS.LASHeader.PointSize.ePointSize0">
            Size of point record in data format \e 0
        </member>
        <member name="F:LibLAS.LASHeader.PointSize.ePointSize1">
            Size of point record in data format \e 1
        </member>
        <member name="T:LibLAS.LASGuid">
            <summary>
            LASGuid class
            </summary>
        </member>
        <member name="M:LibLAS.LASGuid.Dispose">
            <summary>
            The object user should call this method when they finished with the object.
            </summary>
            
        </member>
        <member name="M:LibLAS.LASGuid.#ctor">
            <summary>
            Create a new random GUID.
            </summary>
        </member>
        <member name="M:LibLAS.LASGuid.#ctor(System.IntPtr)">
            <summary>
             Creates a new GUID using a opaque pointer.  
            </summary>
            <param name="hGuid">LASGuidH opaque pointer</param>
        </member>
        <member name="M:LibLAS.LASGuid.#ctor(System.String)">
            <summary>
            Creates a new GUID opaque pointer using the given string.  
            </summary>
            <remarks>An example GUID might be something like '8388F1B8-AA1B-4108-BCA3-6BC68E7B062E'</remarks>
            <param name="guidString">string A GUID string in the form "00000000-0000-0000-0000-000000000000"</param>
        </member>
        <member name="M:LibLAS.LASGuid.ToString">
            <summary>
            Gets the String value of the Guid
            </summary>
            <returns>the String value of the Guid</returns>
        </member>
        <member name="M:LibLAS.LASGuid.GetPointer">
            <summary>
            Gets the GUID opaque pointer
            </summary>
            <returns>the GUID opaque pointer</returns>
        </member>
        <member name="M:LibLAS.LASGuid.Equals(System.Object)">
            <summary>
            test if is equal to other object.
            </summary>
            <param name="obj">object to compare</param>
            <returns>true if both are equal</returns>
        </member>
        <member name="M:LibLAS.LASGuid.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibLAS.LASGuid.Equals(LibLAS.LASGuid)">
            <summary>
            test if is equal to other LASGuid.
            </summary>
            <param name="obj">LASGuid to compare</param>
            <returns>true if both are equal</returns>
        </member>
        <member name="F:LibLAS.CAPI.DLL_LAS_VERSION">
            Returns the version string for this library.
            @return the version string for this library.
            
            If libLAS is built using solution from trunk/build/msvc80/liblas.sln
            then C API DLL is called liblas_c_dll.dll, so value of the constant below
            should be updated to "liblas_c_dll.dll".
        </member>
        <member name="M:LibLAS.CAPI.LASError_Reset">
            Resets the error stack for the libLAS C API.  
        </member>
        <member name="M:LibLAS.CAPI.LASError_Pop">
            Pops the top error off of the error stack for the libLAS C API.
        </member>
        <member name="M:LibLAS.CAPI.LASError_GetLastErrorNum">
            Returns the error number of the last error on the error stack.
            @return the error number of the last error on the error stack.
        </member>
        <member name="M:LibLAS.CAPI.LASError_GetLastErrorMsg">
            Returns the name of the method the last error message happened in.
            @return the name of the method the last error message happened in.
        </member>
        <member name="M:LibLAS.CAPI.LASError_GetLastErrorMethod">
            Returns the name of the method the last error message happened in.
            @return the name of the method the last error message happened in.
        </member>
        <member name="M:LibLAS.CAPI.LASError_GetErrorCount">
            Returns the number of error messages on the error stack.
            @return the number of error messages on the error stack.
        </member>
        <member name="M:LibLAS.CAPI.LASError_Print(System.String)">
            Prints the last error message in the error stack to stderr.  If 
            there is no error on the error stack, only the message is printed.
            The function does not alter the error stack in any way.
            @param message Message to include in the stderr output
        </member>
        <member name="M:LibLAS.CAPI.LASReader_Create(System.String)">
            Creates a LASReaderH object that can be used to read LASHeaderH and 
            LASPointH objects with.  The LASReaderH must not be created with a 
            filename that is opened for read or write by any other API functions.
            @return opaque pointer to a LASReaderH instance.
            @param filename Filename to open for read 
        </member>
        <member name="M:LibLAS.CAPI.LASReader_GetNextPoint(System.IntPtr)">
            Reads the next available point on the LASReaderH instance.  If no point 
            is available to read, NULL is returned.  If an error happens during 
            the reading of the next available point, an error will be added to the 
            error stack and can be returned with the LASError_GetLastError* methods.
            @param hReader the opaque handle to the LASReaderH 
            @return an opaque handle to a LASPointH object, or NULL if no point is 
            available to read or an error occured.  Use the 
            LASError_GetLastError* methods to confirm the existence of an error 
            if NULL is returned.
        </member>
        <member name="M:LibLAS.CAPI.LASReader_GetPointAt(System.IntPtr,System.UInt32)">
            Reads a LASPointH from the given position in the LAS file represented 
            by the LASReaderH instance.  If no point is available at that location, 
            NULL is returned.  If an error happens during the reading of the point, 
            an error will be added to the error stack and can be returned with the 
            LASError_GetLastError* methods.
            @param hReader the opaque handle to the LASReaderH
            @param position the integer position of the point in the file to read.
            @return an opaque handle to a LASPointH object, or NULL if no point is 
            available at the given location or an error occured.  Use the 
            LASError_GetLastError* methods to confirm the existence of an error 
            if NULL is returned.
        </member>
        <member name="M:LibLAS.CAPI.LASReader_Destroy(System.IntPtr)">
            Closes the file for reading operations represented by the LASReaderH instance.
            @param hReader the opqaue handle to the LASReaderH
        </member>
        <member name="M:LibLAS.CAPI.LASReader_GetHeader(System.IntPtr)">
            Returns a LASHeaderH representing the header for the file
            @param hReader the LASReaderH instance
            @return a LASHeaderH representing the header for the file.  NULL is returned 
            in the event of an error.  Use the LASError_GetLastError* methods to check
            in the event of a NULL return.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_GetX(System.IntPtr)">
            Returns the X value for the point.  This value is not scaled or offset
            by any header values and stands on its own.  If you need points to have 
            a scale and/or offset applied, this must be done in conjunction with the 
            header values after the value is read.
            @param hPoint the opaque pointer to the LASPointH instance  
            @return the X value for the LASPointH
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_SetX(System.IntPtr,System.Double)">
            Sets the X value for the point.  This value must be scaled or offset 
            by any header values before being set.
            @param hPoint the opaque pointer to the LASPointH instance
            @param value the double value to set for the X value of the point
            @return an error number if an error occured during the setting of the point.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_GetY(System.IntPtr)">
            Returns the Y value for the point.  This value is not scaled or offset
            by any header values and stands on its own.  If you need points to have 
            a scale and/or offset applied, this must be done in conjunction with the 
            header values after the value is read.
            @param hPoint the opaque pointer to the LASPointH instance  
            @return the Y value for the LASPointH
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_SetY(System.IntPtr,System.Double)">
            Sets the Y value for the point.  This value must be scaled or offset 
            by any header values before being set.
            @param hPoint the opaque pointer to the LASPointH instance
            @param value the double value to set for the Y value of the point
            @return an error number if an error occured during the setting of the point.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_GetZ(System.IntPtr)">
            Returns the Z value for the point.  This value is not scaled or offset
            by any header values and stands on its own.  If you need points to have 
            a scale and/or offset applied, this must be done in conjunction with the 
            header values after the value is read.
            @param hPoint the opaque pointer to the LASPointH instance  
            @return the Z value for the LASPointH
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_SetZ(System.IntPtr,System.Double)">
            Sets the Z value for the point.  This value must be scaled or offset 
            by any header values before being set.
            @param hPoint the opaque pointer to the LASPointH instance
            @param value the double value to set for the Z value of the point
            @return an error number if an error occured during the setting of the point.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_GetIntensity(System.IntPtr)">
            Returns the intensity value for the point.  This value is the pulse return 
            magnitude, it is optional, and it is LiDAR system specific.
            @return the intensity value for the point.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_SetIntensity(System.IntPtr,System.UInt16)">
            Sets the intensity value for the point.
            @param hPoint the opaque pointer to the LASPointH instance
            @param value the value to set the intensity to
            @return an error number if an error occured.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_GetReturnNumber(System.IntPtr)">
            Returns the return number for the point.  The return number is "the pulse
            return number for a given output pulse."  The first return number starts with
            the value 1.
            @param hPoint LASPointH instance
            @return a return number, valid from 1-6, for the point.  Use the LASError 
            methods to determine if an error occurred during this operation if 0 
            is returned.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_SetReturnNumber(System.IntPtr,System.UInt16)">
            Sets the return number for the point.  Valid values are from 1-6.
            @param hPoint LASPointH instance
            @param value the value to set for the return number
            @return LASError value determine success or failure.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_GetNumberOfReturns(System.IntPtr)">
            Returns the total number of returns for a given pulse.
            @param hPoint LASPointH instance
            @return total number of returns for this pulse.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_SetNumberOfReturns(System.IntPtr,System.UInt16)">
            Sets the number of returns for the point.  Valid values are from 1-5.
            @param hPoint LASPointH instance
            @param value the value to set for the number of returns
            @return LASError value determine success or failure.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_GetScanDirection(System.IntPtr)">
            Returns the scan direction for a given pulse.
            @param hPoint LASPointH instance
            @return the scan direction for a given pulse.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_SetScanDirection(System.IntPtr,System.UInt16)">
            Sets the scan direction for a given pulse.  Valid values are 0 or 1, with 
            1 being a positive scan direction and 0 being a negative scan direction.
            @param hPoint LASPointH instance
            @param value the value to set for scan direction
            @return LASError value determine success or failure.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_GetFlightLineEdge(System.IntPtr)">
            Returns whether or not a given pulse is an edge point
            @param hPoint LASPointH instance
            @return whether or not a given pulse is an edge point.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_SetFlightLineEdge(System.IntPtr,System.UInt16)">
            Sets the edge marker for a given pulse.  Valid values are 0 or 1, with 
            1 being an edge point and 0 being interior.
            @param hPoint LASPointH instance
            @param value the value to set for flightline edge
            @return LASError value determine success or failure.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_GetScanFlags(System.IntPtr)">
            Returns all of the scan flags for the point -- Return number, number of 
            returns, flightline edge, scan direction, and scan angle rank.
            @param hPoint LASPointH instance
            @return all of the scan flags for the point
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_SetScanFlags(System.IntPtr,System.Byte)">
            Sets all of the scan flags for the point.  No validation is done. 
            @param hPoint LASPointH instance
            @param value the value to set for the flags
            @return LASError value determine success or failure.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_GetClassification(System.IntPtr)">
            Returns the classification for the point
            @param hPoint LASPointH instance
            @return the classification for the point
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_SetClassification(System.IntPtr,System.Byte)">
            Sets the classification for the point.  No validation is done. 
            @param hPoint LASPointH instance
            @param value the value to set for the classification
            @return LASError value determine success or failure.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_GetTime(System.IntPtr)">
            Returns the time for the point
            @param hPoint LASPointH instance
            @return the time for the point
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_SetTime(System.IntPtr,System.Double)">
            Sets the time for the point.  No validation is done. 
            @param hPoint LASPointH instance
            @param value the value to set for the time
            @return LASError value determine success or failure.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_GetScanAngleRank(System.IntPtr)">
            Returns the scan angle for the point
            @param hPoint LASPointH instance
            @return the scan angle for the point
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_SetScanAngleRank(System.IntPtr,System.SByte)">
            Sets the scan angle for the point.  No validation is done. 
            @param hPoint LASPointH instance
            @param value the value to set for the scan angle
            @return LASError value determine success or failure.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_GetUserData(System.IntPtr)">
            Returns the arbitrary user data for the point
            @param hPoint LASPointH instance
            @return the arbitrary user data for the point
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_SetUserData(System.IntPtr,System.Byte)">
            Sets the arbitrary user data for the point.  No validation is done. 
            @param hPoint LASPointH instance
            @param value the value to set for the arbitrary user data
            @return LASError value determine success or failure.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_Validate(System.IntPtr)">
            Returns a bitfield representing the validity of various members
                    *  enum DataMemberFlag
                    {
                    eReturnNumber = 1,
                    eNumberOfReturns = 2,
                    eScanDirection = 4,
                    eFlightLineEdge = 8,
                    eClassification = 16,
                    eScanAngleRank = 32,
                    eTime = 64
                    };
                    *  @param hPoint LASPointH instance
                    *  @return bitfield representing the validity of various members.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_IsValid(System.IntPtr)">
            Returns a boolean whether or not the point is valid
            @param hPoint LASPointH instance
            @return a boolean (1 or 0) whether or not the point is valid.
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_Create">
            Creates a new empty LASPointH instance 
            @return LASPointH instance.  If the value is NULL use the 
            LASError_GetLastError* methods to determine the problem
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_Copy(System.IntPtr)">
            Creates a copy of a LASPointH instance
            @param hPoint the LASPointH instance to copy 
            @return new LASPointH instance.  If the value is NULL use the 
            LASError_GetLastError* methods to determine the problem
        </member>
        <member name="M:LibLAS.CAPI.LASPoint_Destroy(System.IntPtr)">
            Destroys/deletes a LASPointH instance
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_Copy(System.IntPtr)">
            Copies a LASHeaderH instance
            @param hHeader the LASHeaderH to copy
            @return a LASHeaderH instance or NULL on error
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_Create">
            Creates an empty LASHeaderH with default values
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_Destroy(System.IntPtr)">
            Destroys/deletes a LASHeader instance
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetFileSignature(System.IntPtr)">
            Returns the file signature the the file.  This should always be 'LASF'
            @param hHeader LASHeaderH instance
            @return the file signature the the file.  This should always be 'LASF'
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetFileSourceId(System.IntPtr)">
            Returns the file source id for the file.  It is a number from 1-65535
            @param hHeader LASHeaderH instance
            @return the file source id for the file.
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetProjectId(System.IntPtr)">
            Returns the project id for the header as a GUID string
            @return the project id for the header as a GUID string
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetGUID(System.IntPtr,System.IntPtr)">
            Sets the project id/GUID for the header
            @param hHeader LASHeaderH instance
            @param hId LASGuidH instance to set the GUID for the header to
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetVersionMajor(System.IntPtr)">
            Returns the major version number for the header.  This value is expected 
            to always be 1.
            @param hHeader LASHeaderH instance
            @return major version number for the header.
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetVersionMajor(System.IntPtr,System.Byte)">
            Sets the major version number for the header.  All values other than 1 
            are invalid.
            @param hHeader LASHeaderH instance
            @param value integer value to set the major version to (only the value 1 is valid)
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetVersionMinor(System.IntPtr)">
            Returns the min version number for the header.  This value is expected 
            to be 1 or 0 representing LAS 1.1 or LAS 1.0
            @param hHeader LASHeaderH instance
            @return minor version number for the header.
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetVersionMinor(System.IntPtr,System.Byte)">
            Sets the minor version number for the header.  All values other than 1 or 0 
            are invalid.
            @param hHeader LASHeaderH instance
            @param value integer value to set the minor version to (only the values 1 or 0 are valid)
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetSystemId(System.IntPtr)">
            Returns the System ID for the header.  The caller assumes ownership of the returned string
            @return the system id for the header as a character array
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetSystemId(System.IntPtr,System.String)">
            Sets the System ID for the header.  By default, this value is "libLAS" if it 
            is not explicitly set.  See the LAS specification for details on what this
            value should logically be set to.
            @param hHeader LASHeaderH instance
            @param value the value to set as the System ID for the header
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetSoftwareId(System.IntPtr)">
            Returns the Software ID for the header.  The caller assumes ownership of the returned string
            @return the software id for the header as a character array
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetSoftwareId(System.IntPtr,System.String)">
            Sets the Software ID for the header.  By default, this value is "libLAS 1.0" if it 
            is not explicitly set.  See the LAS specification for details on what this
            value should logically be set to.
            @param hHeader LASHeaderH instance
            @param value the value to set as the Software ID for the header
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetReserved(System.IntPtr)">
            Returns the reserved value for the header.  This should aways be 0.
            @return the reserved value for the header.
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetCreationDOY(System.IntPtr)">
            Returns the file creation day of the year.  The values start from 1, being January 1st, 
            and end at 365 or 366 being December 31st, depending on leap year.
            @return the day of the year as an integer starting from 1 for the file creation.
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetCreationDOY(System.IntPtr,System.UInt16)">
            Sets the file creation day of the year.  The values start from 1, being January 1st.  No
            date validation is done
            @param hHeader LASHeaderH instance
            @param value the value to set as the creation day
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetCreationYear(System.IntPtr)">
            Returns the file creation year.  This is a four digit number representing the 
            year for the file, ie 2003, 2008, etc.
            @return the creation year for the file or 0 if none is set
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetCreationYear(System.IntPtr,System.UInt16)">
            Sets the file creation year.  This should be a four digit number representing
            the year for the file, ie 2003, 2008, etc.  No validation on the value is done
            @param hHeader LASHeaderH instance
            @param value the value to set for the creation year
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetHeaderSize(System.IntPtr)">
            Returns the size of the header for the file in bytes.
            @return the size of the header for the file in bytes.
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetDataOffset(System.IntPtr)">
            Returns the byte offset to the start of actual point data for the file
            @param hHeader LASHeaderH instance
            @return the type offset to the start of actual point data for the file
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetRecordsCount(System.IntPtr)">
            Returns the number of variable length records in the header
            @param hHeader LASHeaderH instance
            @return the number of variable length records in the header
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetDataRecordLength(System.IntPtr)">
            Returns the record length for the points based on their data format id in bytes
            @param hHeader LASHeaderH instance
            @return the record length for the points based on their data format id in bytes
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetDataFormatId(System.IntPtr)">
            Returns the data format id.  If this value is 1, the point data have time values
            associated with them.  If it is 0, the point data do not have time values.  
            @param hHeader LASHeaderH instance
            @return the data format id for the file.
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetDataFormatId(System.IntPtr,System.Byte)">
            Sets the data format id for the file.  The value should be 1 or 0, with 1 being
            points that contain time values and 0 being points that do not.
            @param hHeader LASHeaderH instance
            @param value the value for the data format id, 1 or 0 are valid values.
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetPointRecordsCount(System.IntPtr)">
            Returns the number of point records in the file.  This value may not reflect the actual 
            number of point records in the file.
            @param hHeader LASHeaderH instance
            @return the number of point records in the file
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetPointRecordsCount(System.IntPtr,System.UInt32)">
            Sets the number of point records for the file.
            @param hHeader LASHeaderH instance
            @param value the long integer to set for the number of point records in the file
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetPointRecordsByReturnCount(System.IntPtr,System.Int32)">
            Returns the number of point records by return.
            @param hHeader LASHeaderH instance
            @param index the return number to fetch the count for
            @return the number of point records for a given return
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetPointRecordsByReturnCount(System.IntPtr,System.Int32,System.UInt32)">
            Sets the number of point records for a given return
            @param hHeader LASHeaderH instance
            @param index the return number to set the count for
            @param value the number of point records for the return 
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetScaleX(System.IntPtr)">
            Return the X scale factor
            @param hHeader LASHeaderH instance
            @return the X scale factor
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetScaleY(System.IntPtr)">
            Return the Y scale factor
            @param hHeader LASHeaderH instance
            @return the Y scale factor
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetScaleZ(System.IntPtr)">
            Return the Z scale factor
            @param hHeader LASHeaderH instance
            @return the Z scale factor
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetScale(System.IntPtr,System.Double,System.Double,System.Double)">
            Sets the scale factors
            @param hHeader LASHeaderH instance
            @param x the x scale factor
            @param y the y scale factor
            @param z the z scale factor
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetOffsetX(System.IntPtr)">
            Return the X offset
            @param hHeader LASHeaderH instance
            @return the X offset
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetOffsetY(System.IntPtr)">
            Return the Y offset
            @param hHeader LASHeaderH instance
            @return the Y offset
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetOffsetZ(System.IntPtr)">
            Return the Z offset
            @param hHeader LASHeaderH instance
            @return the Z offset
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetOffset(System.IntPtr,System.Double,System.Double,System.Double)">
            Sets the offset values
            @param hHeader LASHeaderH instance
            @param x the x offset
            @param y the y offset
            @param z the z offset
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetMinX(System.IntPtr)">
            Return the minimum x value
            @param hHeader LASHeaderH instance
            @return the minimum x value
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetMinY(System.IntPtr)">
            Return the minimum y value
            @param hHeader LASHeaderH instance
            @return the minimum y value
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetMinZ(System.IntPtr)">
            Return the minimum z value
            @param hHeader LASHeaderH instance
            @return the minimum z value
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetMin(System.IntPtr,System.Double,System.Double,System.Double)">
            Sets the minimum values
            @param hHeader LASHeaderH instance
            @param x the x minimum
            @param y the y minimum
            @param z the z minimum
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetMaxX(System.IntPtr)">
            Return the maximum x value
            @param hHeader LASHeaderH instance
            @return the maximum x value
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetMaxY(System.IntPtr)">
            Return the maximum y value
            @param hHeader LASHeaderH instance
            @return the maximum y value
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetMaxZ(System.IntPtr)">
            Return the maximum z value
            @param hHeader LASHeaderH instance
            @return the maximum z value
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetMax(System.IntPtr,System.Double,System.Double,System.Double)">
            Sets the maximum values
            @param hHeader LASHeaderH instance
            @param x the x maximum
            @param y the y maximum
            @param z the z maximum
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetProj4(System.IntPtr)">
            Returns the proj.4 string describing the spatial reference of the 
            header if it is available
            @param hHeader LASHeaderH instance
            @return the proj.4 string or NULL if none is available.  The caller
            owns the string.
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_SetProj4(System.IntPtr,System.String)">
            Sets the proj4 stirng describing the spatial reference of the header.
            @param hHeader LASHeaderH instance
            @param value the proj4 string to set for the header
            @return LASError enum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetVLR(System.IntPtr,System.UInt32)">
            Returns the VLR record for the given index.  Use LASHeader_GetRecordsCount to 
            determine the number of VLR records available on the header.
            @param hHeader the LASHeaderH instance
            @param i the index starting from 0 of the VLR to fetch
            @return LASVLRH instance that models the Variable Length Record
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_DeleteVLR(System.IntPtr,System.UInt32)">
            Deletes a VLR record from the header for the given index.
            @param hHeader the LASHeaderH instance
            @param index the index starting from 0 of the VLR to delete
            @return LASErrorEnum
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_AddVLR(System.IntPtr,System.IntPtr)">
            Adds a VLR record to the header. 
            @param hHeader the LASHeaderH instance
            @param hVLR the VLR to add to the header
            @return LASErrorEnum
        </member>
        <member name="M:LibLAS.CAPI.LASWriter_Create(System.String,System.IntPtr,System.Int32)">
            Creates a new LASWriterH for write operations on LAS files.  The file may 
            be opened in either LAS_MODE_APPEND or LAS_MODE_WRITE, but the file cannot 
            be open by another other operations (another LASReaderH or LASWriterH).  
            @param filename The filename to open to write
            @param hHeader an opaque pointer to a LASHeaderH that will be written to 
            the file as part of the opening for write operation.
            @param mode a mode value to denote whether to open for write or append 
            operations.  Valid values are LAS_MODE_APPEND and LAS_MODE_WRITE.
        </member>
        <member name="M:LibLAS.CAPI.LASWriter_WritePoint(System.IntPtr,System.IntPtr)">
            Writes a point to the file.  The location of where the point is writen is 
            determined by the mode the file is opened in, and what the last operation was.  
            For example, if the file was opened for append, the next point would be written 
            at the end of the file.  Likewise, if the file is opened in write mode, even 
            if the file already existed, the next WritePoint operation will happen at the 
            end of the header and all of the existing points in the file will be overwritten.
            @param hWriter opaque pointer to the LASWriterH instance
            @param hPoint the opaque LASPointH pointer to write
            @return LE_None if no error occurred during the write operation.
        </member>
        <member name="M:LibLAS.CAPI.LASWriter_WriteHeader(System.IntPtr,System.IntPtr)">
            Overwrites the header for the file represented by the LASWriterH.  It does 
            not matter if the file is opened for append or for write.
            @param hWriter opaque pointer to the LASWriterH instance
            @param hHeader LASHeaderH instance to write into the file
            @return LE_None if no error occurred during the operation.
        </member>
        <member name="M:LibLAS.CAPI.LASWriter_Destroy(System.IntPtr)">
            Destroys the LASWriterH instance, effectively closing the file and performing 
            housekeeping operations.
            @param hWriter LASWriterH instance to close
        </member>
        <member name="M:LibLAS.CAPI.LASHeader_GetGUID(System.IntPtr)">
            Returns the GUID value for the header as an opaque LASGuidH pointer.
            @param hHeader the opaque pointer to the LASHeaderH
            @return the GUID value for the header as an opaque LASGuidH pointer.
        </member>
        <member name="M:LibLAS.CAPI.LASGuid_Create">
            Returns a new random GUID.
            @return a new random GUID
        </member>
        <member name="M:LibLAS.CAPI.LASGuid_CreateFromString(System.String)">
            Creates a new GUID opaque pointer using the given string.  
            @param string A GUID string in the form "00000000-0000-0000-0000-000000000000"
            An example GUID might be something like '8388F1B8-AA1B-4108-BCA3-6BC68E7B062E'
            @return the GUID value as an opaque LASGuidH pointer.
        </member>
        <member name="M:LibLAS.CAPI.LASGuid_Destroy(System.IntPtr)">
            Destroys a GUID opaque pointer and removes it from the heap
            @param hId the GUID value to destroy as an opaque LASGuidH pointer.
        </member>
        <member name="M:LibLAS.CAPI.LASGuid_Equals(System.IntPtr,System.IntPtr)">
            Determines if two GUIDs are equal.
            @param hId1 the first GUID
            @param hId2 the second GUID
            @return 0 if false, 1 if true.  Use the LASError_GetLastError* methods to 
            determine if an error occured during the operation of this function.
        </member>
        <member name="M:LibLAS.CAPI.LASGuid_AsString(System.IntPtr)">
            Returns a string representation of the GUID opqaue pointer.  The caller 
            owns the string.
            @param hId the LASGuidH pointer
            @return a string representation of the GUID opaque pointer.
        </member>
        <member name="M:LibLAS.CAPI.LASVLR_Create">
            Creates a new VLR record
            @return a new VLR record
        </member>
        <member name="M:LibLAS.CAPI.LASVLR_Destroy(System.IntPtr)">
            Destroys a VLR record and removes it from the heap
        </member>
        <member name="M:LibLAS.CAPI.LASVLR_GetUserId(System.IntPtr)">
            Returns the User Id for the VLR 
            @param hVLR the LASVLRH instance
            @return the User Id for the VLR
        </member>
        <member name="M:LibLAS.CAPI.LASVLR_SetUserId(System.IntPtr,System.String)">
            Sets the User Id for the VLR
            @param hVLR the LASVLRH instance
            @param value the value to set for the User Id.  It will be clipped to fit 
            within 16 characters
            @return LASErrorEnum
        </member>
        <member name="M:LibLAS.CAPI.LASVLR_GetDescription(System.IntPtr)">
            Gets the description for the VLR
            @param hVLR the LASVLRH instance
            @return the description for the VLR
        </member>
        <member name="M:LibLAS.CAPI.LASVLR_SetDescription(System.IntPtr,System.String)">
            Sets the description for the VLR
            @param hVLR the LASVLRH instance
            @param value the value to set for the description.  It will be clipped to fit 
            within 32 characters
            @return LASErrorEnum
        </member>
        <member name="M:LibLAS.CAPI.LASVLR_GetRecordLength(System.IntPtr)">
            Returns the record length of the data stored in the VLR
            @param hVLR the LASVLRH instance
            @return the record length of the data stored in the VLR
        </member>
        <member name="M:LibLAS.CAPI.LASVLR_SetRecordLength(System.IntPtr,System.UInt16)">
            Sets the record length of the data stored in the VLR
            @param hVLR the LASVLRH instance
            @param value the length to set for the VLR data length
            @return LASErrorEnum
        </member>
        <member name="M:LibLAS.CAPI.LASVLR_GetRecordId(System.IntPtr)">
            Gets the record id for the VLR
            @param hVLR the LASVLRH instance
            @return the record id for the VLR
        </member>
        <member name="M:LibLAS.CAPI.LASVLR_SetRecordId(System.IntPtr,System.UInt16)">
            Sets the record id for the VLR
            @param hVLR the LASVLRH instance
            @param value the record id to set
            @return LASErrorEnum
        </member>
        <member name="M:LibLAS.CAPI.LASVLR_GetReserved(System.IntPtr)">
            Gets the reserved value of the VLR.  This should be 0 and should aways be 0.
            @param hVLR the LASVLRH instance
            @return the reserved value of the VLR.
        </member>
        <member name="M:LibLAS.CAPI.LASVLR_SetReserved(System.IntPtr,System.UInt16)">
            Sets the reserved value of the VLR.  This should be 0 and you should not 
            have to ever monkey with this value according to the spec.
            @param hVLR the LASVLRH instance
            @param value the value to set for the reserved value
            @return LASErrorEnum
        </member>
        <member name="M:LibLAS.CAPI.LASVLR_GetData(System.IntPtr,System.Byte[]@)">
            Gets the data stream for the VLR as an array of bytes
            @param hVLR the LASVLRH instance
            @param data a pointer to where place the array
            @param length a pointer to where to place the length of the array
            @return LASErrorEnum
        </member>
        <member name="T:LibLAS.LASPoint">
            <summary>
            LASPoint class
            </summary>
        </member>
        <member name="M:LibLAS.LASPoint.#ctor(System.IntPtr)">
            <summary>
            Create a new LASPoint from the LASPointH opaque structure
            </summary>
            <param name="hLASPoint">LASPointH opaque structure</param>
        </member>
        <member name="M:LibLAS.LASPoint.#ctor">
            <summary>
            Create a generic LASPoint
            </summary>
        </member>
        <member name="M:LibLAS.LASPoint.Equals(LibLAS.LASPoint)">
            <summary>
            Compare 2 LASPoint to be equal
            </summary>
            <param name="lasPoint">LASPoint object</param>
            <returns>true if lasPoint is equals to the instance.</returns>
        </member>
        <member name="M:LibLAS.LASPoint.IsValid">
            <summary>
            test is the LASPoint is Valid
            </summary>
            <returns>true is is valid</returns>
        </member>
        <member name="M:LibLAS.LASPoint.Dispose">
            <summary>
            The object user should call this method when they finished with the object. In .NET is magaged by the GC.
            </summary>
        </member>
        <member name="M:LibLAS.LASPoint.GetPointer">
            <summary>
            gets the opaque pointer to the LASPointH instance.
            </summary>
            <returns>the opaque pointer to the LASPointH instance</returns>
        </member>
        <member name="M:LibLAS.LASPoint.Copy">
            <summary>
            Copy a LASPoint object creating a new one.
            </summary>
            <returns>a new LASPoint instance copied.</returns>
        </member>
        <member name="M:LibLAS.LASPoint.Validate">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="P:LibLAS.LASPoint.X">
            <summary>
            X value for the point.
            </summary>
            <remarks>This value must be scaled or offset by any header values before being set.</remarks>
        </member>
        <member name="P:LibLAS.LASPoint.Y">
            <summary>
            Y value for the point.
            </summary>
            <remarks>This value must be scaled or offset by any header values before being set.</remarks>
        </member>
        <member name="P:LibLAS.LASPoint.Z">
            <summary>
            Z value for the point.
            </summary>
            <remarks>This value must be scaled or offset by any header values before being set.</remarks>
            
        </member>
        <member name="P:LibLAS.LASPoint.Intensity">
            <summary>
             intensity value for the point.
            </summary>
            <remarks>This value is the pulse return magnitude, it is optional, and it is LiDAR system specific. 
            </remarks>
        </member>
        <member name="P:LibLAS.LASPoint.ScanFlags">
            <summary>
             scan flags for the point -- Return number, number of returns, flightline edge, scan direction, and scan angle rank.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:LibLAS.LASPoint.ReturnNumber">
            <summary>
             return number for the point.
            </summary>
            <remarks>The return number is "the pulse return number for a given output pulse."  The first return number starts with the value 1. valid from 1 to 6.</remarks>
        </member>
        <member name="P:LibLAS.LASPoint.NumberOfReturns">
            <summary>
             total number of returns for a given pulse.
            </summary>
            <remarks>Valid values are from 1-5. </remarks>
        </member>
        <member name="P:LibLAS.LASPoint.ScanDirection">
            <summary>
            scan direction for a given pulse.
            </summary>
            <remarks>Valid values are 0 or 1, with 1 being a positive scan direction and 0 being a negative scan direction.</remarks>
        </member>
        <member name="P:LibLAS.LASPoint.FlightLineEdge">
            <summary>
            whether or not a given pulse is an edge point.
            </summary>
            <remarks>Valid values are 0 or 1, with 1 being an edge point and 0 being interior.</remarks>
        </member>
        <member name="P:LibLAS.LASPoint.Classification">
            <summary>
            classification for the point.
            </summary>
        </member>
        <member name="P:LibLAS.LASPoint.ScanAngleRank">
            <summary>
            the scan angle for the point.
            </summary>
        </member>
        <member name="P:LibLAS.LASPoint.UserData">
            <summary>
            arbitrary user data for the point.
            </summary>
        </member>
        <member name="P:LibLAS.LASPoint.Time">
            <summary>
             time for the point.
            </summary>
        </member>
        <member name="T:LibLAS.LASPoint.DataMemberFlag">
            <summary>
            Returns a bitfield representing the validity of various members.
            </summary>
        </member>
        <member name="F:LibLAS.LASPoint.DataMemberFlag.eReturnNumber">
            <summary>
            ReturnNumber property flag.
            </summary>
        </member>
        <member name="F:LibLAS.LASPoint.DataMemberFlag.eNumberOfReturns">
            <summary>
            NumberOfReturns property flag.
            </summary>
        </member>
        <member name="F:LibLAS.LASPoint.DataMemberFlag.eScanDirection">
            <summary>
            ScanDirection property flag.
            </summary>
        </member>
        <member name="F:LibLAS.LASPoint.DataMemberFlag.eFlightLineEdge">
            <summary>
            FlightLineEdge property flag.
            </summary>
        </member>
        <member name="F:LibLAS.LASPoint.DataMemberFlag.eClassification">
            <summary>
            Classification property flag.
            </summary>
        </member>
        <member name="F:LibLAS.LASPoint.DataMemberFlag.eScanAngleRank">
            <summary>
            ScanAngleRank property flag.
            </summary>
        </member>
        <member name="F:LibLAS.LASPoint.DataMemberFlag.eTime">
            <summary>
            Time property flag.
            </summary>
        </member>
    </members>
</doc>
