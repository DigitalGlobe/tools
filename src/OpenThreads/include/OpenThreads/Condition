//
// OpenThreads library, Copyright (C) 2002 - 2003  The Open Thread Group
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

//
// Condition - C++ condition class
// ~~~~~~~~~
//

#ifndef _OPENTHREADS_CONDITION_
#define _OPENTHREADS_CONDITION_

#include <OpenThreads/Exports>
#include <OpenThreads/Mutex>

namespace OpenThreads {

/**
 *  @class Condition
 *  @brief  This class provides an object-oriented thread condition interface.
 */
class OPENTHREAD_EXPORT_DIRECTIVE Condition {

public:

    /**
     *  Constructor
     */
    Condition();

    /**
     *  Destructor
     */
    virtual ~Condition();

    /**
     *  Wait on a mutex.
     */
    int wait(Mutex *mutex);

    /**
     *  Wait on a mutex for a given amount of time (ms)
     *
     *  @return 0 if normal, -1 if errno set, errno code otherwise.
     */
    int wait(Mutex *mutex, unsigned long int ms);

    /**
     *  Signal a SINGLE thread to wake if it's waiting.
     *
     *  @return 0 if normal, -1 if errno set, errno code otherwise.
     */
    int signal();

    /**
     *  Wake all threads waiting on this condition.
     *
     *  @return 0 if normal, -1 if errno set, errno code otherwise.
     */
    int broadcast();

private:

    /**
     *  Private copy constructor, to prevent tampering.
     */
    Condition(const Condition &c) {};

    /**
     *  Private copy assignment, to prevent tampering.
     */
    Condition &operator=(const Condition &c) {return *(this);};

    /**
     *  Implementation-specific data
     */
    void *_prvData;

};

}

#endif // !_OPENTHREADS_CONDITION_
