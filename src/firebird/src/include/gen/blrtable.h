static const UCHAR blr_table4 [] = {
	 0, (UCHAR) nod_assignment, (UCHAR) nod_list, (UCHAR) nod_dcl_variable, 
/*  4*/	(UCHAR) nod_message, (UCHAR) nod_erase, (UCHAR) nod_for, 
/*  7*/	(UCHAR) nod_for, (UCHAR) nod_if, (UCHAR) nod_loop, 
/* 10*/	(UCHAR) nod_modify, (UCHAR) nod_handler, (UCHAR) nod_receive, 
/* 13*/	(UCHAR) nod_select, (UCHAR) nod_send, (UCHAR) nod_store, 
/* 16*/	 0, (UCHAR) nod_label, (UCHAR) nod_leave, (UCHAR) nod_store, 
/* 20*/	(UCHAR) nod_post, (UCHAR) nod_literal, (UCHAR) nod_dbkey, 
/* 23*/	(UCHAR) nod_field, (UCHAR) nod_field, (UCHAR) nod_argument, 
/* 26*/	(UCHAR) nod_variable, (UCHAR) nod_average, (UCHAR) nod_count, 
/* 29*/	(UCHAR) nod_max, (UCHAR) nod_min, (UCHAR) nod_total, 
/* 32*/	 0,  0, (UCHAR) nod_add, (UCHAR) nod_subtract, (UCHAR) nod_multiply, 
/* 37*/	(UCHAR) nod_divide, (UCHAR) nod_negate, (UCHAR) nod_concatenate, 
/* 40*/	(UCHAR) nod_substr, (UCHAR) nod_argument, (UCHAR) nod_from, 
/* 43*/	(UCHAR) nod_from, (UCHAR) nod_user_name, (UCHAR) nod_null, 
/* 46*/	(UCHAR) nod_equiv, (UCHAR) nod_eql, (UCHAR) nod_neq, 
/* 49*/	(UCHAR) nod_gtr, (UCHAR) nod_geq, (UCHAR) nod_lss, 
/* 52*/	(UCHAR) nod_leq, (UCHAR) nod_contains, (UCHAR) nod_matches, 
/* 55*/	(UCHAR) nod_starts, (UCHAR) nod_between, (UCHAR) nod_or, 
/* 58*/	(UCHAR) nod_and, (UCHAR) nod_not, (UCHAR) nod_any, 
/* 61*/	(UCHAR) nod_missing, (UCHAR) nod_unique, (UCHAR) nod_like, 
/* 64*/	 0,  0,  0, (UCHAR) nod_rse,  0,  0,  0,  0,  0,  0, 
/* 74*/	(UCHAR) nod_relation, (UCHAR) nod_relation, (UCHAR) nod_union, 
/* 77*/	(UCHAR) nod_map,  0, (UCHAR) nod_aggregate,  0,  0, 
/* 82*/	 0, (UCHAR) nod_agg_count, (UCHAR) nod_agg_max, (UCHAR) nod_agg_min, 
/* 86*/	(UCHAR) nod_agg_total, (UCHAR) nod_agg_average, (UCHAR) nod_argument, 
/* 89*/	 0,  0,  0,  0, (UCHAR) nod_agg_count2, (UCHAR) nod_agg_count_distinct, 
/* 95*/	(UCHAR) nod_agg_total_distinct, (UCHAR) nod_agg_average_distinct, 
/* 97*/	 0,  0,  0, (UCHAR) nod_function, (UCHAR) nod_gen_id, 
/*102*/	(UCHAR) nod_prot_mask, (UCHAR) nod_upcase, (UCHAR) nod_lock_state, 
/*105*/	(UCHAR) nod_value_if, (UCHAR) nod_sleuth, (UCHAR) nod_scalar, 
/*108*/	(UCHAR) nod_like,  0,  0,  0, (UCHAR) nod_seek,  0, 
/*114*/	 0,  0,  0,  0,  0, (UCHAR) nod_rse, (UCHAR) nod_exec_proc, 
/*121*/	 0,  0,  0, (UCHAR) nod_procedure, (UCHAR) nod_procedure, 
/*126*/	(UCHAR) nod_exec_proc, (UCHAR) nod_rse, (UCHAR) nod_abort, 
/*129*/	(UCHAR) nod_block, (UCHAR) nod_error_handler, (UCHAR) nod_cast, 
/*132*/	 0,  0, (UCHAR) nod_start_savepoint, (UCHAR) nod_end_savepoint, 
/*136*/	 0,  0,  0, (UCHAR) nod_plan, (UCHAR) nod_merge, (UCHAR) nod_join, 
/*142*/	(UCHAR) nod_sequential, (UCHAR) nod_navigational, (UCHAR) nod_indices, 
/*145*/	(UCHAR) nod_retrieve, (UCHAR) nod_relation, (UCHAR) nod_relation, 
/*148*/	 0,  0, (UCHAR) nod_set_generator, (UCHAR) nod_ansi_any, 
/*152*/	(UCHAR) nod_exists,  0, (UCHAR) nod_rec_version, (UCHAR) nod_stall, 
/*156*/	 0,  0, (UCHAR) nod_ansi_all, (UCHAR) nod_extract, 
/*160*/	(UCHAR) nod_current_date, (UCHAR) nod_current_timestamp, 
/*162*/	(UCHAR) nod_current_time, (UCHAR) nod_post, (UCHAR) nod_exec_into, 
/*165*/	(UCHAR) nod_user_savepoint, (UCHAR) nod_dcl_cursor, 
/*167*/	(UCHAR) nod_cursor_stmt, (UCHAR) nod_current_timestamp, 
/*169*/	(UCHAR) nod_current_time, (UCHAR) nod_agg_list, (UCHAR) nod_agg_list_distinct, 
/*172*/	(UCHAR) nod_modify,  0, (UCHAR) nod_current_role,  0, 
/*176*/	(UCHAR) nod_exec_sql, (UCHAR) nod_internal_info,  0, 
/*179*/	 0,  0, (UCHAR) nod_lowcase, (UCHAR) nod_strlen, (UCHAR) nod_trim, 
/*184*/	(UCHAR) nod_init_variable, (UCHAR) nod_union, (UCHAR) nod_sys_function, 
/*187*/	(UCHAR) nod_class_node_jrd, (UCHAR) nod_similar, (UCHAR) nod_exec_stmt, 
/*190*/	(UCHAR) nod_stmt_expr, (UCHAR) nod_derived_expr,  0};
static const UCHAR blr_table [] = {
	 0, (UCHAR) nod_assignment, (UCHAR) nod_list, (UCHAR) nod_dcl_variable, 
/*  4*/	(UCHAR) nod_message, (UCHAR) nod_erase, (UCHAR) nod_for, 
/*  7*/	(UCHAR) nod_for, (UCHAR) nod_if, (UCHAR) nod_loop, 
/* 10*/	(UCHAR) nod_modify, (UCHAR) nod_handler, (UCHAR) nod_receive, 
/* 13*/	(UCHAR) nod_select, (UCHAR) nod_send, (UCHAR) nod_store, 
/* 16*/	 0, (UCHAR) nod_label, (UCHAR) nod_leave, (UCHAR) nod_store, 
/* 20*/	(UCHAR) nod_post, (UCHAR) nod_literal, (UCHAR) nod_dbkey, 
/* 23*/	(UCHAR) nod_field, (UCHAR) nod_field, (UCHAR) nod_argument, 
/* 26*/	(UCHAR) nod_variable, (UCHAR) nod_average2, (UCHAR) nod_count, 
/* 29*/	(UCHAR) nod_max, (UCHAR) nod_min, (UCHAR) nod_total2, 
/* 32*/	 0,  0, (UCHAR) nod_add2, (UCHAR) nod_subtract2, (UCHAR) nod_multiply2, 
/* 37*/	(UCHAR) nod_divide2, (UCHAR) nod_negate, (UCHAR) nod_concatenate, 
/* 40*/	(UCHAR) nod_substr, (UCHAR) nod_argument, (UCHAR) nod_from, 
/* 43*/	(UCHAR) nod_from, (UCHAR) nod_user_name, (UCHAR) nod_null, 
/* 46*/	(UCHAR) nod_equiv, (UCHAR) nod_eql, (UCHAR) nod_neq, 
/* 49*/	(UCHAR) nod_gtr, (UCHAR) nod_geq, (UCHAR) nod_lss, 
/* 52*/	(UCHAR) nod_leq, (UCHAR) nod_contains, (UCHAR) nod_matches, 
/* 55*/	(UCHAR) nod_starts, (UCHAR) nod_between, (UCHAR) nod_or, 
/* 58*/	(UCHAR) nod_and, (UCHAR) nod_not, (UCHAR) nod_any, 
/* 61*/	(UCHAR) nod_missing, (UCHAR) nod_unique, (UCHAR) nod_like, 
/* 64*/	 0,  0,  0, (UCHAR) nod_rse,  0,  0,  0,  0,  0,  0, 
/* 74*/	(UCHAR) nod_relation, (UCHAR) nod_relation, (UCHAR) nod_union, 
/* 77*/	(UCHAR) nod_map,  0, (UCHAR) nod_aggregate,  0,  0, 
/* 82*/	 0, (UCHAR) nod_agg_count, (UCHAR) nod_agg_max, (UCHAR) nod_agg_min, 
/* 86*/	(UCHAR) nod_agg_total2, (UCHAR) nod_agg_average2, (UCHAR) nod_argument, 
/* 89*/	 0,  0,  0,  0, (UCHAR) nod_agg_count2, (UCHAR) nod_agg_count_distinct, 
/* 95*/	(UCHAR) nod_agg_total_distinct2, (UCHAR) nod_agg_average_distinct2, 
/* 97*/	 0,  0,  0, (UCHAR) nod_function, (UCHAR) nod_gen_id2, 
/*102*/	(UCHAR) nod_prot_mask, (UCHAR) nod_upcase, (UCHAR) nod_lock_state, 
/*105*/	(UCHAR) nod_value_if, (UCHAR) nod_sleuth, (UCHAR) nod_scalar, 
/*108*/	(UCHAR) nod_like,  0,  0,  0, (UCHAR) nod_seek,  0, 
/*114*/	 0,  0,  0,  0,  0, (UCHAR) nod_rse, (UCHAR) nod_exec_proc, 
/*121*/	 0,  0,  0, (UCHAR) nod_procedure, (UCHAR) nod_procedure, 
/*126*/	(UCHAR) nod_exec_proc, (UCHAR) nod_rse, (UCHAR) nod_abort, 
/*129*/	(UCHAR) nod_block, (UCHAR) nod_error_handler, (UCHAR) nod_cast, 
/*132*/	 0,  0, (UCHAR) nod_start_savepoint, (UCHAR) nod_end_savepoint, 
/*136*/	 0,  0,  0, (UCHAR) nod_plan, (UCHAR) nod_merge, (UCHAR) nod_join, 
/*142*/	(UCHAR) nod_sequential, (UCHAR) nod_navigational, (UCHAR) nod_indices, 
/*145*/	(UCHAR) nod_retrieve, (UCHAR) nod_relation, (UCHAR) nod_relation, 
/*148*/	 0,  0, (UCHAR) nod_set_generator2, (UCHAR) nod_ansi_any, 
/*152*/	(UCHAR) nod_exists,  0, (UCHAR) nod_rec_version, (UCHAR) nod_stall, 
/*156*/	 0,  0, (UCHAR) nod_ansi_all, (UCHAR) nod_extract, 
/*160*/	(UCHAR) nod_current_date, (UCHAR) nod_current_timestamp, 
/*162*/	(UCHAR) nod_current_time, (UCHAR) nod_post, (UCHAR) nod_exec_into, 
/*165*/	(UCHAR) nod_user_savepoint, (UCHAR) nod_dcl_cursor, 
/*167*/	(UCHAR) nod_cursor_stmt, (UCHAR) nod_current_timestamp, 
/*169*/	(UCHAR) nod_current_time, (UCHAR) nod_agg_list, (UCHAR) nod_agg_list_distinct, 
/*172*/	(UCHAR) nod_modify,  0, (UCHAR) nod_current_role,  0, 
/*176*/	(UCHAR) nod_exec_sql, (UCHAR) nod_internal_info,  0, 
/*179*/	 0,  0, (UCHAR) nod_lowcase, (UCHAR) nod_strlen, (UCHAR) nod_trim, 
/*184*/	(UCHAR) nod_init_variable, (UCHAR) nod_union, (UCHAR) nod_sys_function, 
/*187*/	(UCHAR) nod_class_node_jrd, (UCHAR) nod_similar, (UCHAR) nod_exec_stmt, 
/*190*/	(UCHAR) nod_stmt_expr, (UCHAR) nod_derived_expr,  0};
static const SCHAR length_table [] = {
	 0, e_asgn_length, 0, e_dcl_length, 0, e_erase_length, 
/*  6*/	e_for_length, e_for_length, e_if_length, 1, 0, 1, e_send_length, 
/* 13*/	0, e_send_length, e_sto_length,  0, e_lbl_length, 1, 
/* 19*/	e_sto_length, 2, 0, 1, 0, 0, e_arg_length, e_var_length, 
/* 27*/	e_stat_length, e_stat_length, e_stat_length, e_stat_length, 
/* 31*/	e_stat_length,  0,  0, 2, 2, 2, 2, 1, 2, 3, e_arg_length, 
/* 42*/	e_stat_length, e_stat_length, 1, 1, 2, 2, 2, 2, 2, 
/* 51*/	2, 2, 2, 2, 2, 3, 2, 2, 1, e_any_length, 1, e_any_length, 
/* 63*/	2,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 
/* 77*/	0,  0, e_agg_length,  0,  0,  0, 1, 1, 1, 1, 1, e_arg_length, 
/* 89*/	 0,  0,  0,  0, 1, 2, 2, 2,  0,  0,  0, 0, e_gen_length, 
/*102*/	e_pro_length, 1, 1, 3, 3, 2, 3,  0,  0,  0, e_seek_length, 
/*113*/	 0,  0,  0,  0,  0,  0, 0, e_esp_length,  0,  0,  0, 
/*124*/	e_prc_length, e_prc_length, e_esp_length, 0, 2, e_blk_length, 
/*130*/	e_err_length, e_cast_length,  0,  0, 1, 1,  0,  0, 
/*138*/	 0, 1, 0, 0, 0, 1, 1, 2, 0, 0,  0,  0, e_gen_length, 
/*151*/	e_any_length, e_any_length,  0, 1, 1,  0,  0, e_any_length, 
/*159*/	e_extract_length, e_current_date_length, e_current_timestamp_length, 
/*162*/	e_current_time_length, 2, 0, e_sav_length, e_dcl_cursor_length, 
/*167*/	e_cursor_stmt_length, e_current_timestamp_length, e_current_time_length, 
/*170*/	2, 3, 0,  0, 1,  0, 1, 1,  0,  0,  0, 1, e_strlen_length, 
/*183*/	e_trim_length, e_init_var_length, 0, e_sysfun_length, 
/*187*/	1, 3, 0, e_stmt_expr_length, e_derived_expr_length, 
/*192*/	 0};
static const SCHAR count_table [] = {
	 0, 2, 0, 0, 0, 0, 3, 3, 3, 1, 0, 1, 1, 0, 1, e_sto_length - 1, 
/* 16*/	 0, 1, 0, e_sto_length - 1, 1, 0, 0, 0, 0, 0, 0, 2, 
/* 28*/	1, 2, 2, 2,  0,  0, 2, 2, 2, 2, 1, 2, 3, 0, 2, 3, 0, 
/* 45*/	0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 1, 1, 1, 
/* 62*/	1, 2,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0, 0, 0, 
/* 76*/	0, 0,  0, 0,  0,  0,  0, 0, 1, 1, 1, 1, 0,  0,  0, 
/* 91*/	 0,  0, 1, 1, 1, 1,  0,  0,  0, 0, 1, 2, 1, 1, 3, 3, 
/*107*/	2, 3,  0,  0,  0, 2,  0,  0,  0,  0,  0,  0, 0, 4, 
/*121*/	 0,  0,  0, 2, 2, 4, 0, 0, e_blk_length, 1, 1,  0, 
/*133*/	 0, 0, 0,  0,  0,  0, 1, 0, 0, 0, 1, 0, 0, 0, 0,  0, 
/*149*/	 0, 1, 1, 1,  0, 0, 0,  0,  0, 1, e_extract_count, 
/*160*/	0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 2, 0,  0, 0,  0, 1, 
/*177*/	1,  0,  0,  0, 1, e_strlen_count, e_trim_count, 0, 
/*185*/	0, e_sysfun_count, 0, 3, 0, 2, e_derived_expr_count, 
/*192*/	 0};
static const SCHAR type_table [] = {
	 0, STATEMENT, STATEMENT, STATEMENT, STATEMENT, STATEMENT, 
/*  6*/	STATEMENT, STATEMENT, STATEMENT, STATEMENT, STATEMENT, 
/* 11*/	STATEMENT, STATEMENT, STATEMENT, STATEMENT, STATEMENT, 
/* 16*/	 0, STATEMENT, STATEMENT, STATEMENT, STATEMENT, VALUE, 
/* 22*/	VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, 
/* 30*/	VALUE, VALUE,  0,  0, VALUE, VALUE, VALUE, VALUE, VALUE, 
/* 39*/	VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, TYPE_BOOL, 
/* 47*/	TYPE_BOOL, TYPE_BOOL, TYPE_BOOL, TYPE_BOOL, TYPE_BOOL, 
/* 52*/	TYPE_BOOL, TYPE_BOOL, TYPE_BOOL, TYPE_BOOL, TYPE_BOOL, 
/* 57*/	TYPE_BOOL, TYPE_BOOL, TYPE_BOOL, TYPE_BOOL, TYPE_BOOL, 
/* 62*/	TYPE_BOOL, TYPE_BOOL,  0,  0,  0, TYPE_RSE,  0,  0, 
/* 70*/	 0,  0,  0,  0, RELATION, RELATION, RELATION, OTHER, 
/* 78*/	 0, RELATION,  0,  0,  0, VALUE, VALUE, VALUE, VALUE, 
/* 87*/	VALUE, VALUE,  0,  0,  0,  0, VALUE, VALUE, VALUE, 
/* 96*/	VALUE,  0,  0,  0, VALUE, VALUE, VALUE, VALUE, VALUE, 
/*105*/	VALUE, TYPE_BOOL, VALUE, TYPE_BOOL,  0,  0,  0, STATEMENT, 
/*113*/	 0,  0,  0,  0,  0,  0, RELATION, STATEMENT,  0,  0, 
/*123*/	 0, RELATION, RELATION, STATEMENT, TYPE_RSE, STATEMENT, 
/*129*/	STATEMENT, STATEMENT, VALUE,  0,  0, STATEMENT, STATEMENT, 
/*136*/	 0,  0,  0, VALUE, VALUE, VALUE, ACCESS_TYPE, ACCESS_TYPE, 
/*144*/	ACCESS_TYPE, ACCESS_TYPE, RELATION, RELATION,  0,  0, 
/*150*/	STATEMENT, TYPE_BOOL, TYPE_BOOL,  0, VALUE, STATEMENT, 
/*156*/	 0,  0, TYPE_BOOL, VALUE, VALUE, VALUE, VALUE, STATEMENT, 
/*164*/	STATEMENT, STATEMENT, STATEMENT, STATEMENT, VALUE, 
/*169*/	VALUE, VALUE, VALUE, STATEMENT,  0, VALUE,  0, STATEMENT, 
/*177*/	VALUE,  0,  0,  0, VALUE, VALUE, VALUE, STATEMENT, 
/*185*/	RELATION, VALUE, STATEMENT, TYPE_BOOL, STATEMENT, VALUE, 
/*191*/	VALUE,  0};
static const SCHAR sub_type_table [] = {
	 0, VALUE, STATEMENT, OTHER, OTHER, OTHER, STATEMENT, 
/*  7*/	STATEMENT, STATEMENT, STATEMENT, STATEMENT, OTHER, 
/* 12*/	STATEMENT, STATEMENT, STATEMENT, STATEMENT,  0, STATEMENT, 
/* 18*/	OTHER, STATEMENT, VALUE, OTHER, VALUE, VALUE, VALUE, 
/* 25*/	VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE,  0, 
/* 33*/	 0, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, 
/* 41*/	VALUE, OTHER, OTHER, VALUE, VALUE, VALUE, VALUE, VALUE, 
/* 49*/	VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, 
/* 57*/	TYPE_BOOL, TYPE_BOOL, TYPE_BOOL, TYPE_RSE, VALUE, OTHER, 
/* 63*/	VALUE,  0,  0,  0, OTHER,  0,  0,  0,  0,  0,  0, OTHER, 
/* 75*/	OTHER, OTHER, OTHER,  0, OTHER,  0,  0,  0, VALUE, 
/* 84*/	VALUE, VALUE, VALUE, VALUE, VALUE,  0,  0,  0,  0, 
/* 93*/	VALUE, VALUE, VALUE, VALUE,  0,  0,  0, VALUE, VALUE, 
/*102*/	VALUE, VALUE, VALUE, OTHER, VALUE, VALUE, VALUE,  0, 
/*110*/	 0,  0, VALUE,  0,  0,  0,  0,  0,  0, OTHER, OTHER, 
/*121*/	 0,  0,  0, OTHER, OTHER, OTHER, OTHER, OTHER, STATEMENT, 
/*130*/	OTHER, VALUE,  0,  0, OTHER, OTHER,  0,  0,  0, VALUE, 
/*140*/	VALUE, VALUE, OTHER, VALUE, VALUE, VALUE, OTHER, OTHER, 
/*148*/	 0,  0, VALUE, TYPE_RSE, TYPE_RSE,  0, VALUE, STATEMENT, 
/*156*/	 0,  0, TYPE_RSE, VALUE, OTHER, OTHER, OTHER, VALUE, 
/*164*/	OTHER, OTHER, OTHER, OTHER, OTHER, OTHER, VALUE, VALUE, 
/*172*/	STATEMENT,  0, VALUE,  0, VALUE, VALUE,  0,  0,  0, 
/*181*/	VALUE, VALUE, VALUE, OTHER, OTHER, VALUE, STATEMENT, 
/*188*/	VALUE, OTHER, OTHER, VALUE,  0};
