/*********** Preprocessed module -- do not edit ***************/
/*********** Preprocessed module -- do not edit ***************/
/*********** Preprocessed module -- do not edit ***************/
/*********** Preprocessed module -- do not edit ***************/
/*********** Preprocessed module -- do not edit ***************/
/***************** gpre version WI-V2.5.7.27050 Firebird 2.5 **********************/
/*
 *	PROGRAM:	Interactive SQL utility
 *	MODULE:		show.epp
 *	DESCRIPTION:	Display routines
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 * Revision 1.2  2000/11/19 07:02:49  fsg
 * Change in show.epp to use CHARACTER_LENGTH instead of FIELD_LENGTH in
 * SHOW PROCEDURE
 *
 * 19-May-2001 Claudio Valderrama.
 * Change to be in sync with extract.e: BLOB is not returned
 * by value but by descriptor.
 * 2001.09.21 Claudio Valderrama: Show correct mechanism for UDF parameters.
 * 2001.10.01 Claudio Valderrama: SHOW GRANTS works without any argument, too.
 *   Metadata extraction is slightly faster if SHOW_grants() knows the obj_type.
 *   Keyword USER is written when the grantee is a user and since the engine
 *   now supports GRANT...to ROLE role_name, ROLE is written when the grantee is
 *   indeed a role. When the grantee is a group, it's shown, too.
 * 2003.02.04 Dmitry Yemanov: support for universal triggers
 */

#include "firebird.h"
#include <stdio.h>
#include "../jrd/license.h"
#include <string.h>

#include "../jrd/gds_proto.h"
#include "../jrd/common.h"
#include "../jrd/ibase.h"
#include "../isql/isql.h"
#include "../jrd/intl.h"
#include "../jrd/intlobj_new.h"
#include "../isql/isql_proto.h"
#include "../isql/show_proto.h"
#include "../jrd/obj.h"
#include "../jrd/ods.h"
#include "../isql/extra_proto.h"
#include "../common/utils_proto.h"
#include "../jrd/constants.h"
#include "../common/classes/UserBlob.h"
#include "../common/classes/VaryStr.h"
#include "../isql/OptionsBase.h"

#ifdef HAVE_CTYPE_H
#include <ctype.h>
#endif

using MsgFormat::SafeArg;


/*DATABASE DB = EXTERN COMPILETIME "yachts.lnk";*/
/**** GDS Preprocessor Definitions ****/
#ifndef JRD_IBASE_H
#include <ibase.h>
#endif

static const ISC_QUAD
   isc_blob_null = {0, 0};	/* initializer for blobs */
extern isc_db_handle
   DB;		/* database handle */

extern isc_tr_handle
   gds_trans;		/* default transaction handle */
extern ISC_STATUS
   isc_status [20],	/* status vector */
   isc_status2 [20];	/* status vector */
extern ISC_LONG
   isc_array_length, 	/* array return size */
   SQLCODE;		/* SQL status code */
static isc_req_handle
   isc_0 = 0;		/* request handle */

static const short
   isc_1l = 443;
static const char
   isc_1 [] = {
   4,2,4,1,9,0,9,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,7,0,7,0,7,0,
   7,0,4,0,2,0,41,3,0,32,0,41,3,0,32,0,12,0,2,7,'C',1,'J',12,'R',
   'D','B','$','T','R','I','G','G','E','R','S',0,'G',58,57,47,23,
   0,17,'R','D','B','$','R','E','L','A','T','I','O','N','_','N',
   'A','M','E',25,0,1,0,47,23,0,16,'R','D','B','$','T','R','I',
   'G','G','E','R','_','N','A','M','E',25,0,0,0,57,47,23,0,15,'R',
   'D','B','$','S','Y','S','T','E','M','_','F','L','A','G',21,8,
   0,0,0,0,0,61,23,0,15,'R','D','B','$','S','Y','S','T','E','M',
   '_','F','L','A','G','F',4,'H',23,0,17,'R','D','B','$','R','E',
   'L','A','T','I','O','N','_','N','A','M','E','H',23,0,16,'R',
   'D','B','$','T','R','I','G','G','E','R','_','T','Y','P','E',
   'H',23,0,20,'R','D','B','$','T','R','I','G','G','E','R','_',
   'S','E','Q','U','E','N','C','E','H',23,0,16,'R','D','B','$',
   'T','R','I','G','G','E','R','_','N','A','M','E',-1,14,1,2,1,
   23,0,18,'R','D','B','$','T','R','I','G','G','E','R','_','S',
   'O','U','R','C','E',41,1,0,0,4,0,1,23,0,17,'R','D','B','$','R',
   'E','L','A','T','I','O','N','_','N','A','M','E',41,1,1,0,8,0,
   1,23,0,16,'R','D','B','$','T','R','I','G','G','E','R','_','N',
   'A','M','E',25,1,2,0,1,21,8,0,1,0,0,0,25,1,3,0,1,23,0,20,'R',
   'D','B','$','T','R','I','G','G','E','R','_','I','N','A','C',
   'T','I','V','E',25,1,5,0,1,23,0,16,'R','D','B','$','T','R','I',
   'G','G','E','R','_','T','Y','P','E',25,1,6,0,1,23,0,20,'R','D',
   'B','$','T','R','I','G','G','E','R','_','S','E','Q','U','E',
   'N','C','E',25,1,7,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,3,0,-1,-1,
   'L'
   };	/* end of blr string for request isc_1 */

static isc_req_handle
   isc_15 = 0;		/* request handle */

static const short
   isc_16l = 124;
static const char
   isc_16 [] = {
   4,2,4,1,3,0,7,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',
   12,'R','D','B','$','T','R','I','G','G','E','R','S',0,'G',47,
   23,0,16,'R','D','B','$','T','R','I','G','G','E','R','_','N',
   'A','M','E',25,0,0,0,-1,14,1,2,1,21,8,0,1,0,0,0,25,1,0,0,1,23,
   0,13,'R','D','B','$','V','A','L','I','D','_','B','L','R',41,
   1,2,0,1,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_16 */

static isc_req_handle
   isc_23 = 0;		/* request handle */

static const short
   isc_24l = 293;
static const char
   isc_24 [] = {
   4,2,4,0,4,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,2,7,'C',2,'J',12,
   'R','D','B','$','T','R','I','G','G','E','R','S',0,'J',13,'R',
   'D','B','$','R','E','L','A','T','I','O','N','S',1,'G',58,57,
   47,23,0,15,'R','D','B','$','S','Y','S','T','E','M','_','F','L',
   'A','G',21,8,0,0,0,0,0,61,23,0,15,'R','D','B','$','S','Y','S',
   'T','E','M','_','F','L','A','G',47,23,0,17,'R','D','B','$','R',
   'E','L','A','T','I','O','N','_','N','A','M','E',23,1,17,'R',
   'D','B','$','R','E','L','A','T','I','O','N','_','N','A','M',
   'E','F',2,'H',23,0,17,'R','D','B','$','R','E','L','A','T','I',
   'O','N','_','N','A','M','E','H',23,0,16,'R','D','B','$','T',
   'R','I','G','G','E','R','_','N','A','M','E',-1,14,0,2,1,23,0,
   17,'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A',
   'M','E',25,0,0,0,1,23,0,16,'R','D','B','$','T','R','I','G','G',
   'E','R','_','N','A','M','E',25,0,1,0,1,21,8,0,1,0,0,0,25,0,2,
   0,1,23,0,15,'R','D','B','$','S','Y','S','T','E','M','_','F',
   'L','A','G',25,0,3,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,2,0,-1,-1,
   'L'
   };	/* end of blr string for request isc_24 */

static isc_req_handle
   isc_30 = 0;		/* request handle */

static const short
   isc_31l = 124;
static const char
   isc_31 [] = {
   4,2,4,1,3,0,7,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',
   12,'R','D','B','$','T','R','I','G','G','E','R','S',0,'G',47,
   23,0,16,'R','D','B','$','T','R','I','G','G','E','R','_','N',
   'A','M','E',25,0,0,0,-1,14,1,2,1,21,8,0,1,0,0,0,25,1,0,0,1,23,
   0,13,'R','D','B','$','V','A','L','I','D','_','B','L','R',41,
   1,2,0,1,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_31 */

static isc_req_handle
   isc_38 = 0;		/* request handle */

static const short
   isc_39l = 206;
static const char
   isc_39 [] = {
   4,2,4,0,3,0,41,3,0,32,0,7,0,7,0,2,7,'C',1,'J',12,'R','D','B',
   '$','T','R','I','G','G','E','R','S',0,'G',58,57,47,23,0,15,'R',
   'D','B','$','S','Y','S','T','E','M','_','F','L','A','G',21,8,
   0,0,0,0,0,61,23,0,15,'R','D','B','$','S','Y','S','T','E','M',
   '_','F','L','A','G',61,23,0,17,'R','D','B','$','R','E','L','A',
   'T','I','O','N','_','N','A','M','E','F',1,'H',23,0,16,'R','D',
   'B','$','T','R','I','G','G','E','R','_','N','A','M','E',-1,14,
   0,2,1,23,0,16,'R','D','B','$','T','R','I','G','G','E','R','_',
   'N','A','M','E',25,0,0,0,1,21,8,0,1,0,0,0,25,0,1,0,1,23,0,15,
   'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G',
   25,0,2,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_39 */

static isc_req_handle
   isc_44 = 0;		/* request handle */

static const short
   isc_45l = 279;
static const char
   isc_45 [] = {
   4,2,4,1,3,0,41,3,0,32,0,41,3,0,32,0,7,0,4,0,1,0,41,3,0,32,0,
   12,0,2,7,'C',2,'J',24,'R','D','B','$','R','E','L','A','T','I',
   'O','N','_','C','O','N','S','T','R','A','I','N','T','S',0,'J',
   21,'R','D','B','$','C','H','E','C','K','_','C','O','N','S','T',
   'R','A','I','N','T','S',1,'G',58,47,23,0,17,'R','D','B','$',
   'R','E','L','A','T','I','O','N','_','N','A','M','E',25,0,0,0,
   58,47,23,0,19,'R','D','B','$','C','O','N','S','T','R','A','I',
   'N','T','_','T','Y','P','E',21,15,3,0,8,0,'N','O','T',32,'N',
   'U','L','L',47,23,0,19,'R','D','B','$','C','O','N','S','T','R',
   'A','I','N','T','_','N','A','M','E',23,1,19,'R','D','B','$',
   'C','O','N','S','T','R','A','I','N','T','_','N','A','M','E',
   -1,14,1,2,1,23,1,16,'R','D','B','$','T','R','I','G','G','E',
   'R','_','N','A','M','E',25,1,0,0,1,23,0,19,'R','D','B','$','C',
   'O','N','S','T','R','A','I','N','T','_','N','A','M','E',25,1,
   1,0,1,21,8,0,1,0,0,0,25,1,2,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,
   2,0,-1,-1,'L'
   };	/* end of blr string for request isc_45 */

static isc_req_handle
   isc_52 = 0;		/* request handle */

static const short
   isc_53l = 149;
static const char
   isc_53 [] = {
   4,2,4,1,4,0,41,3,0,32,0,7,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,
   2,7,'C',1,'J',11,'R','D','B','$','I','N','D','I','C','E','S',
   0,'G',47,23,0,14,'R','D','B','$','I','N','D','E','X','_','N',
   'A','M','E',25,0,0,0,-1,14,1,2,1,23,0,14,'R','D','B','$','I',
   'N','D','E','X','_','N','A','M','E',25,1,0,0,1,21,8,0,1,0,0,
   0,25,1,1,0,1,23,0,14,'R','D','B','$','I','N','D','E','X','_',
   'T','Y','P','E',41,1,3,0,2,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,1,
   0,-1,-1,'L'
   };	/* end of blr string for request isc_53 */

static isc_req_handle
   isc_61 = 0;		/* request handle */

static const short
   isc_62l = 299;
static const char
   isc_62 [] = {
   4,2,4,1,7,0,41,3,0,32,0,41,3,0,32,0,41,0,0,12,0,41,0,0,12,0,
   7,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',2,'J',24,'R','D',
   'B','$','R','E','L','A','T','I','O','N','_','C','O','N','S',
   'T','R','A','I','N','T','S',0,'J',19,'R','D','B','$','R','E',
   'F','_','C','O','N','S','T','R','A','I','N','T','S',1,'G',58,
   47,23,0,19,'R','D','B','$','C','O','N','S','T','R','A','I','N',
   'T','_','N','A','M','E',23,1,17,'R','D','B','$','C','O','N',
   'S','T','_','N','A','M','E','_','U','Q',47,23,1,19,'R','D','B',
   '$','C','O','N','S','T','R','A','I','N','T','_','N','A','M',
   'E',25,0,0,0,-1,14,1,2,1,23,0,17,'R','D','B','$','R','E','L',
   'A','T','I','O','N','_','N','A','M','E',25,1,0,0,1,23,0,14,'R',
   'D','B','$','I','N','D','E','X','_','N','A','M','E',25,1,1,0,
   1,23,1,15,'R','D','B','$','D','E','L','E','T','E','_','R','U',
   'L','E',41,1,2,0,5,0,1,23,1,15,'R','D','B','$','U','P','D','A',
   'T','E','_','R','U','L','E',41,1,3,0,6,0,1,21,8,0,1,0,0,0,25,
   1,4,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,4,0,-1,-1,'L'
   };	/* end of blr string for request isc_62 */

static isc_req_handle
   isc_73 = 0;		/* request handle */

static const short
   isc_74l = 249;
static const char
   isc_74 [] = {
   4,2,4,1,4,0,41,3,0,32,0,41,3,0,32,0,41,0,0,12,0,7,0,4,0,1,0,
   41,3,0,32,0,12,0,2,7,'C',1,'J',24,'R','D','B','$','R','E','L',
   'A','T','I','O','N','_','C','O','N','S','T','R','A','I','N',
   'T','S',0,'G',47,23,0,17,'R','D','B','$','R','E','L','A','T',
   'I','O','N','_','N','A','M','E',25,0,0,0,'F',2,'H',23,0,19,'R',
   'D','B','$','C','O','N','S','T','R','A','I','N','T','_','T',
   'Y','P','E','H',23,0,19,'R','D','B','$','C','O','N','S','T',
   'R','A','I','N','T','_','N','A','M','E',-1,14,1,2,1,23,0,14,
   'R','D','B','$','I','N','D','E','X','_','N','A','M','E',25,1,
   0,0,1,23,0,19,'R','D','B','$','C','O','N','S','T','R','A','I',
   'N','T','_','N','A','M','E',25,1,1,0,1,23,0,19,'R','D','B','$',
   'C','O','N','S','T','R','A','I','N','T','_','T','Y','P','E',
   25,1,2,0,1,21,8,0,1,0,0,0,25,1,3,0,-1,14,1,1,21,8,0,0,0,0,0,
   25,1,3,0,-1,-1,'L'
   };	/* end of blr string for request isc_74 */

static isc_req_handle
   isc_82 = 0;		/* request handle */

static const short
   isc_83l = 146;
static const char
   isc_83 [] = {
   4,2,4,1,3,0,9,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',
   13,'R','D','B','$','R','E','L','A','T','I','O','N','S',0,'G',
   58,47,23,0,17,'R','D','B','$','R','E','L','A','T','I','O','N',
   '_','N','A','M','E',25,0,0,0,59,61,23,0,12,'R','D','B','$','V',
   'I','E','W','_','B','L','R',-1,14,1,2,1,23,0,15,'R','D','B',
   '$','V','I','E','W','_','S','O','U','R','C','E',41,1,0,0,2,0,
   1,21,8,0,1,0,0,0,25,1,1,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,1,0,
   -1,-1,'L'
   };	/* end of blr string for request isc_83 */

static isc_req_handle
   isc_90 = 0;		/* request handle */

static const short
   isc_91l = 179;
static const char
   isc_91 [] = {
   4,2,4,1,5,0,7,0,7,0,7,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,
   'C',1,'J',10,'R','D','B','$','F','I','E','L','D','S',0,'G',47,
   23,0,14,'R','D','B','$','F','I','E','L','D','_','N','A','M',
   'E',25,0,0,0,-1,14,1,2,1,21,8,0,1,0,0,0,25,1,0,0,1,23,0,15,'R',
   'D','B','$','F','I','E','L','D','_','S','C','A','L','E',25,1,
   1,0,1,23,0,18,'R','D','B','$','F','I','E','L','D','_','S','U',
   'B','_','T','Y','P','E',25,1,2,0,1,23,0,19,'R','D','B','$','F',
   'I','E','L','D','_','P','R','E','C','I','S','I','O','N',41,1,
   4,0,3,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_91 */

static isc_req_handle
   isc_100 = 0;		/* request handle */

static const short
   isc_101l = 649;
static const char
   isc_101 [] = {
   4,2,4,1,24,0,9,0,9,0,9,0,41,3,0,32,0,9,0,9,0,41,3,0,32,0,41,
   3,0,32,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,
   7,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',2,'J',19,'R','D',
   'B','$','R','E','L','A','T','I','O','N','_','F','I','E','L',
   'D','S',0,'J',10,'R','D','B','$','F','I','E','L','D','S',1,'G',
   58,47,23,0,16,'R','D','B','$','F','I','E','L','D','_','S','O',
   'U','R','C','E',23,1,14,'R','D','B','$','F','I','E','L','D',
   '_','N','A','M','E',47,23,0,17,'R','D','B','$','R','E','L','A',
   'T','I','O','N','_','N','A','M','E',25,0,0,0,'F',2,'H',23,0,
   18,'R','D','B','$','F','I','E','L','D','_','P','O','S','I','T',
   'I','O','N','H',23,0,14,'R','D','B','$','F','I','E','L','D',
   '_','N','A','M','E',-1,14,1,2,1,23,1,21,'R','D','B','$','V',
   'A','L','I','D','A','T','I','O','N','_','S','O','U','R','C',
   'E',41,1,0,0,9,0,1,23,1,18,'R','D','B','$','D','E','F','A','U',
   'L','T','_','S','O','U','R','C','E',41,1,1,0,10,0,1,23,0,18,
   'R','D','B','$','D','E','F','A','U','L','T','_','S','O','U',
   'R','C','E',41,1,2,0,11,0,1,23,0,14,'R','D','B','$','B','A',
   'S','E','_','F','I','E','L','D',41,1,3,0,12,0,1,23,1,19,'R',
   'D','B','$','C','O','M','P','U','T','E','D','_','S','O','U',
   'R','C','E',41,1,4,0,19,0,1,23,1,16,'R','D','B','$','C','O',
   'M','P','U','T','E','D','_','B','L','R',41,1,5,0,20,0,1,23,1,
   14,'R','D','B','$','F','I','E','L','D','_','N','A','M','E',25,
   1,6,0,1,23,0,14,'R','D','B','$','F','I','E','L','D','_','N',
   'A','M','E',25,1,7,0,1,21,8,0,1,0,0,0,25,1,8,0,1,23,1,13,'R',
   'D','B','$','N','U','L','L','_','F','L','A','G',25,1,13,0,1,
   23,0,13,'R','D','B','$','N','U','L','L','_','F','L','A','G',
   25,1,14,0,1,23,1,18,'R','D','B','$','F','I','E','L','D','_',
   'S','U','B','_','T','Y','P','E',25,1,15,0,1,23,1,18,'R','D',
   'B','$','S','E','G','M','E','N','T','_','L','E','N','G','T',
   'H',25,1,16,0,1,23,1,15,'R','D','B','$','F','I','E','L','D',
   '_','S','C','A','L','E',25,1,17,0,1,23,1,14,'R','D','B','$',
   'F','I','E','L','D','_','T','Y','P','E',25,1,18,0,1,23,1,14,
   'R','D','B','$','D','I','M','E','N','S','I','O','N','S',41,1,
   22,0,21,0,1,23,1,15,'R','D','B','$','S','Y','S','T','E','M',
   '_','F','L','A','G',25,1,23,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,
   8,0,-1,-1,'L'
   };	/* end of blr string for request isc_101 */

static isc_req_handle
   isc_129 = 0;		/* request handle */

static const short
   isc_130l = 159;
static const char
   isc_130 [] = {
   4,2,4,1,5,0,9,0,41,0,0,0,1,7,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,
   0,2,7,'C',1,'J',13,'R','D','B','$','R','E','L','A','T','I','O',
   'N','S',0,'G',47,23,0,17,'R','D','B','$','R','E','L','A','T',
   'I','O','N','_','N','A','M','E',25,0,0,0,-1,14,1,2,1,23,0,12,
   'R','D','B','$','V','I','E','W','_','B','L','R',41,1,0,0,3,0,
   1,23,0,17,'R','D','B','$','E','X','T','E','R','N','A','L','_',
   'F','I','L','E',41,1,1,0,4,0,1,21,8,0,1,0,0,0,25,1,2,0,-1,14,
   1,1,21,8,0,0,0,0,0,25,1,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_130 */

static isc_req_handle
   isc_139 = 0;		/* request handle */

static const short
   isc_140l = 216;
static const char
   isc_140 [] = {
   4,2,4,1,3,0,9,0,41,3,0,32,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,
   'C',2,'J',14,'R','D','B','$','P','R','O','C','E','D','U','R',
   'E','S',0,'J',20,'R','D','B','$','S','E','C','U','R','I','T',
   'Y','_','C','L','A','S','S','E','S',1,'G',58,47,23,1,18,'R',
   'D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A',
   'S','S',23,0,18,'R','D','B','$','S','E','C','U','R','I','T',
   'Y','_','C','L','A','S','S',47,23,0,18,'R','D','B','$','P','R',
   'O','C','E','D','U','R','E','_','N','A','M','E',25,0,0,0,-1,
   14,1,2,1,23,1,7,'R','D','B','$','A','C','L',25,1,0,0,1,23,1,
   18,'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L',
   'A','S','S',25,1,1,0,1,21,8,0,1,0,0,0,25,1,2,0,-1,14,1,1,21,
   8,0,0,0,0,0,25,1,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_140 */

static isc_req_handle
   isc_147 = 0;		/* request handle */

static const short
   isc_148l = 271;
static const char
   isc_148 [] = {
   4,2,4,1,4,0,9,0,41,3,0,32,0,41,3,0,32,0,7,0,4,0,1,0,41,3,0,32,
   0,12,0,2,7,'C',2,'J',19,'R','D','B','$','R','E','L','A','T',
   'I','O','N','_','F','I','E','L','D','S',0,'J',20,'R','D','B',
   '$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S',
   'E','S',1,'G',58,47,23,1,18,'R','D','B','$','S','E','C','U',
   'R','I','T','Y','_','C','L','A','S','S',23,0,18,'R','D','B',
   '$','S','E','C','U','R','I','T','Y','_','C','L','A','S','S',
   47,23,0,17,'R','D','B','$','R','E','L','A','T','I','O','N','_',
   'N','A','M','E',25,0,0,0,'F',1,'H',23,0,18,'R','D','B','$','F',
   'I','E','L','D','_','P','O','S','I','T','I','O','N',-1,14,1,
   2,1,23,1,7,'R','D','B','$','A','C','L',25,1,0,0,1,23,1,18,'R',
   'D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A',
   'S','S',25,1,1,0,1,23,0,14,'R','D','B','$','F','I','E','L','D',
   '_','N','A','M','E',25,1,2,0,1,21,8,0,1,0,0,0,25,1,3,0,-1,14,
   1,1,21,8,0,0,0,0,0,25,1,3,0,-1,-1,'L'
   };	/* end of blr string for request isc_148 */

static isc_req_handle
   isc_156 = 0;		/* request handle */

static const short
   isc_157l = 239;
static const char
   isc_157 [] = {
   4,2,4,1,5,0,9,0,41,3,0,32,0,9,0,7,0,7,0,4,0,1,0,41,3,0,32,0,
   12,0,2,7,'C',2,'J',13,'R','D','B','$','R','E','L','A','T','I',
   'O','N','S',0,'J',20,'R','D','B','$','S','E','C','U','R','I',
   'T','Y','_','C','L','A','S','S','E','S',1,'G',58,47,23,0,17,
   'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A',
   'M','E',25,0,0,0,47,23,0,17,'R','D','B','$','D','E','F','A',
   'U','L','T','_','C','L','A','S','S',23,1,18,'R','D','B','$',
   'S','E','C','U','R','I','T','Y','_','C','L','A','S','S',-1,14,
   1,2,1,23,1,7,'R','D','B','$','A','C','L',25,1,0,0,1,23,1,18,
   'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L',
   'A','S','S',25,1,1,0,1,23,0,12,'R','D','B','$','V','I','E','W',
   '_','B','L','R',41,1,2,0,4,0,1,21,8,0,1,0,0,0,25,1,3,0,-1,14,
   1,1,21,8,0,0,0,0,0,25,1,3,0,-1,-1,'L'
   };	/* end of blr string for request isc_157 */

static isc_req_handle
   isc_166 = 0;		/* request handle */

static const short
   isc_167l = 240;
static const char
   isc_167 [] = {
   4,2,4,1,5,0,9,0,41,3,0,32,0,9,0,7,0,7,0,4,0,1,0,41,3,0,32,0,
   12,0,2,7,'C',2,'J',13,'R','D','B','$','R','E','L','A','T','I',
   'O','N','S',0,'J',20,'R','D','B','$','S','E','C','U','R','I',
   'T','Y','_','C','L','A','S','S','E','S',1,'G',58,47,23,1,18,
   'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L',
   'A','S','S',23,0,18,'R','D','B','$','S','E','C','U','R','I',
   'T','Y','_','C','L','A','S','S',47,23,0,17,'R','D','B','$','R',
   'E','L','A','T','I','O','N','_','N','A','M','E',25,0,0,0,-1,
   14,1,2,1,23,1,7,'R','D','B','$','A','C','L',25,1,0,0,1,23,1,
   18,'R','D','B','$','S','E','C','U','R','I','T','Y','_','C','L',
   'A','S','S',25,1,1,0,1,23,0,12,'R','D','B','$','V','I','E','W',
   '_','B','L','R',41,1,2,0,4,0,1,21,8,0,1,0,0,0,25,1,3,0,-1,14,
   1,1,21,8,0,0,0,0,0,25,1,3,0,-1,-1,'L'
   };	/* end of blr string for request isc_167 */

static isc_req_handle
   isc_176 = 0;		/* request handle */

static const short
   isc_177l = 176;
static const char
   isc_177 [] = {
   4,2,4,0,3,0,9,0,41,3,0,32,0,7,0,2,7,'C',2,'J',12,'R','D','B',
   '$','D','A','T','A','B','A','S','E',0,'J',20,'R','D','B','$',
   'S','E','C','U','R','I','T','Y','_','C','L','A','S','S','E',
   'S',1,'G',47,23,1,18,'R','D','B','$','S','E','C','U','R','I',
   'T','Y','_','C','L','A','S','S',23,0,18,'R','D','B','$','S',
   'E','C','U','R','I','T','Y','_','C','L','A','S','S',-1,14,0,
   2,1,23,1,7,'R','D','B','$','A','C','L',25,0,0,0,1,23,1,18,'R',
   'D','B','$','S','E','C','U','R','I','T','Y','_','C','L','A',
   'S','S',25,0,1,0,1,21,8,0,1,0,0,0,25,0,2,0,-1,14,0,1,21,8,0,
   0,0,0,0,25,0,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_177 */

static isc_req_handle
   isc_182 = 0;		/* request handle */

static const short
   isc_183l = 245;
static const char
   isc_183 [] = {
   4,2,4,1,3,0,41,3,0,32,0,41,3,0,32,0,7,0,4,0,3,0,41,3,0,32,0,
   7,0,7,0,12,0,2,7,'C',1,'J',19,'R','D','B','$','U','S','E','R',
   '_','P','R','I','V','I','L','E','G','E','S',0,'G',58,47,23,0,
   15,'R','D','B','$','O','B','J','E','C','T','_','T','Y','P','E',
   25,0,2,0,58,47,23,0,13,'R','D','B','$','U','S','E','R','_','T',
   'Y','P','E',25,0,1,0,58,47,23,0,17,'R','D','B','$','R','E','L',
   'A','T','I','O','N','_','N','A','M','E',25,0,0,0,47,23,0,13,
   'R','D','B','$','P','R','I','V','I','L','E','G','E',21,15,3,
   0,1,0,'M','F',1,'H',23,0,8,'R','D','B','$','U','S','E','R',-1,
   14,1,2,1,23,0,8,'R','D','B','$','U','S','E','R',25,1,0,0,1,23,
   0,17,'R','D','B','$','R','E','L','A','T','I','O','N','_','N',
   'A','M','E',25,1,1,0,1,21,8,0,1,0,0,0,25,1,2,0,-1,14,1,1,21,
   8,0,0,0,0,0,25,1,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_183 */

static isc_req_handle
   isc_192 = 0;		/* request handle */

static const short
   isc_193l = 125;
static const char
   isc_193 [] = {
   4,2,4,1,2,0,41,3,0,32,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',
   1,'J',9,'R','D','B','$','R','O','L','E','S',0,'D',21,8,0,1,0,
   0,0,'G',47,23,0,13,'R','D','B','$','R','O','L','E','_','N','A',
   'M','E',25,0,0,0,-1,14,1,2,1,23,0,13,'R','D','B','$','R','O',
   'L','E','_','N','A','M','E',25,1,0,0,1,21,8,0,1,0,0,0,25,1,1,
   0,-1,14,1,1,21,8,0,0,0,0,0,25,1,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_193 */

static isc_req_handle
   isc_199 = 0;		/* request handle */

static const short
   isc_200l = 118;
static const char
   isc_200 [] = {
   4,2,4,1,1,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',9,'R',
   'D','B','$','R','O','L','E','S',0,'G',58,47,23,0,13,'R','D',
   'B','$','R','O','L','E','_','N','A','M','E',25,0,0,0,49,23,0,
   15,'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G',
   21,8,0,0,0,0,0,-1,14,1,2,1,21,8,0,1,0,0,0,25,1,0,0,-1,14,1,1,
   21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_200 */

static isc_req_handle
   isc_205 = 0;		/* request handle */

static const short
   isc_206l = 122;
static const char
   isc_206 [] = {
   4,2,4,0,2,0,41,3,0,32,0,7,0,2,7,'C',1,'J',9,'R','D','B','$',
   'R','O','L','E','S',0,'G',59,61,23,0,13,'R','D','B','$','R',
   'O','L','E','_','N','A','M','E','F',1,'H',23,0,13,'R','D','B',
   '$','R','O','L','E','_','N','A','M','E',-1,14,0,2,1,23,0,13,
   'R','D','B','$','R','O','L','E','_','N','A','M','E',25,0,0,0,
   1,21,8,0,1,0,0,0,25,0,1,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,1,0,
   -1,-1,'L'
   };	/* end of blr string for request isc_206 */

static isc_req_handle
   isc_210 = 0;		/* request handle */

static const short
   isc_211l = 208;
static const char
   isc_211 [] = {
   4,2,4,1,5,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,7,0,4,0,2,0,41,3,
   0,32,0,41,3,0,32,0,12,0,2,7,'C',1,'J',24,'R','D','B','$','P',
   'R','O','C','E','D','U','R','E','_','P','A','R','A','M','E',
   'T','E','R','S',0,'G',58,47,23,0,18,'R','D','B','$','P','R',
   'O','C','E','D','U','R','E','_','N','A','M','E',25,0,1,0,47,
   23,0,18,'R','D','B','$','P','A','R','A','M','E','T','E','R',
   '_','N','A','M','E',25,0,0,0,-1,14,1,2,1,23,0,14,'R','D','B',
   '$','F','I','E','L','D','_','N','A','M','E',41,1,0,0,3,0,1,23,
   0,17,'R','D','B','$','R','E','L','A','T','I','O','N','_','N',
   'A','M','E',41,1,1,0,4,0,1,21,8,0,1,0,0,0,25,1,2,0,-1,14,1,1,
   21,8,0,0,0,0,0,25,1,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_211 */

static isc_req_handle
   isc_221 = 0;		/* request handle */

static const short
   isc_222l = 212;
static const char
   isc_222 [] = {
   4,2,4,1,5,0,9,0,7,0,7,0,7,0,7,0,4,0,2,0,41,3,0,32,0,41,3,0,32,
   0,12,0,2,7,'C',1,'J',24,'R','D','B','$','P','R','O','C','E',
   'D','U','R','E','_','P','A','R','A','M','E','T','E','R','S',
   0,'G',58,47,23,0,18,'R','D','B','$','P','R','O','C','E','D',
   'U','R','E','_','N','A','M','E',25,0,1,0,47,23,0,18,'R','D',
   'B','$','P','A','R','A','M','E','T','E','R','_','N','A','M',
   'E',25,0,0,0,-1,14,1,2,1,23,0,18,'R','D','B','$','D','E','F',
   'A','U','L','T','_','S','O','U','R','C','E',41,1,0,0,2,0,1,21,
   8,0,1,0,0,0,25,1,1,0,1,23,0,23,'R','D','B','$','P','A','R','A',
   'M','E','T','E','R','_','M','E','C','H','A','N','I','S','M',
   41,1,4,0,3,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_222 */

static isc_req_handle
   isc_232 = 0;		/* request handle */

static const short
   isc_233l = 179;
static const char
   isc_233 [] = {
   4,2,4,1,5,0,7,0,7,0,7,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,
   'C',1,'J',10,'R','D','B','$','F','I','E','L','D','S',0,'G',47,
   23,0,14,'R','D','B','$','F','I','E','L','D','_','N','A','M',
   'E',25,0,0,0,-1,14,1,2,1,21,8,0,1,0,0,0,25,1,0,0,1,23,0,15,'R',
   'D','B','$','F','I','E','L','D','_','S','C','A','L','E',25,1,
   1,0,1,23,0,18,'R','D','B','$','F','I','E','L','D','_','S','U',
   'B','_','T','Y','P','E',25,1,2,0,1,23,0,19,'R','D','B','$','F',
   'I','E','L','D','_','P','R','E','C','I','S','I','O','N',41,1,
   4,0,3,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_233 */

static isc_req_handle
   isc_242 = 0;		/* request handle */

static const short
   isc_243l = 467;
static const char
   isc_243 [] = {
   4,2,4,1,12,0,9,0,41,3,0,32,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,
   7,0,7,0,7,0,7,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',2,'J',
   24,'R','D','B','$','P','R','O','C','E','D','U','R','E','_','P',
   'A','R','A','M','E','T','E','R','S',0,'J',10,'R','D','B','$',
   'F','I','E','L','D','S',1,'G',58,47,25,0,0,0,23,0,18,'R','D',
   'B','$','P','R','O','C','E','D','U','R','E','_','N','A','M',
   'E',47,23,0,16,'R','D','B','$','F','I','E','L','D','_','S','O',
   'U','R','C','E',23,1,14,'R','D','B','$','F','I','E','L','D',
   '_','N','A','M','E','F',2,'H',23,0,18,'R','D','B','$','P','A',
   'R','A','M','E','T','E','R','_','T','Y','P','E','H',23,0,20,
   'R','D','B','$','P','A','R','A','M','E','T','E','R','_','N',
   'U','M','B','E','R',-1,14,1,2,1,23,1,18,'R','D','B','$','D',
   'E','F','A','U','L','T','_','S','O','U','R','C','E',41,1,0,0,
   5,0,1,23,0,18,'R','D','B','$','P','R','O','C','E','D','U','R',
   'E','_','N','A','M','E',25,1,1,0,1,23,1,14,'R','D','B','$','F',
   'I','E','L','D','_','N','A','M','E',25,1,2,0,1,23,0,18,'R','D',
   'B','$','P','A','R','A','M','E','T','E','R','_','N','A','M',
   'E',25,1,3,0,1,21,8,0,1,0,0,0,25,1,4,0,1,23,1,15,'R','D','B',
   '$','S','Y','S','T','E','M','_','F','L','A','G',25,1,6,0,1,23,
   0,18,'R','D','B','$','P','A','R','A','M','E','T','E','R','_',
   'T','Y','P','E',25,1,7,0,1,23,1,20,'R','D','B','$','C','H','A',
   'R','A','C','T','E','R','_','L','E','N','G','T','H',41,1,9,0,
   8,0,1,23,1,15,'R','D','B','$','F','I','E','L','D','_','S','C',
   'A','L','E',25,1,10,0,1,23,1,14,'R','D','B','$','F','I','E',
   'L','D','_','T','Y','P','E',25,1,11,0,-1,14,1,1,21,8,0,0,0,0,
   0,25,1,4,0,-1,-1,'L'
   };	/* end of blr string for request isc_243 */

static isc_req_handle
   isc_259 = 0;		/* request handle */

static const short
   isc_260l = 166;
static const char
   isc_260 [] = {
   4,2,4,1,4,0,41,3,0,32,0,9,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,
   2,7,'C',1,'J',14,'R','D','B','$','P','R','O','C','E','D','U',
   'R','E','S',0,'G',47,23,0,18,'R','D','B','$','P','R','O','C',
   'E','D','U','R','E','_','N','A','M','E',25,0,0,0,-1,14,1,2,1,
   23,0,18,'R','D','B','$','P','R','O','C','E','D','U','R','E',
   '_','N','A','M','E',25,1,0,0,1,23,0,20,'R','D','B','$','P','R',
   'O','C','E','D','U','R','E','_','S','O','U','R','C','E',41,1,
   1,0,3,0,1,21,8,0,1,0,0,0,25,1,2,0,-1,14,1,1,21,8,0,0,0,0,0,25,
   1,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_260 */

static isc_req_handle
   isc_268 = 0;		/* request handle */

static const short
   isc_269l = 264;
static const char
   isc_269 [] = {
   4,2,4,1,3,0,41,3,0,32,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,
   'C',1,'J',16,'R','D','B','$','D','E','P','E','N','D','E','N',
   'C','I','E','S',0,'G',47,25,0,0,0,23,0,18,'R','D','B','$','D',
   'E','P','E','N','D','E','N','T','_','N','A','M','E','F',2,'H',
   23,0,20,'R','D','B','$','D','E','P','E','N','D','E','D','_',
   'O','N','_','T','Y','P','E','H',23,0,20,'R','D','B','$','D',
   'E','P','E','N','D','E','D','_','O','N','_','N','A','M','E',
   'E',2,23,0,20,'R','D','B','$','D','E','P','E','N','D','E','D',
   '_','O','N','_','T','Y','P','E',23,0,20,'R','D','B','$','D',
   'E','P','E','N','D','E','D','_','O','N','_','N','A','M','E',
   -1,14,1,2,1,23,0,20,'R','D','B','$','D','E','P','E','N','D',
   'E','D','_','O','N','_','N','A','M','E',25,1,0,0,1,21,8,0,1,
   0,0,0,25,1,1,0,1,23,0,20,'R','D','B','$','D','E','P','E','N',
   'D','E','D','_','O','N','_','T','Y','P','E',25,1,2,0,-1,14,1,
   1,21,8,0,0,0,0,0,25,1,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_269 */

static isc_req_handle
   isc_276 = 0;		/* request handle */

static const short
   isc_277l = 128;
static const char
   isc_277 [] = {
   4,2,4,1,3,0,7,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',
   14,'R','D','B','$','P','R','O','C','E','D','U','R','E','S',0,
   'G',47,23,0,18,'R','D','B','$','P','R','O','C','E','D','U','R',
   'E','_','N','A','M','E',25,0,0,0,-1,14,1,2,1,21,8,0,1,0,0,0,
   25,1,0,0,1,23,0,13,'R','D','B','$','V','A','L','I','D','_','B',
   'L','R',41,1,2,0,1,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,
   'L'
   };	/* end of blr string for request isc_277 */

static isc_req_handle
   isc_284 = 0;		/* request handle */

static const short
   isc_285l = 118;
static const char
   isc_285 [] = {
   4,2,4,0,2,0,41,3,0,32,0,7,0,2,7,'C',1,'J',14,'R','D','B','$',
   'P','R','O','C','E','D','U','R','E','S',0,'F',1,'H',23,0,18,
   'R','D','B','$','P','R','O','C','E','D','U','R','E','_','N',
   'A','M','E',-1,14,0,2,1,23,0,18,'R','D','B','$','P','R','O',
   'C','E','D','U','R','E','_','N','A','M','E',25,0,0,0,1,21,8,
   0,1,0,0,0,25,0,1,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,1,0,-1,-1,'L'
   
   };	/* end of blr string for request isc_285 */

static isc_req_handle
   isc_289 = 0;		/* request handle */

static const short
   isc_290l = 407;
static const char
   isc_290 [] = {
   4,2,4,0,10,0,9,0,9,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,7,0,7,0,
   7,0,7,0,2,7,'C',2,'J',11,'R','D','B','$','I','N','D','I','C',
   'E','S',0,'J',13,'R','D','B','$','R','E','L','A','T','I','O',
   'N','S',1,'G',58,47,23,1,17,'R','D','B','$','R','E','L','A',
   'T','I','O','N','_','N','A','M','E',23,0,17,'R','D','B','$',
   'R','E','L','A','T','I','O','N','_','N','A','M','E',57,48,23,
   1,15,'R','D','B','$','S','Y','S','T','E','M','_','F','L','A',
   'G',21,8,0,1,0,0,0,61,23,1,15,'R','D','B','$','S','Y','S','T',
   'E','M','_','F','L','A','G','F',2,'H',23,0,17,'R','D','B','$',
   'R','E','L','A','T','I','O','N','_','N','A','M','E','H',23,0,
   14,'R','D','B','$','I','N','D','E','X','_','N','A','M','E',-1,
   14,0,2,1,23,0,21,'R','D','B','$','E','X','P','R','E','S','S',
   'I','O','N','_','S','O','U','R','C','E',41,0,0,0,5,0,1,23,0,
   18,'R','D','B','$','E','X','P','R','E','S','S','I','O','N','_',
   'B','L','R',41,0,1,0,6,0,1,23,0,14,'R','D','B','$','I','N','D',
   'E','X','_','N','A','M','E',25,0,2,0,1,23,0,17,'R','D','B','$',
   'R','E','L','A','T','I','O','N','_','N','A','M','E',25,0,3,0,
   1,21,8,0,1,0,0,0,25,0,4,0,1,23,0,18,'R','D','B','$','I','N',
   'D','E','X','_','I','N','A','C','T','I','V','E',25,0,7,0,1,23,
   0,14,'R','D','B','$','I','N','D','E','X','_','T','Y','P','E',
   25,0,8,0,1,23,0,15,'R','D','B','$','U','N','I','Q','U','E','_',
   'F','L','A','G',25,0,9,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,4,0,-1,
   -1,'L'
   };	/* end of blr string for request isc_290 */

static isc_req_handle
   isc_302 = 0;		/* request handle */

static const short
   isc_303l = 350;
static const char
   isc_303 [] = {
   4,2,4,1,11,0,9,0,9,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,7,0,7,0,
   7,0,7,0,7,0,4,0,2,0,41,3,0,32,0,41,3,0,32,0,12,0,2,7,'C',1,'J',
   11,'R','D','B','$','I','N','D','I','C','E','S',0,'G',57,47,23,
   0,17,'R','D','B','$','R','E','L','A','T','I','O','N','_','N',
   'A','M','E',25,0,1,0,47,23,0,14,'R','D','B','$','I','N','D',
   'E','X','_','N','A','M','E',25,0,0,0,'F',1,'H',23,0,14,'R','D',
   'B','$','I','N','D','E','X','_','N','A','M','E',-1,14,1,2,1,
   23,0,21,'R','D','B','$','E','X','P','R','E','S','S','I','O',
   'N','_','S','O','U','R','C','E',41,1,0,0,5,0,1,23,0,18,'R','D',
   'B','$','E','X','P','R','E','S','S','I','O','N','_','B','L',
   'R',41,1,1,0,6,0,1,23,0,14,'R','D','B','$','I','N','D','E','X',
   '_','N','A','M','E',25,1,2,0,1,23,0,17,'R','D','B','$','R','E',
   'L','A','T','I','O','N','_','N','A','M','E',25,1,3,0,1,21,8,
   0,1,0,0,0,25,1,4,0,1,23,0,14,'R','D','B','$','I','N','D','E',
   'X','_','T','Y','P','E',25,1,7,0,1,23,0,15,'R','D','B','$','U',
   'N','I','Q','U','E','_','F','L','A','G',25,1,8,0,1,23,0,18,'R',
   'D','B','$','I','N','D','E','X','_','I','N','A','C','T','I',
   'V','E',41,1,10,0,9,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,4,0,-1,-1,
   'L'
   };	/* end of blr string for request isc_303 */

static isc_req_handle
   isc_319 = 0;		/* request handle */

static const short
   isc_320l = 147;
static const char
   isc_320 [] = {
   4,2,4,0,4,0,41,3,0,32,0,7,0,7,0,7,0,2,7,'C',1,'J',14,'R','D',
   'B','$','G','E','N','E','R','A','T','O','R','S',0,'F',1,'H',
   23,0,18,'R','D','B','$','G','E','N','E','R','A','T','O','R',
   '_','N','A','M','E',-1,14,0,2,1,23,0,18,'R','D','B','$','G',
   'E','N','E','R','A','T','O','R','_','N','A','M','E',25,0,0,0,
   1,21,8,0,1,0,0,0,25,0,1,0,1,23,0,15,'R','D','B','$','S','Y',
   'S','T','E','M','_','F','L','A','G',41,0,3,0,2,0,-1,14,0,1,21,
   8,0,0,0,0,0,25,0,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_320 */

static isc_req_handle
   isc_326 = 0;		/* request handle */

static const short
   isc_327l = 277;
static const char
   isc_327 [] = {
   4,2,4,1,3,0,41,3,0,32,0,7,0,7,0,4,0,2,0,41,3,0,32,0,7,0,12,0,
   2,7,'C',2,'J',22,'R','D','B','$','F','U','N','C','T','I','O',
   'N','_','A','R','G','U','M','E','N','T','S',0,'J',18,'R','D',
   'B','$','C','H','A','R','A','C','T','E','R','_','S','E','T',
   'S',1,'G',58,47,23,1,20,'R','D','B','$','C','H','A','R','A',
   'C','T','E','R','_','S','E','T','_','I','D',23,0,20,'R','D',
   'B','$','C','H','A','R','A','C','T','E','R','_','S','E','T',
   '_','I','D',58,47,23,0,17,'R','D','B','$','F','U','N','C','T',
   'I','O','N','_','N','A','M','E',25,0,0,0,47,23,0,21,'R','D',
   'B','$','A','R','G','U','M','E','N','T','_','P','O','S','I',
   'T','I','O','N',25,0,1,0,-1,14,1,2,1,23,1,22,'R','D','B','$',
   'C','H','A','R','A','C','T','E','R','_','S','E','T','_','N',
   'A','M','E',25,1,0,0,1,21,8,0,1,0,0,0,25,1,1,0,1,23,1,23,'R',
   'D','B','$','B','Y','T','E','S','_','P','E','R','_','C','H',
   'A','R','A','C','T','E','R',25,1,2,0,-1,14,1,1,21,8,0,0,0,0,
   0,25,1,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_327 */

static isc_req_handle
   isc_335 = 0;		/* request handle */

static const short
   isc_336l = 226;
static const char
   isc_336 [] = {
   4,2,4,1,5,0,7,0,7,0,7,0,7,0,7,0,4,0,2,0,41,3,0,32,0,7,0,12,0,
   2,7,'C',1,'J',22,'R','D','B','$','F','U','N','C','T','I','O',
   'N','_','A','R','G','U','M','E','N','T','S',0,'G',58,47,23,0,
   17,'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A',
   'M','E',25,0,0,0,47,23,0,21,'R','D','B','$','A','R','G','U',
   'M','E','N','T','_','P','O','S','I','T','I','O','N',25,0,1,0,
   -1,14,1,2,1,21,8,0,1,0,0,0,25,1,0,0,1,23,0,15,'R','D','B','$',
   'F','I','E','L','D','_','S','C','A','L','E',25,1,1,0,1,23,0,
   18,'R','D','B','$','F','I','E','L','D','_','S','U','B','_','T',
   'Y','P','E',25,1,2,0,1,23,0,19,'R','D','B','$','F','I','E','L',
   'D','_','P','R','E','C','I','S','I','O','N',41,1,4,0,3,0,-1,
   14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_336 */

static isc_req_handle
   isc_346 = 0;		/* request handle */

static const short
   isc_347l = 466;
static const char
   isc_347 [] = {
   4,2,4,1,11,0,41,3,0,32,0,41,0,0,32,0,41,0,0,0,1,41,3,0,32,0,
   7,0,7,0,7,0,7,0,7,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',
   2,'J',13,'R','D','B','$','F','U','N','C','T','I','O','N','S',
   0,'J',22,'R','D','B','$','F','U','N','C','T','I','O','N','_',
   'A','R','G','U','M','E','N','T','S',1,'G',58,47,23,0,17,'R',
   'D','B','$','F','U','N','C','T','I','O','N','_','N','A','M',
   'E',23,1,17,'R','D','B','$','F','U','N','C','T','I','O','N',
   '_','N','A','M','E',47,23,0,17,'R','D','B','$','F','U','N','C',
   'T','I','O','N','_','N','A','M','E',25,0,0,0,'F',1,'H',23,1,
   21,'R','D','B','$','A','R','G','U','M','E','N','T','_','P','O',
   'S','I','T','I','O','N',-1,14,1,2,1,23,1,17,'R','D','B','$',
   'F','U','N','C','T','I','O','N','_','N','A','M','E',25,1,0,0,
   1,23,0,14,'R','D','B','$','E','N','T','R','Y','P','O','I','N',
   'T',25,1,1,0,1,23,0,15,'R','D','B','$','M','O','D','U','L','E',
   '_','N','A','M','E',25,1,2,0,1,23,0,17,'R','D','B','$','F','U',
   'N','C','T','I','O','N','_','N','A','M','E',25,1,3,0,1,21,8,
   0,1,0,0,0,25,1,4,0,1,23,1,16,'R','D','B','$','F','I','E','L',
   'D','_','L','E','N','G','T','H',25,1,5,0,1,23,1,15,'R','D','B',
   '$','F','I','E','L','D','_','S','C','A','L','E',25,1,6,0,1,23,
   1,14,'R','D','B','$','F','I','E','L','D','_','T','Y','P','E',
   25,1,7,0,1,23,1,21,'R','D','B','$','A','R','G','U','M','E','N',
   'T','_','P','O','S','I','T','I','O','N',25,1,8,0,1,23,0,19,'R',
   'D','B','$','R','E','T','U','R','N','_','A','R','G','U','M',
   'E','N','T',25,1,9,0,1,23,1,13,'R','D','B','$','M','E','C','H',
   'A','N','I','S','M',25,1,10,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,
   4,0,-1,-1,'L'
   };	/* end of blr string for request isc_347 */

static isc_req_handle
   isc_362 = 0;		/* request handle */

static const short
   isc_363l = 147;
static const char
   isc_363 [] = {
   4,2,4,1,2,0,41,3,0,32,0,7,0,4,0,1,0,7,0,12,0,2,7,'C',1,'J',13,
   'R','D','B','$','F','U','N','C','T','I','O','N','S',0,'G',47,
   23,0,15,'R','D','B','$','S','Y','S','T','E','M','_','F','L',
   'A','G',25,0,0,0,'F',1,'H',23,0,17,'R','D','B','$','F','U','N',
   'C','T','I','O','N','_','N','A','M','E',-1,14,1,2,1,23,0,17,
   'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A',
   'M','E',25,1,0,0,1,21,8,0,1,0,0,0,25,1,1,0,-1,14,1,1,21,8,0,
   0,0,0,0,25,1,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_363 */

static isc_req_handle
   isc_369 = 0;		/* request handle */

static const short
   isc_370l = 162;
static const char
   isc_370 [] = {
   4,2,4,0,2,0,41,3,0,32,0,7,0,2,7,'C',1,'J',13,'R','D','B','$',
   'F','U','N','C','T','I','O','N','S',0,'G',57,47,23,0,15,'R',
   'D','B','$','S','Y','S','T','E','M','_','F','L','A','G',21,8,
   0,0,0,0,0,61,23,0,15,'R','D','B','$','S','Y','S','T','E','M',
   '_','F','L','A','G','F',1,'H',23,0,17,'R','D','B','$','F','U',
   'N','C','T','I','O','N','_','N','A','M','E',-1,14,0,2,1,23,0,
   17,'R','D','B','$','F','U','N','C','T','I','O','N','_','N','A',
   'M','E',25,0,0,0,1,21,8,0,1,0,0,0,25,0,1,0,-1,14,0,1,21,8,0,
   0,0,0,0,25,0,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_370 */

static isc_req_handle
   isc_374 = 0;		/* request handle */

static const short
   isc_375l = 239;
static const char
   isc_375 [] = {
   4,2,4,1,6,0,41,0,0,32,0,41,0,0,0,1,41,3,0,32,0,7,0,7,0,7,0,4,
   0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',11,'R','D','B','$','F',
   'I','L','T','E','R','S',0,'G',47,23,0,17,'R','D','B','$','F',
   'U','N','C','T','I','O','N','_','N','A','M','E',25,0,0,0,-1,
   14,1,2,1,23,0,14,'R','D','B','$','E','N','T','R','Y','P','O',
   'I','N','T',25,1,0,0,1,23,0,15,'R','D','B','$','M','O','D','U',
   'L','E','_','N','A','M','E',25,1,1,0,1,23,0,17,'R','D','B','$',
   'F','U','N','C','T','I','O','N','_','N','A','M','E',25,1,2,0,
   1,21,8,0,1,0,0,0,25,1,3,0,1,23,0,19,'R','D','B','$','O','U',
   'T','P','U','T','_','S','U','B','_','T','Y','P','E',25,1,4,0,
   1,23,0,18,'R','D','B','$','I','N','P','U','T','_','S','U','B',
   '_','T','Y','P','E',25,1,5,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,3,
   0,-1,-1,'L'
   };	/* end of blr string for request isc_375 */

static isc_req_handle
   isc_385 = 0;		/* request handle */

static const short
   isc_386l = 113;
static const char
   isc_386 [] = {
   4,2,4,0,2,0,41,3,0,32,0,7,0,2,7,'C',1,'J',11,'R','D','B','$',
   'F','I','L','T','E','R','S',0,'F',1,'H',23,0,17,'R','D','B',
   '$','F','U','N','C','T','I','O','N','_','N','A','M','E',-1,14,
   0,2,1,23,0,17,'R','D','B','$','F','U','N','C','T','I','O','N',
   '_','N','A','M','E',25,0,0,0,1,21,8,0,1,0,0,0,25,0,1,0,-1,14,
   0,1,21,8,0,0,0,0,0,25,0,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_386 */

static isc_req_handle
   isc_390 = 0;		/* request handle */

static const short
   isc_391l = 241;
static const char
   isc_391 [] = {
   4,2,4,1,3,0,41,3,0,32,0,7,0,7,0,4,0,2,0,41,3,0,32,0,7,0,12,0,
   2,7,'C',1,'J',16,'R','D','B','$','D','E','P','E','N','D','E',
   'N','C','I','E','S',0,'G',58,47,23,0,20,'R','D','B','$','D',
   'E','P','E','N','D','E','D','_','O','N','_','T','Y','P','E',
   25,0,1,0,47,23,0,20,'R','D','B','$','D','E','P','E','N','D',
   'E','D','_','O','N','_','N','A','M','E',25,0,0,0,'F',2,'H',23,
   0,18,'R','D','B','$','D','E','P','E','N','D','E','N','T','_',
   'T','Y','P','E','H',23,0,18,'R','D','B','$','D','E','P','E',
   'N','D','E','N','T','_','N','A','M','E',-1,14,1,2,1,23,0,18,
   'R','D','B','$','D','E','P','E','N','D','E','N','T','_','N',
   'A','M','E',25,1,0,0,1,21,8,0,1,0,0,0,25,1,1,0,1,23,0,18,'R',
   'D','B','$','D','E','P','E','N','D','E','N','T','_','T','Y',
   'P','E',25,1,2,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,1,0,-1,-1,'L'
   
   };	/* end of blr string for request isc_391 */

static isc_req_handle
   isc_399 = 0;		/* request handle */

static const short
   isc_400l = 146;
static const char
   isc_400 [] = {
   4,2,4,0,4,0,41,0,0,0,4,41,3,0,32,0,7,0,7,0,2,7,'C',1,'J',14,
   'R','D','B','$','E','X','C','E','P','T','I','O','N','S',0,'F',
   1,'H',23,0,18,'R','D','B','$','E','X','C','E','P','T','I','O',
   'N','_','N','A','M','E',-1,14,0,2,1,23,0,11,'R','D','B','$',
   'M','E','S','S','A','G','E',41,0,0,0,3,0,1,23,0,18,'R','D','B',
   '$','E','X','C','E','P','T','I','O','N','_','N','A','M','E',
   25,0,1,0,1,21,8,0,1,0,0,0,25,0,2,0,-1,14,0,1,21,8,0,0,0,0,0,
   25,0,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_400 */

static isc_req_handle
   isc_406 = 0;		/* request handle */

static const short
   isc_407l = 179;
static const char
   isc_407 [] = {
   4,2,4,1,5,0,7,0,7,0,7,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,
   'C',1,'J',10,'R','D','B','$','F','I','E','L','D','S',0,'G',47,
   23,0,14,'R','D','B','$','F','I','E','L','D','_','N','A','M',
   'E',25,0,0,0,-1,14,1,2,1,21,8,0,1,0,0,0,25,1,0,0,1,23,0,15,'R',
   'D','B','$','F','I','E','L','D','_','S','C','A','L','E',25,1,
   1,0,1,23,0,18,'R','D','B','$','F','I','E','L','D','_','S','U',
   'B','_','T','Y','P','E',25,1,2,0,1,23,0,19,'R','D','B','$','F',
   'I','E','L','D','_','P','R','E','C','I','S','I','O','N',41,1,
   4,0,3,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_407 */

static isc_req_handle
   isc_416 = 0;		/* request handle */

static const short
   isc_417l = 311;
static const char
   isc_417 [] = {
   4,2,4,1,11,0,9,0,41,3,0,32,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,
   7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',10,'R','D','B','$',
   'F','I','E','L','D','S',0,'G',47,23,0,14,'R','D','B','$','F',
   'I','E','L','D','_','N','A','M','E',25,0,0,0,-1,14,1,2,1,23,
   0,21,'R','D','B','$','V','A','L','I','D','A','T','I','O','N',
   '_','S','O','U','R','C','E',41,1,0,0,3,0,1,23,0,14,'R','D','B',
   '$','F','I','E','L','D','_','N','A','M','E',25,1,1,0,1,21,8,
   0,1,0,0,0,25,1,2,0,1,23,0,13,'R','D','B','$','N','U','L','L',
   '_','F','L','A','G',25,1,4,0,1,23,0,18,'R','D','B','$','F','I',
   'E','L','D','_','S','U','B','_','T','Y','P','E',25,1,5,0,1,23,
   0,18,'R','D','B','$','S','E','G','M','E','N','T','_','L','E',
   'N','G','T','H',25,1,6,0,1,23,0,15,'R','D','B','$','F','I','E',
   'L','D','_','S','C','A','L','E',25,1,7,0,1,23,0,14,'R','D','B',
   '$','F','I','E','L','D','_','T','Y','P','E',25,1,8,0,1,23,0,
   14,'R','D','B','$','D','I','M','E','N','S','I','O','N','S',41,
   1,10,0,9,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_417 */

static isc_req_handle
   isc_432 = 0;		/* request handle */

static const short
   isc_433l = 185;
static const char
   isc_433 [] = {
   4,2,4,0,2,0,41,3,0,32,0,7,0,2,7,'C',1,'J',10,'R','D','B','$',
   'F','I','E','L','D','S',0,'G',58,59,106,23,0,14,'R','D','B',
   '$','F','I','E','L','D','_','N','A','M','E',21,15,3,0,5,0,'R',
   'D','B','$',43,21,15,3,0,15,0,43,61,91,48,45,57,93,91,48,45,
   57,93,42,32,42,48,23,0,15,'R','D','B','$','S','Y','S','T','E',
   'M','_','F','L','A','G',21,8,0,1,0,0,0,'F',1,'H',23,0,14,'R',
   'D','B','$','F','I','E','L','D','_','N','A','M','E',-1,14,0,
   2,1,23,0,14,'R','D','B','$','F','I','E','L','D','_','N','A',
   'M','E',25,0,0,0,1,21,8,0,1,0,0,0,25,0,1,0,-1,14,0,1,21,8,0,
   0,0,0,0,25,0,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_433 */

static isc_req_handle
   isc_437 = 0;		/* request handle */

static const short
   isc_438l = 479;
static const char
   isc_438 [] = {
   4,2,4,1,8,0,41,3,0,32,0,41,3,0,32,0,41,3,0,32,0,9,0,7,0,7,0,
   7,0,7,0,4,0,2,0,41,3,0,32,0,7,0,12,0,2,7,'C',3,'J',24,'R','D',
   'B','$','P','R','O','C','E','D','U','R','E','_','P','A','R',
   'A','M','E','T','E','R','S',0,'J',10,'R','D','B','$','F','I',
   'E','L','D','S',1,'J',16,'R','D','B','$','D','E','P','E','N',
   'D','E','N','C','I','E','S',2,'G',58,47,23,0,18,'R','D','B',
   '$','P','R','O','C','E','D','U','R','E','_','N','A','M','E',
   25,0,0,0,58,47,23,0,16,'R','D','B','$','F','I','E','L','D','_',
   'S','O','U','R','C','E',23,1,14,'R','D','B','$','F','I','E',
   'L','D','_','N','A','M','E',58,47,23,2,18,'R','D','B','$','D',
   'E','P','E','N','D','E','N','T','_','N','A','M','E',23,0,16,
   'R','D','B','$','F','I','E','L','D','_','S','O','U','R','C',
   'E',47,23,2,18,'R','D','B','$','D','E','P','E','N','D','E','N',
   'T','_','T','Y','P','E',25,0,1,0,'F',2,'H',23,0,18,'R','D','B',
   '$','P','A','R','A','M','E','T','E','R','_','T','Y','P','E',
   'H',23,0,20,'R','D','B','$','P','A','R','A','M','E','T','E',
   'R','_','N','U','M','B','E','R',-1,14,1,2,1,23,2,20,'R','D',
   'B','$','D','E','P','E','N','D','E','D','_','O','N','_','N',
   'A','M','E',25,1,0,0,1,23,1,14,'R','D','B','$','F','I','E','L',
   'D','_','N','A','M','E',25,1,1,0,1,23,0,18,'R','D','B','$','P',
   'A','R','A','M','E','T','E','R','_','N','A','M','E',25,1,2,0,
   1,23,1,16,'R','D','B','$','C','O','M','P','U','T','E','D','_',
   'B','L','R',41,1,3,0,7,0,1,21,8,0,1,0,0,0,25,1,4,0,1,23,0,18,
   'R','D','B','$','P','A','R','A','M','E','T','E','R','_','T',
   'Y','P','E',25,1,5,0,1,23,2,20,'R','D','B','$','D','E','P','E',
   'N','D','E','D','_','O','N','_','T','Y','P','E',25,1,6,0,-1,
   14,1,1,21,8,0,0,0,0,0,25,1,4,0,-1,-1,'L'
   };	/* end of blr string for request isc_438 */

static isc_req_handle
   isc_451 = 0;		/* request handle */

static const short
   isc_452l = 417;
static const char
   isc_452 [] = {
   4,2,4,1,7,0,41,3,0,32,0,41,3,0,32,0,41,3,0,32,0,9,0,7,0,7,0,
   7,0,4,0,2,0,41,3,0,32,0,7,0,12,0,2,7,'C',3,'J',19,'R','D','B',
   '$','R','E','L','A','T','I','O','N','_','F','I','E','L','D',
   'S',0,'J',10,'R','D','B','$','F','I','E','L','D','S',1,'J',16,
   'R','D','B','$','D','E','P','E','N','D','E','N','C','I','E',
   'S',2,'G',58,47,23,0,17,'R','D','B','$','R','E','L','A','T',
   'I','O','N','_','N','A','M','E',25,0,0,0,58,47,23,0,16,'R','D',
   'B','$','F','I','E','L','D','_','S','O','U','R','C','E',23,1,
   14,'R','D','B','$','F','I','E','L','D','_','N','A','M','E',58,
   47,23,2,18,'R','D','B','$','D','E','P','E','N','D','E','N','T',
   '_','N','A','M','E',23,0,16,'R','D','B','$','F','I','E','L',
   'D','_','S','O','U','R','C','E',47,23,2,18,'R','D','B','$','D',
   'E','P','E','N','D','E','N','T','_','T','Y','P','E',25,0,1,0,
   'F',1,'H',23,0,18,'R','D','B','$','F','I','E','L','D','_','P',
   'O','S','I','T','I','O','N',-1,14,1,2,1,23,2,20,'R','D','B',
   '$','D','E','P','E','N','D','E','D','_','O','N','_','N','A',
   'M','E',25,1,0,0,1,23,1,14,'R','D','B','$','F','I','E','L','D',
   '_','N','A','M','E',25,1,1,0,1,23,0,14,'R','D','B','$','F','I',
   'E','L','D','_','N','A','M','E',25,1,2,0,1,23,1,16,'R','D','B',
   '$','C','O','M','P','U','T','E','D','_','B','L','R',41,1,3,0,
   6,0,1,21,8,0,1,0,0,0,25,1,4,0,1,23,2,20,'R','D','B','$','D',
   'E','P','E','N','D','E','D','_','O','N','_','T','Y','P','E',
   25,1,5,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,4,0,-1,-1,'L'
   };	/* end of blr string for request isc_452 */

static isc_req_handle
   isc_464 = 0;		/* request handle */

static const short
   isc_465l = 165;
static const char
   isc_465 [] = {
   4,2,4,1,1,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',13,'R',
   'D','B','$','R','E','L','A','T','I','O','N','S',0,'G',58,47,
   23,0,17,'R','D','B','$','R','E','L','A','T','I','O','N','_',
   'N','A','M','E',25,0,0,0,58,61,23,0,12,'R','D','B','$','V','I',
   'E','W','_','B','L','R',57,61,23,0,16,'R','D','B','$','D','B',
   'K','E','Y','_','L','E','N','G','T','H',47,23,0,16,'R','D','B',
   '$','D','B','K','E','Y','_','L','E','N','G','T','H',21,8,0,8,
   0,0,0,-1,14,1,2,1,21,8,0,1,0,0,0,25,1,0,0,-1,14,1,1,21,8,0,0,
   0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_465 */

static isc_req_handle
   isc_470 = 0;		/* request handle */

static const short
   isc_471l = 226;
static const char
   isc_471 [] = {
   4,2,4,1,5,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,7,0,4,0,2,0,41,3,
   0,32,0,7,0,12,0,2,7,'C',1,'J',16,'R','D','B','$','D','E','P',
   'E','N','D','E','N','C','I','E','S',0,'G',58,47,23,0,18,'R',
   'D','B','$','D','E','P','E','N','D','E','N','T','_','N','A',
   'M','E',25,0,0,0,47,23,0,18,'R','D','B','$','D','E','P','E',
   'N','D','E','N','T','_','T','Y','P','E',25,0,1,0,-1,14,1,2,1,
   23,0,14,'R','D','B','$','F','I','E','L','D','_','N','A','M',
   'E',41,1,0,0,3,0,1,23,0,20,'R','D','B','$','D','E','P','E','N',
   'D','E','D','_','O','N','_','N','A','M','E',25,1,1,0,1,21,8,
   0,1,0,0,0,25,1,2,0,1,23,0,20,'R','D','B','$','D','E','P','E',
   'N','D','E','D','_','O','N','_','T','Y','P','E',25,1,4,0,-1,
   14,1,1,21,8,0,0,0,0,0,25,1,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_471 */

static isc_req_handle
   isc_481 = 0;		/* request handle */

static const short
   isc_482l = 226;
static const char
   isc_482 [] = {
   4,2,4,1,5,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,7,0,4,0,2,0,41,3,
   0,32,0,7,0,12,0,2,7,'C',1,'J',16,'R','D','B','$','D','E','P',
   'E','N','D','E','N','C','I','E','S',0,'G',58,47,23,0,20,'R',
   'D','B','$','D','E','P','E','N','D','E','D','_','O','N','_',
   'N','A','M','E',25,0,0,0,47,23,0,20,'R','D','B','$','D','E',
   'P','E','N','D','E','D','_','O','N','_','T','Y','P','E',25,0,
   1,0,-1,14,1,2,1,23,0,14,'R','D','B','$','F','I','E','L','D',
   '_','N','A','M','E',41,1,0,0,3,0,1,23,0,18,'R','D','B','$','D',
   'E','P','E','N','D','E','N','T','_','N','A','M','E',25,1,1,0,
   1,21,8,0,1,0,0,0,25,1,2,0,1,23,0,18,'R','D','B','$','D','E',
   'P','E','N','D','E','N','T','_','T','Y','P','E',25,1,4,0,-1,
   14,1,1,21,8,0,0,0,0,0,25,1,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_482 */

static isc_req_handle
   isc_492 = 0;		/* request handle */

static const short
   isc_493l = 210;
static const char
   isc_493 [] = {
   4,2,4,0,4,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,2,7,'C',2,'J',12,
   'R','D','B','$','D','A','T','A','B','A','S','E',0,'J',18,'R',
   'D','B','$','C','H','A','R','A','C','T','E','R','_','S','E',
   'T','S',1,'G',47,23,1,22,'R','D','B','$','C','H','A','R','A',
   'C','T','E','R','_','S','E','T','_','N','A','M','E',23,0,22,
   'R','D','B','$','C','H','A','R','A','C','T','E','R','_','S',
   'E','T','_','N','A','M','E',-1,14,0,2,1,23,1,24,'R','D','B',
   '$','D','E','F','A','U','L','T','_','C','O','L','L','A','T',
   'E','_','N','A','M','E',41,0,0,0,3,0,1,23,0,22,'R','D','B','$',
   'C','H','A','R','A','C','T','E','R','_','S','E','T','_','N',
   'A','M','E',25,0,1,0,1,21,8,0,1,0,0,0,25,0,2,0,-1,14,0,1,21,
   8,0,0,0,0,0,25,0,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_493 */

static isc_req_handle
   isc_499 = 0;		/* request handle */

static const short
   isc_500l = 292;
static const char
   isc_500 [] = {
   4,2,4,0,11,0,41,0,0,0,1,8,0,8,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,
   7,0,2,7,'C',1,'J',9,'R','D','B','$','F','I','L','E','S',0,'F',
   3,'H',23,0,17,'R','D','B','$','S','H','A','D','O','W','_','N',
   'U','M','B','E','R','H',23,0,17,'R','D','B','$','F','I','L',
   'E','_','S','E','Q','U','E','N','C','E','H',23,0,17,'R','D',
   'B','$','F','I','L','E','_','S','E','Q','U','E','N','C','E',
   -1,14,0,2,1,23,0,13,'R','D','B','$','F','I','L','E','_','N',
   'A','M','E',25,0,0,0,1,23,0,14,'R','D','B','$','F','I','L','E',
   '_','S','T','A','R','T',41,0,1,0,5,0,1,23,0,15,'R','D','B','$',
   'F','I','L','E','_','L','E','N','G','T','H',41,0,2,0,8,0,1,21,
   8,0,1,0,0,0,25,0,3,0,1,23,0,17,'R','D','B','$','S','H','A','D',
   'O','W','_','N','U','M','B','E','R',25,0,4,0,1,23,0,17,'R','D',
   'B','$','F','I','L','E','_','S','E','Q','U','E','N','C','E',
   41,0,7,0,6,0,1,23,0,14,'R','D','B','$','F','I','L','E','_','F',
   'L','A','G','S',41,0,10,0,9,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,
   3,0,-1,-1,'L'
   };	/* end of blr string for request isc_500 */

static isc_req_handle
   isc_513 = 0;		/* request handle */

static const short
   isc_514l = 133;
static const char
   isc_514 [] = {
   4,2,4,0,3,0,41,3,0,32,0,7,0,7,0,2,7,'C',1,'J',13,'R','D','B',
   '$','R','E','L','A','T','I','O','N','S',0,'G',47,23,0,17,'R',
   'D','B','$','R','E','L','A','T','I','O','N','_','N','A','M',
   'E',21,15,3,0,12,0,'R','D','B','$','D','A','T','A','B','A','S',
   'E',-1,14,0,2,1,23,0,14,'R','D','B','$','O','W','N','E','R',
   '_','N','A','M','E',41,0,0,0,2,0,1,21,8,0,1,0,0,0,25,0,1,0,-1,
   14,0,1,21,8,0,0,0,0,0,25,0,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_514 */

static isc_req_handle
   isc_519 = 0;		/* request handle */

static const short
   isc_520l = 211;
static const char
   isc_520 [] = {
   4,2,4,0,3,0,9,0,41,3,0,32,0,7,0,2,7,'C',1,'J',14,'R','D','B',
   '$','C','O','L','L','A','T','I','O','N','S',0,'G',58,59,61,23,
   0,15,'R','D','B','$','D','E','S','C','R','I','P','T','I','O',
   'N',57,47,23,0,15,'R','D','B','$','S','Y','S','T','E','M','_',
   'F','L','A','G',21,8,0,0,0,0,0,61,23,0,15,'R','D','B','$','S',
   'Y','S','T','E','M','_','F','L','A','G','F',1,'H',23,0,18,'R',
   'D','B','$','C','O','L','L','A','T','I','O','N','_','N','A',
   'M','E',-1,14,0,2,1,23,0,15,'R','D','B','$','D','E','S','C',
   'R','I','P','T','I','O','N',25,0,0,0,1,23,0,18,'R','D','B','$',
   'C','O','L','L','A','T','I','O','N','_','N','A','M','E',25,0,
   1,0,1,21,8,0,1,0,0,0,25,0,2,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,
   2,0,-1,-1,'L'
   };	/* end of blr string for request isc_520 */

static isc_req_handle
   isc_525 = 0;		/* request handle */

static const short
   isc_526l = 223;
static const char
   isc_526 [] = {
   4,2,4,0,3,0,9,0,41,3,0,32,0,7,0,2,7,'C',1,'J',18,'R','D','B',
   '$','C','H','A','R','A','C','T','E','R','_','S','E','T','S',
   0,'G',58,59,61,23,0,15,'R','D','B','$','D','E','S','C','R','I',
   'P','T','I','O','N',57,47,23,0,15,'R','D','B','$','S','Y','S',
   'T','E','M','_','F','L','A','G',21,8,0,0,0,0,0,61,23,0,15,'R',
   'D','B','$','S','Y','S','T','E','M','_','F','L','A','G','F',
   1,'H',23,0,22,'R','D','B','$','C','H','A','R','A','C','T','E',
   'R','_','S','E','T','_','N','A','M','E',-1,14,0,2,1,23,0,15,
   'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N',
   25,0,0,0,1,23,0,22,'R','D','B','$','C','H','A','R','A','C','T',
   'E','R','_','S','E','T','_','N','A','M','E',25,0,1,0,1,21,8,
   0,1,0,0,0,25,0,2,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,2,0,-1,-1,'L'
   
   };	/* end of blr string for request isc_526 */

static isc_req_handle
   isc_531 = 0;		/* request handle */

static const short
   isc_532l = 196;
static const char
   isc_532 [] = {
   4,2,4,0,3,0,9,0,41,3,0,32,0,7,0,2,7,'C',1,'J',9,'R','D','B',
   '$','R','O','L','E','S',0,'G',58,59,61,23,0,15,'R','D','B','$',
   'D','E','S','C','R','I','P','T','I','O','N',57,47,23,0,15,'R',
   'D','B','$','S','Y','S','T','E','M','_','F','L','A','G',21,8,
   0,0,0,0,0,61,23,0,15,'R','D','B','$','S','Y','S','T','E','M',
   '_','F','L','A','G','F',1,'H',23,0,13,'R','D','B','$','R','O',
   'L','E','_','N','A','M','E',-1,14,0,2,1,23,0,15,'R','D','B',
   '$','D','E','S','C','R','I','P','T','I','O','N',25,0,0,0,1,23,
   0,13,'R','D','B','$','R','O','L','E','_','N','A','M','E',25,
   0,1,0,1,21,8,0,1,0,0,0,25,0,2,0,-1,14,0,1,21,8,0,0,0,0,0,25,
   0,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_532 */

static isc_req_handle
   isc_537 = 0;		/* request handle */

static const short
   isc_538l = 200;
static const char
   isc_538 [] = {
   4,2,4,0,3,0,9,0,41,3,0,32,0,7,0,2,7,'C',1,'J',11,'R','D','B',
   '$','I','N','D','I','C','E','S',0,'G',58,59,61,23,0,15,'R','D',
   'B','$','D','E','S','C','R','I','P','T','I','O','N',57,47,23,
   0,15,'R','D','B','$','S','Y','S','T','E','M','_','F','L','A',
   'G',21,8,0,0,0,0,0,61,23,0,15,'R','D','B','$','S','Y','S','T',
   'E','M','_','F','L','A','G','F',1,'H',23,0,14,'R','D','B','$',
   'I','N','D','E','X','_','N','A','M','E',-1,14,0,2,1,23,0,15,
   'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N',
   25,0,0,0,1,23,0,14,'R','D','B','$','I','N','D','E','X','_','N',
   'A','M','E',25,0,1,0,1,21,8,0,1,0,0,0,25,0,2,0,-1,14,0,1,21,
   8,0,0,0,0,0,25,0,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_538 */

static isc_req_handle
   isc_543 = 0;		/* request handle */

static const short
   isc_544l = 211;
static const char
   isc_544 [] = {
   4,2,4,0,3,0,9,0,41,3,0,32,0,7,0,2,7,'C',1,'J',14,'R','D','B',
   '$','G','E','N','E','R','A','T','O','R','S',0,'G',58,59,61,23,
   0,15,'R','D','B','$','D','E','S','C','R','I','P','T','I','O',
   'N',57,47,23,0,15,'R','D','B','$','S','Y','S','T','E','M','_',
   'F','L','A','G',21,8,0,0,0,0,0,61,23,0,15,'R','D','B','$','S',
   'Y','S','T','E','M','_','F','L','A','G','F',1,'H',23,0,18,'R',
   'D','B','$','G','E','N','E','R','A','T','O','R','_','N','A',
   'M','E',-1,14,0,2,1,23,0,15,'R','D','B','$','D','E','S','C',
   'R','I','P','T','I','O','N',25,0,0,0,1,23,0,18,'R','D','B','$',
   'G','E','N','E','R','A','T','O','R','_','N','A','M','E',25,0,
   1,0,1,21,8,0,1,0,0,0,25,0,2,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,
   2,0,-1,-1,'L'
   };	/* end of blr string for request isc_544 */

static isc_req_handle
   isc_549 = 0;		/* request handle */

static const short
   isc_550l = 211;
static const char
   isc_550 [] = {
   4,2,4,0,3,0,9,0,41,3,0,32,0,7,0,2,7,'C',1,'J',14,'R','D','B',
   '$','E','X','C','E','P','T','I','O','N','S',0,'G',58,59,61,23,
   0,15,'R','D','B','$','D','E','S','C','R','I','P','T','I','O',
   'N',57,47,23,0,15,'R','D','B','$','S','Y','S','T','E','M','_',
   'F','L','A','G',21,8,0,0,0,0,0,61,23,0,15,'R','D','B','$','S',
   'Y','S','T','E','M','_','F','L','A','G','F',1,'H',23,0,18,'R',
   'D','B','$','E','X','C','E','P','T','I','O','N','_','N','A',
   'M','E',-1,14,0,2,1,23,0,15,'R','D','B','$','D','E','S','C',
   'R','I','P','T','I','O','N',25,0,0,0,1,23,0,18,'R','D','B','$',
   'E','X','C','E','P','T','I','O','N','_','N','A','M','E',25,0,
   1,0,1,21,8,0,1,0,0,0,25,0,2,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,
   2,0,-1,-1,'L'
   };	/* end of blr string for request isc_550 */

static isc_req_handle
   isc_555 = 0;		/* request handle */

static const short
   isc_556l = 206;
static const char
   isc_556 [] = {
   4,2,4,0,3,0,9,0,41,3,0,32,0,7,0,2,7,'C',1,'J',11,'R','D','B',
   '$','F','I','L','T','E','R','S',0,'G',58,59,61,23,0,15,'R','D',
   'B','$','D','E','S','C','R','I','P','T','I','O','N',57,47,23,
   0,15,'R','D','B','$','S','Y','S','T','E','M','_','F','L','A',
   'G',21,8,0,0,0,0,0,61,23,0,15,'R','D','B','$','S','Y','S','T',
   'E','M','_','F','L','A','G','F',1,'H',23,0,17,'R','D','B','$',
   'F','U','N','C','T','I','O','N','_','N','A','M','E',-1,14,0,
   2,1,23,0,15,'R','D','B','$','D','E','S','C','R','I','P','T',
   'I','O','N',25,0,0,0,1,23,0,17,'R','D','B','$','F','U','N','C',
   'T','I','O','N','_','N','A','M','E',25,0,1,0,1,21,8,0,1,0,0,
   0,25,0,2,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_556 */

static isc_req_handle
   isc_561 = 0;		/* request handle */

static const short
   isc_562l = 208;
static const char
   isc_562 [] = {
   4,2,4,0,3,0,41,3,0,32,0,9,0,7,0,2,7,'C',1,'J',13,'R','D','B',
   '$','F','U','N','C','T','I','O','N','S',0,'G',58,59,61,23,0,
   15,'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N',
   57,47,23,0,15,'R','D','B','$','S','Y','S','T','E','M','_','F',
   'L','A','G',21,8,0,0,0,0,0,61,23,0,15,'R','D','B','$','S','Y',
   'S','T','E','M','_','F','L','A','G','F',1,'H',23,0,17,'R','D',
   'B','$','F','U','N','C','T','I','O','N','_','N','A','M','E',
   -1,14,0,2,1,23,0,17,'R','D','B','$','F','U','N','C','T','I',
   'O','N','_','N','A','M','E',25,0,0,0,1,23,0,15,'R','D','B','$',
   'D','E','S','C','R','I','P','T','I','O','N',25,0,1,0,1,21,8,
   0,1,0,0,0,25,0,2,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,2,0,-1,-1,'L'
   
   };	/* end of blr string for request isc_562 */

static isc_req_handle
   isc_567 = 0;		/* request handle */

static const short
   isc_568l = 205;
static const char
   isc_568 [] = {
   4,2,4,0,3,0,9,0,41,3,0,32,0,7,0,2,7,'C',1,'J',12,'R','D','B',
   '$','T','R','I','G','G','E','R','S',0,'G',58,59,61,23,0,15,'R',
   'D','B','$','D','E','S','C','R','I','P','T','I','O','N',57,47,
   23,0,15,'R','D','B','$','S','Y','S','T','E','M','_','F','L',
   'A','G',21,8,0,0,0,0,0,61,23,0,15,'R','D','B','$','S','Y','S',
   'T','E','M','_','F','L','A','G','F',1,'H',23,0,16,'R','D','B',
   '$','T','R','I','G','G','E','R','_','N','A','M','E',-1,14,0,
   2,1,23,0,15,'R','D','B','$','D','E','S','C','R','I','P','T',
   'I','O','N',25,0,0,0,1,23,0,16,'R','D','B','$','T','R','I','G',
   'G','E','R','_','N','A','M','E',25,0,1,0,1,21,8,0,1,0,0,0,25,
   0,2,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_568 */

static isc_req_handle
   isc_573 = 0;		/* request handle */

static const short
   isc_574l = 236;
static const char
   isc_574 [] = {
   4,2,4,1,3,0,9,0,41,3,0,32,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,
   'C',1,'J',24,'R','D','B','$','P','R','O','C','E','D','U','R',
   'E','_','P','A','R','A','M','E','T','E','R','S',0,'G',58,47,
   23,0,18,'R','D','B','$','P','R','O','C','E','D','U','R','E',
   '_','N','A','M','E',25,0,0,0,59,61,23,0,15,'R','D','B','$','D',
   'E','S','C','R','I','P','T','I','O','N','F',2,'H',23,0,18,'R',
   'D','B','$','P','A','R','A','M','E','T','E','R','_','T','Y',
   'P','E','H',23,0,20,'R','D','B','$','P','A','R','A','M','E',
   'T','E','R','_','N','U','M','B','E','R',-1,14,1,2,1,23,0,15,
   'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N',
   25,1,0,0,1,23,0,18,'R','D','B','$','P','A','R','A','M','E','T',
   'E','R','_','N','A','M','E',25,1,1,0,1,21,8,0,1,0,0,0,25,1,2,
   0,-1,14,1,1,21,8,0,0,0,0,0,25,1,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_574 */

static isc_req_handle
   isc_581 = 0;		/* request handle */

static const short
   isc_582l = 194;
static const char
   isc_582 [] = {
   4,2,4,0,4,0,41,3,0,32,0,9,0,7,0,7,0,2,7,'C',1,'J',14,'R','D',
   'B','$','P','R','O','C','E','D','U','R','E','S',0,'G',57,47,
   23,0,15,'R','D','B','$','S','Y','S','T','E','M','_','F','L',
   'A','G',21,8,0,0,0,0,0,61,23,0,15,'R','D','B','$','S','Y','S',
   'T','E','M','_','F','L','A','G','F',1,'H',23,0,18,'R','D','B',
   '$','P','R','O','C','E','D','U','R','E','_','N','A','M','E',
   -1,14,0,2,1,23,0,18,'R','D','B','$','P','R','O','C','E','D',
   'U','R','E','_','N','A','M','E',25,0,0,0,1,23,0,15,'R','D','B',
   '$','D','E','S','C','R','I','P','T','I','O','N',41,0,1,0,3,0,
   1,21,8,0,1,0,0,0,25,0,2,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,2,0,
   -1,-1,'L'
   };	/* end of blr string for request isc_582 */

static isc_req_handle
   isc_588 = 0;		/* request handle */

static const short
   isc_589l = 202;
static const char
   isc_589 [] = {
   4,2,4,1,3,0,9,0,41,3,0,32,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,
   'C',1,'J',19,'R','D','B','$','R','E','L','A','T','I','O','N',
   '_','F','I','E','L','D','S',0,'G',58,47,23,0,17,'R','D','B',
   '$','R','E','L','A','T','I','O','N','_','N','A','M','E',25,0,
   0,0,59,61,23,0,15,'R','D','B','$','D','E','S','C','R','I','P',
   'T','I','O','N','F',1,'H',23,0,18,'R','D','B','$','F','I','E',
   'L','D','_','P','O','S','I','T','I','O','N',-1,14,1,2,1,23,0,
   15,'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N',
   25,1,0,0,1,23,0,14,'R','D','B','$','F','I','E','L','D','_','N',
   'A','M','E',25,1,1,0,1,21,8,0,1,0,0,0,25,1,2,0,-1,14,1,1,21,
   8,0,0,0,0,0,25,1,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_589 */

static isc_req_handle
   isc_596 = 0;		/* request handle */

static const short
   isc_597l = 209;
static const char
   isc_597 [] = {
   4,2,4,0,4,0,41,3,0,32,0,9,0,7,0,7,0,2,7,'C',1,'J',13,'R','D',
   'B','$','R','E','L','A','T','I','O','N','S',0,'G',58,59,61,23,
   0,12,'R','D','B','$','V','I','E','W','_','B','L','R',57,47,23,
   0,15,'R','D','B','$','S','Y','S','T','E','M','_','F','L','A',
   'G',21,8,0,0,0,0,0,61,23,0,15,'R','D','B','$','S','Y','S','T',
   'E','M','_','F','L','A','G','F',1,'H',23,0,17,'R','D','B','$',
   'R','E','L','A','T','I','O','N','_','N','A','M','E',-1,14,0,
   2,1,23,0,17,'R','D','B','$','R','E','L','A','T','I','O','N',
   '_','N','A','M','E',25,0,0,0,1,23,0,15,'R','D','B','$','D','E',
   'S','C','R','I','P','T','I','O','N',41,0,1,0,3,0,1,21,8,0,1,
   0,0,0,25,0,2,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_597 */

static isc_req_handle
   isc_603 = 0;		/* request handle */

static const short
   isc_604l = 202;
static const char
   isc_604 [] = {
   4,2,4,1,3,0,9,0,41,3,0,32,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,
   'C',1,'J',19,'R','D','B','$','R','E','L','A','T','I','O','N',
   '_','F','I','E','L','D','S',0,'G',58,47,23,0,17,'R','D','B',
   '$','R','E','L','A','T','I','O','N','_','N','A','M','E',25,0,
   0,0,59,61,23,0,15,'R','D','B','$','D','E','S','C','R','I','P',
   'T','I','O','N','F',1,'H',23,0,18,'R','D','B','$','F','I','E',
   'L','D','_','P','O','S','I','T','I','O','N',-1,14,1,2,1,23,0,
   15,'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N',
   25,1,0,0,1,23,0,14,'R','D','B','$','F','I','E','L','D','_','N',
   'A','M','E',25,1,1,0,1,21,8,0,1,0,0,0,25,1,2,0,-1,14,1,1,21,
   8,0,0,0,0,0,25,1,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_604 */

static isc_req_handle
   isc_611 = 0;		/* request handle */

static const short
   isc_612l = 208;
static const char
   isc_612 [] = {
   4,2,4,0,4,0,41,3,0,32,0,9,0,7,0,7,0,2,7,'C',1,'J',13,'R','D',
   'B','$','R','E','L','A','T','I','O','N','S',0,'G',58,61,23,0,
   12,'R','D','B','$','V','I','E','W','_','B','L','R',57,47,23,
   0,15,'R','D','B','$','S','Y','S','T','E','M','_','F','L','A',
   'G',21,8,0,0,0,0,0,61,23,0,15,'R','D','B','$','S','Y','S','T',
   'E','M','_','F','L','A','G','F',1,'H',23,0,17,'R','D','B','$',
   'R','E','L','A','T','I','O','N','_','N','A','M','E',-1,14,0,
   2,1,23,0,17,'R','D','B','$','R','E','L','A','T','I','O','N',
   '_','N','A','M','E',25,0,0,0,1,23,0,15,'R','D','B','$','D','E',
   'S','C','R','I','P','T','I','O','N',41,0,1,0,3,0,1,21,8,0,1,
   0,0,0,25,0,2,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_612 */

static isc_req_handle
   isc_618 = 0;		/* request handle */

static const short
   isc_619l = 251;
static const char
   isc_619 [] = {
   4,2,4,0,3,0,9,0,41,3,0,32,0,7,0,2,7,'C',1,'J',10,'R','D','B',
   '$','F','I','E','L','D','S',0,'G',58,59,106,23,0,14,'R','D',
   'B','$','F','I','E','L','D','_','N','A','M','E',21,15,3,0,5,
   0,'R','D','B','$',43,21,15,3,0,15,0,43,61,91,48,45,57,93,91,
   48,45,57,93,42,32,42,58,57,47,23,0,15,'R','D','B','$','S','Y',
   'S','T','E','M','_','F','L','A','G',21,8,0,0,0,0,0,61,23,0,15,
   'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G',
   59,61,23,0,15,'R','D','B','$','D','E','S','C','R','I','P','T',
   'I','O','N','F',1,'H',23,0,14,'R','D','B','$','F','I','E','L',
   'D','_','N','A','M','E',-1,14,0,2,1,23,0,15,'R','D','B','$',
   'D','E','S','C','R','I','P','T','I','O','N',25,0,0,0,1,23,0,
   14,'R','D','B','$','F','I','E','L','D','_','N','A','M','E',25,
   0,1,0,1,21,8,0,1,0,0,0,25,0,2,0,-1,14,0,1,21,8,0,0,0,0,0,25,
   0,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_619 */

static isc_req_handle
   isc_624 = 0;		/* request handle */

static const short
   isc_625l = 115;
static const char
   isc_625 [] = {
   4,2,4,0,2,0,9,0,7,0,2,7,'C',1,'J',12,'R','D','B','$','D','A',
   'T','A','B','A','S','E',0,'D',21,8,0,1,0,0,0,'G',59,61,23,0,
   15,'R','D','B','$','D','E','S','C','R','I','P','T','I','O','N',
   -1,14,0,2,1,23,0,15,'R','D','B','$','D','E','S','C','R','I',
   'P','T','I','O','N',25,0,0,0,1,21,8,0,1,0,0,0,25,0,1,0,-1,14,
   0,1,21,8,0,0,0,0,0,25,0,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_625 */

static isc_req_handle
   isc_629 = 0;		/* request handle */

static const short
   isc_630l = 366;
static const char
   isc_630 [] = {
   4,2,4,0,11,0,9,0,41,3,0,32,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,
   7,0,7,0,7,0,7,0,7,0,2,7,'C',2,'J',14,'R','D','B','$','C','O',
   'L','L','A','T','I','O','N','S',0,'J',18,'R','D','B','$','C',
   'H','A','R','A','C','T','E','R','_','S','E','T','S',1,'G',47,
   23,1,20,'R','D','B','$','C','H','A','R','A','C','T','E','R',
   '_','S','E','T','_','I','D',23,0,20,'R','D','B','$','C','H',
   'A','R','A','C','T','E','R','_','S','E','T','_','I','D','F',
   1,'H',23,0,18,'R','D','B','$','C','O','L','L','A','T','I','O',
   'N','_','N','A','M','E',-1,14,0,2,1,23,0,23,'R','D','B','$',
   'S','P','E','C','I','F','I','C','_','A','T','T','R','I','B',
   'U','T','E','S',41,0,0,0,5,0,1,23,0,23,'R','D','B','$','B','A',
   'S','E','_','C','O','L','L','A','T','I','O','N','_','N','A',
   'M','E',41,0,1,0,8,0,1,23,1,22,'R','D','B','$','C','H','A','R',
   'A','C','T','E','R','_','S','E','T','_','N','A','M','E',25,0,
   2,0,1,23,0,18,'R','D','B','$','C','O','L','L','A','T','I','O',
   'N','_','N','A','M','E',25,0,3,0,1,21,8,0,1,0,0,0,25,0,4,0,1,
   23,0,24,'R','D','B','$','C','O','L','L','A','T','I','O','N',
   '_','A','T','T','R','I','B','U','T','E','S',41,0,7,0,6,0,1,23,
   0,15,'R','D','B','$','S','Y','S','T','E','M','_','F','L','A',
   'G',41,0,10,0,9,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,4,0,-1,-1,'L'
   
   };	/* end of blr string for request isc_630 */

static isc_req_handle
   isc_643 = 0;		/* request handle */

static const short
   isc_644l = 305;
static const char
   isc_644 [] = {
   4,2,4,1,4,0,9,0,41,3,0,32,0,7,0,7,0,4,0,2,0,41,3,0,32,0,7,0,
   12,0,2,7,'C',2,'J',12,'R','D','B','$','T','R','I','G','G','E',
   'R','S',0,'J',21,'R','D','B','$','C','H','E','C','K','_','C',
   'O','N','S','T','R','A','I','N','T','S',1,'G',58,47,23,0,16,
   'R','D','B','$','T','R','I','G','G','E','R','_','T','Y','P',
   'E',21,8,0,1,0,0,0,58,47,23,0,16,'R','D','B','$','T','R','I',
   'G','G','E','R','_','N','A','M','E',23,1,16,'R','D','B','$',
   'T','R','I','G','G','E','R','_','N','A','M','E',58,47,23,0,15,
   'R','D','B','$','S','Y','S','T','E','M','_','F','L','A','G',
   25,0,1,0,47,23,0,17,'R','D','B','$','R','E','L','A','T','I',
   'O','N','_','N','A','M','E',25,0,0,0,'F',1,'H',23,1,19,'R','D',
   'B','$','C','O','N','S','T','R','A','I','N','T','_','N','A',
   'M','E',-1,14,1,2,1,23,0,18,'R','D','B','$','T','R','I','G',
   'G','E','R','_','S','O','U','R','C','E',41,1,0,0,3,0,1,23,1,
   19,'R','D','B','$','C','O','N','S','T','R','A','I','N','T','_',
   'N','A','M','E',25,1,1,0,1,21,8,0,1,0,0,0,25,1,2,0,-1,14,1,1,
   21,8,0,0,0,0,0,25,1,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_644 */

static isc_req_handle
   isc_653 = 0;		/* request handle */

static const short
   isc_654l = 157;
static const char
   isc_654 [] = {
   4,2,4,1,5,0,7,0,7,0,7,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,
   'C',1,'J',10,'R','D','B','$','F','I','E','L','D','S',0,'G',47,
   23,0,14,'R','D','B','$','F','I','E','L','D','_','N','A','M',
   'E',25,0,0,0,-1,14,1,2,1,21,8,0,1,0,0,0,25,1,0,0,1,23,0,16,'R',
   'D','B','$','C','O','L','L','A','T','I','O','N','_','I','D',
   41,1,2,0,1,0,1,23,0,20,'R','D','B','$','C','H','A','R','A','C',
   'T','E','R','_','S','E','T','_','I','D',41,1,4,0,3,0,-1,14,1,
   1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_654 */

static isc_req_handle
   isc_663 = 0;		/* request handle */

static const short
   isc_664l = 273;
static const char
   isc_664 [] = {
   4,2,4,1,3,0,7,0,7,0,7,0,4,0,2,0,41,3,0,32,0,41,3,0,32,0,12,0,
   2,7,'C',2,'J',24,'R','D','B','$','P','R','O','C','E','D','U',
   'R','E','_','P','A','R','A','M','E','T','E','R','S',0,'J',19,
   'R','D','B','$','R','E','L','A','T','I','O','N','_','F','I',
   'E','L','D','S',1,'G',58,47,23,0,18,'R','D','B','$','P','R',
   'O','C','E','D','U','R','E','_','N','A','M','E',25,0,1,0,58,
   47,23,0,18,'R','D','B','$','P','A','R','A','M','E','T','E','R',
   '_','N','A','M','E',25,0,0,0,58,47,23,1,17,'R','D','B','$','R',
   'E','L','A','T','I','O','N','_','N','A','M','E',23,0,17,'R',
   'D','B','$','R','E','L','A','T','I','O','N','_','N','A','M',
   'E',47,23,1,14,'R','D','B','$','F','I','E','L','D','_','N','A',
   'M','E',23,0,14,'R','D','B','$','F','I','E','L','D','_','N',
   'A','M','E',-1,14,1,2,1,21,8,0,1,0,0,0,25,1,0,0,1,23,1,16,'R',
   'D','B','$','C','O','L','L','A','T','I','O','N','_','I','D',
   41,1,2,0,1,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_664 */

static isc_req_handle
   isc_672 = 0;		/* request handle */

static const short
   isc_673l = 173;
static const char
   isc_673 [] = {
   4,2,4,1,3,0,7,0,7,0,7,0,4,0,2,0,41,3,0,32,0,41,3,0,32,0,12,0,
   2,7,'C',1,'J',24,'R','D','B','$','P','R','O','C','E','D','U',
   'R','E','_','P','A','R','A','M','E','T','E','R','S',0,'G',58,
   47,23,0,18,'R','D','B','$','P','R','O','C','E','D','U','R','E',
   '_','N','A','M','E',25,0,1,0,47,23,0,18,'R','D','B','$','P',
   'A','R','A','M','E','T','E','R','_','N','A','M','E',25,0,0,0,
   -1,14,1,2,1,21,8,0,1,0,0,0,25,1,0,0,1,23,0,16,'R','D','B','$',
   'C','O','L','L','A','T','I','O','N','_','I','D',41,1,2,0,1,0,
   -1,14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_673 */

static isc_req_handle
   isc_681 = 0;		/* request handle */

static const short
   isc_682l = 320;
static const char
   isc_682 [] = {
   4,2,4,1,7,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,7,0,7,0,7,0,4,0,
   2,0,41,3,0,32,0,41,3,0,32,0,12,0,2,7,'C',2,'J',24,'R','D','B',
   '$','P','R','O','C','E','D','U','R','E','_','P','A','R','A',
   'M','E','T','E','R','S',0,'J',10,'R','D','B','$','F','I','E',
   'L','D','S',1,'G',58,47,23,0,18,'R','D','B','$','P','A','R',
   'A','M','E','T','E','R','_','N','A','M','E',25,0,1,0,58,47,23,
   0,18,'R','D','B','$','P','R','O','C','E','D','U','R','E','_',
   'N','A','M','E',25,0,0,0,47,23,0,16,'R','D','B','$','F','I',
   'E','L','D','_','S','O','U','R','C','E',23,1,14,'R','D','B',
   '$','F','I','E','L','D','_','N','A','M','E',-1,14,1,2,1,23,0,
   18,'R','D','B','$','P','A','R','A','M','E','T','E','R','_','N',
   'A','M','E',25,1,0,0,1,23,0,18,'R','D','B','$','P','R','O','C',
   'E','D','U','R','E','_','N','A','M','E',25,1,1,0,1,21,8,0,1,
   0,0,0,25,1,2,0,1,23,1,16,'R','D','B','$','C','O','L','L','A',
   'T','I','O','N','_','I','D',41,1,4,0,3,0,1,23,1,20,'R','D','B',
   '$','C','H','A','R','A','C','T','E','R','_','S','E','T','_',
   'I','D',41,1,6,0,5,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,2,0,-1,-1,
   'L'
   };	/* end of blr string for request isc_682 */

static isc_req_handle
   isc_694 = 0;		/* request handle */

static const short
   isc_695l = 157;
static const char
   isc_695 [] = {
   4,2,4,1,5,0,7,0,7,0,7,0,7,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,
   'C',1,'J',10,'R','D','B','$','F','I','E','L','D','S',0,'G',47,
   23,0,14,'R','D','B','$','F','I','E','L','D','_','N','A','M',
   'E',25,0,0,0,-1,14,1,2,1,21,8,0,1,0,0,0,25,1,0,0,1,23,0,16,'R',
   'D','B','$','C','O','L','L','A','T','I','O','N','_','I','D',
   41,1,2,0,1,0,1,23,0,20,'R','D','B','$','C','H','A','R','A','C',
   'T','E','R','_','S','E','T','_','I','D',41,1,4,0,3,0,-1,14,1,
   1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_695 */

static isc_req_handle
   isc_704 = 0;		/* request handle */

static const short
   isc_705l = 278;
static const char
   isc_705 [] = {
   4,2,4,1,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,4,0,2,0,41,3,0,32,0,
   41,3,0,32,0,12,0,2,7,'C',2,'J',19,'R','D','B','$','R','E','L',
   'A','T','I','O','N','_','F','I','E','L','D','S',0,'J',10,'R',
   'D','B','$','F','I','E','L','D','S',1,'G',58,47,23,0,14,'R',
   'D','B','$','F','I','E','L','D','_','N','A','M','E',25,0,1,0,
   58,47,23,0,17,'R','D','B','$','R','E','L','A','T','I','O','N',
   '_','N','A','M','E',25,0,0,0,47,23,0,16,'R','D','B','$','F',
   'I','E','L','D','_','S','O','U','R','C','E',23,1,14,'R','D',
   'B','$','F','I','E','L','D','_','N','A','M','E',-1,14,1,2,1,
   21,8,0,1,0,0,0,25,1,0,0,1,23,1,16,'R','D','B','$','C','O','L',
   'L','A','T','I','O','N','_','I','D',41,1,2,0,1,0,1,23,0,16,'R',
   'D','B','$','C','O','L','L','A','T','I','O','N','_','I','D',
   41,1,4,0,3,0,1,23,1,20,'R','D','B','$','C','H','A','R','A','C',
   'T','E','R','_','S','E','T','_','I','D',41,1,6,0,5,0,-1,14,1,
   1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_705 */

static isc_req_handle
   isc_717 = 0;		/* request handle */

static const short
   isc_718l = 164;
static const char
   isc_718 [] = {
   4,2,4,1,2,0,41,3,0,32,0,7,0,4,0,1,0,7,0,12,0,2,7,'C',1,'J',13,
   'R','D','B','$','R','E','L','A','T','I','O','N','S',0,'G',58,
   47,23,0,15,'R','D','B','$','S','Y','S','T','E','M','_','F','L',
   'A','G',25,0,0,0,61,23,0,12,'R','D','B','$','V','I','E','W',
   '_','B','L','R','F',1,'H',23,0,17,'R','D','B','$','R','E','L',
   'A','T','I','O','N','_','N','A','M','E',-1,14,1,2,1,23,0,17,
   'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A',
   'M','E',25,1,0,0,1,21,8,0,1,0,0,0,25,1,1,0,-1,14,1,1,21,8,0,
   0,0,0,0,25,1,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_718 */

static isc_req_handle
   isc_724 = 0;		/* request handle */

static const short
   isc_725l = 133;
static const char
   isc_725 [] = {
   4,2,4,0,2,0,41,3,0,32,0,7,0,2,7,'C',1,'J',13,'R','D','B','$',
   'R','E','L','A','T','I','O','N','S',0,'G',59,61,23,0,12,'R',
   'D','B','$','V','I','E','W','_','B','L','R','F',1,'H',23,0,17,
   'R','D','B','$','R','E','L','A','T','I','O','N','_','N','A',
   'M','E',-1,14,0,2,1,23,0,17,'R','D','B','$','R','E','L','A',
   'T','I','O','N','_','N','A','M','E',25,0,0,0,1,21,8,0,1,0,0,
   0,25,0,1,0,-1,14,0,1,21,8,0,0,0,0,0,25,0,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_725 */

static isc_req_handle
   isc_729 = 0;		/* request handle */

static const short
   isc_730l = 107;
static const char
   isc_730 [] = {
   4,2,4,1,1,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',13,'R',
   'D','B','$','R','E','L','A','T','I','O','N','S',0,'D',21,8,0,
   1,0,0,0,'G',47,23,0,17,'R','D','B','$','R','E','L','A','T','I',
   'O','N','_','N','A','M','E',25,0,0,0,-1,14,1,2,1,21,8,0,1,0,
   0,0,25,1,0,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_730 */

static isc_req_handle
   isc_735 = 0;		/* request handle */

static const short
   isc_736l = 99;
static const char
   isc_736 [] = {
   4,2,4,1,1,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',9,'R',
   'D','B','$','R','O','L','E','S',0,'D',21,8,0,1,0,0,0,'G',47,
   23,0,13,'R','D','B','$','R','O','L','E','_','N','A','M','E',
   25,0,0,0,-1,14,1,2,1,21,8,0,1,0,0,0,25,1,0,0,-1,14,1,1,21,8,
   0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_736 */

static isc_req_handle
   isc_741 = 0;		/* request handle */

static const short
   isc_742l = 109;
static const char
   isc_742 [] = {
   4,2,4,1,1,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',14,'R',
   'D','B','$','P','R','O','C','E','D','U','R','E','S',0,'D',21,
   8,0,1,0,0,0,'G',47,23,0,18,'R','D','B','$','P','R','O','C','E',
   'D','U','R','E','_','N','A','M','E',25,0,0,0,-1,14,1,2,1,21,
   8,0,1,0,0,0,25,1,0,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,
   'L'
   };	/* end of blr string for request isc_742 */

static isc_req_handle
   isc_747 = 0;		/* request handle */

static const short
   isc_748l = 107;
static const char
   isc_748 [] = {
   4,2,4,1,1,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',13,'R',
   'D','B','$','R','E','L','A','T','I','O','N','S',0,'D',21,8,0,
   1,0,0,0,'G',47,23,0,17,'R','D','B','$','R','E','L','A','T','I',
   'O','N','_','N','A','M','E',25,0,0,0,-1,14,1,2,1,21,8,0,1,0,
   0,0,25,1,0,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_748 */

static isc_req_handle
   isc_753 = 0;		/* request handle */

static const short
   isc_754l = 107;
static const char
   isc_754 [] = {
   4,2,4,1,1,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',13,'R',
   'D','B','$','R','E','L','A','T','I','O','N','S',0,'D',21,8,0,
   1,0,0,0,'G',47,23,0,17,'R','D','B','$','R','E','L','A','T','I',
   'O','N','_','N','A','M','E',25,0,0,0,-1,14,1,2,1,21,8,0,1,0,
   0,0,25,1,0,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_754 */

static isc_req_handle
   isc_759 = 0;		/* request handle */

static const short
   isc_760l = 285;
static const char
   isc_760 [] = {
   4,2,4,1,5,0,41,3,0,32,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,4,0,
   2,0,7,0,7,0,12,0,2,7,'C',1,'J',19,'R','D','B','$','U','S','E',
   'R','_','P','R','I','V','I','L','E','G','E','S',0,'G',58,47,
   23,0,15,'R','D','B','$','O','B','J','E','C','T','_','T','Y',
   'P','E',25,0,1,0,58,47,23,0,13,'R','D','B','$','U','S','E','R',
   '_','T','Y','P','E',25,0,0,0,47,23,0,13,'R','D','B','$','P',
   'R','I','V','I','L','E','G','E',21,15,3,0,1,0,'M','F',2,'H',
   23,0,17,'R','D','B','$','R','E','L','A','T','I','O','N','_',
   'N','A','M','E','H',23,0,8,'R','D','B','$','U','S','E','R',-1,
   14,1,2,1,23,0,11,'R','D','B','$','G','R','A','N','T','O','R',
   25,1,0,0,1,23,0,17,'R','D','B','$','R','E','L','A','T','I','O',
   'N','_','N','A','M','E',25,1,1,0,1,23,0,8,'R','D','B','$','U',
   'S','E','R',25,1,2,0,1,21,8,0,1,0,0,0,25,1,3,0,1,23,0,16,'R',
   'D','B','$','G','R','A','N','T','_','O','P','T','I','O','N',
   25,1,4,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,3,0,-1,-1,'L'
   };	/* end of blr string for request isc_760 */

static isc_req_handle
   isc_770 = 0;		/* request handle */

static const short
   isc_771l = 295;
static const char
   isc_771 [] = {
   4,2,4,1,5,0,41,3,0,32,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,4,0,
   3,0,41,3,0,32,0,7,0,7,0,12,0,2,7,'C',1,'J',19,'R','D','B','$',
   'U','S','E','R','_','P','R','I','V','I','L','E','G','E','S',
   0,'G',58,47,23,0,15,'R','D','B','$','O','B','J','E','C','T',
   '_','T','Y','P','E',25,0,2,0,58,47,23,0,13,'R','D','B','$','U',
   'S','E','R','_','T','Y','P','E',25,0,1,0,58,47,23,0,17,'R','D',
   'B','$','R','E','L','A','T','I','O','N','_','N','A','M','E',
   25,0,0,0,47,23,0,13,'R','D','B','$','P','R','I','V','I','L',
   'E','G','E',21,15,3,0,1,0,'M','F',1,'H',23,0,8,'R','D','B','$',
   'U','S','E','R',-1,14,1,2,1,23,0,11,'R','D','B','$','G','R',
   'A','N','T','O','R',25,1,0,0,1,23,0,8,'R','D','B','$','U','S',
   'E','R',25,1,1,0,1,23,0,17,'R','D','B','$','R','E','L','A','T',
   'I','O','N','_','N','A','M','E',25,1,2,0,1,21,8,0,1,0,0,0,25,
   1,3,0,1,23,0,16,'R','D','B','$','G','R','A','N','T','_','O',
   'P','T','I','O','N',25,1,4,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,3,
   0,-1,-1,'L'
   };	/* end of blr string for request isc_771 */

static isc_req_handle
   isc_782 = 0;		/* request handle */

static const short
   isc_783l = 99;
static const char
   isc_783 [] = {
   4,2,4,1,1,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',9,'R',
   'D','B','$','R','O','L','E','S',0,'D',21,8,0,1,0,0,0,'G',47,
   23,0,13,'R','D','B','$','R','O','L','E','_','N','A','M','E',
   25,0,0,0,-1,14,1,2,1,21,8,0,1,0,0,0,25,1,0,0,-1,14,1,1,21,8,
   0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_783 */

static isc_req_handle
   isc_788 = 0;		/* request handle */

static const short
   isc_789l = 381;
static const char
   isc_789 [] = {
   4,2,4,1,5,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,7,0,4,0,3,0,41,3,
   0,32,0,41,3,0,32,0,7,0,12,0,2,7,'C',2,'J',19,'R','D','B','$',
   'U','S','E','R','_','P','R','I','V','I','L','E','G','E','S',
   0,'J',14,'R','D','B','$','P','R','O','C','E','D','U','R','E',
   'S',1,'G',58,47,23,0,15,'R','D','B','$','O','B','J','E','C',
   'T','_','T','Y','P','E',25,0,2,0,58,47,23,0,17,'R','D','B','$',
   'R','E','L','A','T','I','O','N','_','N','A','M','E',25,0,1,0,
   58,47,23,1,18,'R','D','B','$','P','R','O','C','E','D','U','R',
   'E','_','N','A','M','E',25,0,0,0,58,47,23,0,13,'R','D','B','$',
   'P','R','I','V','I','L','E','G','E',21,15,3,0,1,0,'X',48,23,
   1,14,'R','D','B','$','O','W','N','E','R','_','N','A','M','E',
   23,0,8,'R','D','B','$','U','S','E','R','F',3,'H',23,0,8,'R',
   'D','B','$','U','S','E','R','H',23,0,14,'R','D','B','$','F',
   'I','E','L','D','_','N','A','M','E','H',23,0,16,'R','D','B',
   '$','G','R','A','N','T','_','O','P','T','I','O','N',-1,14,1,
   2,1,23,0,11,'R','D','B','$','G','R','A','N','T','O','R',25,1,
   0,0,1,23,0,8,'R','D','B','$','U','S','E','R',25,1,1,0,1,21,8,
   0,1,0,0,0,25,1,2,0,1,23,0,16,'R','D','B','$','G','R','A','N',
   'T','_','O','P','T','I','O','N',25,1,3,0,1,23,0,13,'R','D','B',
   '$','U','S','E','R','_','T','Y','P','E',25,1,4,0,-1,14,1,1,21,
   8,0,0,0,0,0,25,1,2,0,-1,-1,'L'
   };	/* end of blr string for request isc_789 */

static isc_req_handle
   isc_800 = 0;		/* request handle */

static const short
   isc_801l = 109;
static const char
   isc_801 [] = {
   4,2,4,1,1,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',14,'R',
   'D','B','$','P','R','O','C','E','D','U','R','E','S',0,'D',21,
   8,0,1,0,0,0,'G',47,23,0,18,'R','D','B','$','P','R','O','C','E',
   'D','U','R','E','_','N','A','M','E',25,0,0,0,-1,14,1,2,1,21,
   8,0,1,0,0,0,25,1,0,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,
   'L'
   };	/* end of blr string for request isc_801 */

static isc_req_handle
   isc_806 = 0;		/* request handle */

static const short
   isc_807l = 414;
static const char
   isc_807 [] = {
   4,2,4,1,9,0,41,3,0,32,0,41,3,0,32,0,41,3,0,32,0,7,0,7,0,7,0,
   7,0,7,0,41,0,0,7,0,4,0,2,0,41,3,0,32,0,41,3,0,32,0,12,0,2,7,
   'C',2,'J',19,'R','D','B','$','U','S','E','R','_','P','R','I',
   'V','I','L','E','G','E','S',0,'J',13,'R','D','B','$','R','E',
   'L','A','T','I','O','N','S',1,'G',58,47,23,0,17,'R','D','B',
   '$','R','E','L','A','T','I','O','N','_','N','A','M','E',25,0,
   1,0,58,47,23,1,17,'R','D','B','$','R','E','L','A','T','I','O',
   'N','_','N','A','M','E',25,0,0,0,58,48,23,0,13,'R','D','B','$',
   'P','R','I','V','I','L','E','G','E',21,15,3,0,1,0,'M',48,23,
   1,14,'R','D','B','$','O','W','N','E','R','_','N','A','M','E',
   23,0,8,'R','D','B','$','U','S','E','R','F',3,'H',23,0,8,'R',
   'D','B','$','U','S','E','R','H',23,0,14,'R','D','B','$','F',
   'I','E','L','D','_','N','A','M','E','H',23,0,16,'R','D','B',
   '$','G','R','A','N','T','_','O','P','T','I','O','N',-1,14,1,
   2,1,23,0,11,'R','D','B','$','G','R','A','N','T','O','R',25,1,
   0,0,1,23,0,14,'R','D','B','$','F','I','E','L','D','_','N','A',
   'M','E',41,1,1,0,5,0,1,23,0,8,'R','D','B','$','U','S','E','R',
   25,1,2,0,1,21,8,0,1,0,0,0,25,1,3,0,1,23,0,13,'R','D','B','$',
   'U','S','E','R','_','T','Y','P','E',25,1,4,0,1,23,0,16,'R','D',
   'B','$','G','R','A','N','T','_','O','P','T','I','O','N',41,1,
   7,0,6,0,1,23,0,13,'R','D','B','$','P','R','I','V','I','L','E',
   'G','E',25,1,8,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,3,0,-1,-1,'L'
   
   };	/* end of blr string for request isc_807 */

static isc_req_handle
   isc_821 = 0;		/* request handle */

static const short
   isc_822l = 107;
static const char
   isc_822 [] = {
   4,2,4,1,1,0,7,0,4,0,1,0,41,3,0,32,0,12,0,2,7,'C',1,'J',13,'R',
   'D','B','$','R','E','L','A','T','I','O','N','S',0,'D',21,8,0,
   1,0,0,0,'G',47,23,0,17,'R','D','B','$','R','E','L','A','T','I',
   'O','N','_','N','A','M','E',25,0,0,0,-1,14,1,2,1,21,8,0,1,0,
   0,0,25,1,0,0,-1,14,1,1,21,8,0,0,0,0,0,25,1,0,0,-1,-1,'L'
   };	/* end of blr string for request isc_822 */

static isc_req_handle
   isc_827 = 0;		/* request handle */

static const short
   isc_828l = 133;
static const char
   isc_828 [] = {
   4,2,4,0,3,0,41,3,0,32,0,7,0,7,0,2,7,'C',1,'J',13,'R','D','B',
   '$','R','E','L','A','T','I','O','N','S',0,'G',47,23,0,17,'R',
   'D','B','$','R','E','L','A','T','I','O','N','_','N','A','M',
   'E',21,15,3,0,12,0,'R','D','B','$','D','A','T','A','B','A','S',
   'E',-1,14,0,2,1,23,0,14,'R','D','B','$','O','W','N','E','R',
   '_','N','A','M','E',41,0,0,0,2,0,1,21,8,0,1,0,0,0,25,0,1,0,-1,
   14,0,1,21,8,0,0,0,0,0,25,0,1,0,-1,-1,'L'
   };	/* end of blr string for request isc_828 */


#define gds_blob_null	isc_blob_null	/* compatibility symbols */
#define gds_status	isc_status
#define gds_status2	isc_status2
#define gds_array_length	isc_array_length
#define gds_count	isc_count
#define gds_slack	isc_slack
#define gds_utility	isc_utility	/* end of compatibility symbols */

#ifndef isc_version4
    Generate a compile-time error.
    Picking up a V3 include file after preprocessing with V4 GPRE.
#endif

/**** end of GPRE definitions ****/



// This enumeration tell comment-related routines how to behave: for SHOW,
// we present names and text as they are. For EXTRACT, we need to make a valid
// script and escape double quotes in identifiers and single quotes in strings.
enum commentMode {cmmShow, cmmExtract};


static void local_fprintf(void*, const char*);
static void remove_delimited_double_quotes(TEXT*);
static void make_priv_string(USHORT, char*);
static processing_state show_all_tables(SSHORT);
static void show_charsets(const SCHAR*, const SCHAR*, const bool, bool, bool, bool);
static void show_proc_charsets(const SCHAR*, const SCHAR*, const bool, bool, bool);
static processing_state show_check(const SCHAR*);
static processing_state show_collations(const SCHAR*, SSHORT sys_flag, const char* msg = 0, bool compact = false);
static void show_comment(const char* objtype, char* name1, char* name2,
	ISC_QUAD* blobfld, const commentMode showextract, const char* banner);
static processing_state show_comments(const commentMode showextract, const char* banner);
static void show_db();
static processing_state show_dependencies(const char* object);
static processing_state show_dependencies(const char* object, int obj_type);
static processing_state show_dialect();
static processing_state show_domains(const SCHAR*);
static processing_state show_exceptions(const SCHAR*);
static processing_state show_filters(const SCHAR*);
static processing_state show_functions(const SCHAR*, const SSHORT = 0, const char* msg = 0);
static processing_state show_generators(const SCHAR*);
static void show_index(SCHAR*, SCHAR*, const SSHORT, const SSHORT, const SSHORT);
static processing_state show_indices(const SCHAR* const*);
static processing_state show_proc(const SCHAR*);
static processing_state show_role(const SCHAR*);
static processing_state show_secclass(const char* object, const char* opt);
static processing_state show_table(const SCHAR*, bool);
static processing_state show_trigger(const SCHAR*, bool, bool);
static processing_state show_users();

const char* const spaces = "                                ";
static TEXT Print_buffer[512];
static TEXT SQL_identifier[BUFFER_LENGTH128];
static bool reReadDbOwner = true;

// Initialize types

// Keep this array in sync with obj.h in jrd.
static const SCHAR* Object_types[] =
{
	"Table",
	"View",
	"Trigger",
	"Computed column",
	"Validation",
	"Procedure",
	"Expression index",
	"Exception",
	"User",
	"Domain",
	"Index",
	"Count [error if used]",
	"User group",
	"SQL role",
	"Generator",
	"User defined function",
	"Blob filter",	// impossible to have explicit dependencies on it, but...
	"Collation"
};



const SCHAR* Trigger_prefix_types[] =
{
	"BEFORE",			// NTX: keyword
	"AFTER"				// NTX: keyword
};

const SCHAR* Trigger_suffix_types[] =
{
	"",
	"INSERT",			// NTX: keyword
	"UPDATE",			// NTX: keyword
	"DELETE"			// NTX: keyword
};

const SCHAR* Db_trigger_types[] =
{
	"CONNECT",				// NTX: keyword
	"DISCONNECT",			// NTX: keyword
	"TRANSACTION START",	// NTX: keyword
	"TRANSACTION COMMIT",	// NTX: keyword
	"TRANSACTION ROLLBACK"	// NTX: keyword
};


enum priv_flag {
	priv_UNKNOWN	= 1,
	priv_SELECT	= 2,
	priv_INSERT	= 4,
	priv_UPDATE	= 8,
	priv_DELETE	= 16,
	priv_EXECUTE	= 32,
	priv_REFERENCES	= 64
};


static const struct
{
	USHORT priv_flag;
	const char* priv_string;
} privs[] =
{
	{ priv_DELETE, "DELETE"},		// NTX: keyword
	{ priv_EXECUTE, "EXECUTE"},	// NTX: keyword
	{ priv_INSERT, "INSERT"},		// NTX: keyword
	{ priv_SELECT, "SELECT"},		// NTX: keyword
	{ priv_UPDATE, "UPDATE"},		// NTX: keyword
	{ priv_REFERENCES, "REFERENCES"},	// NTX: keyword
	{ 0, NULL}
};

/* strlen of each element above, + strlen(", ") for separators */

const int MAX_PRIV_LIST = (6 + 2 + 7 + 2 + 6 + 2 + 6 + 2 + 6 + 2 + 10 + 1);


static const SCHAR db_dialect_info[] =
{
	isc_info_db_sql_dialect,
	isc_info_end
};

// Added support to display FORCED WRITES status. - PR 27-NOV-2001
// Added support to display transaction info when next_transaction id is fixed.
// Added support to display ODS version. CVC 26-Aug-2004.
static const SCHAR db_items[] =
{
	isc_info_page_size,
	isc_info_db_size_in_pages,
	isc_info_sweep_interval,
	isc_info_limbo,
	isc_info_forced_writes,
	isc_info_oldest_transaction,
	isc_info_oldest_active,
	isc_info_oldest_snapshot,
	isc_info_next_transaction,
	isc_info_ods_version,
	isc_info_ods_minor_version,
#ifdef DEV_BUILD
	isc_info_db_id,
#endif
	isc_info_end
};


/* BPB to force transliteration of any shown system blobs from
 * Database character set (CS_METADATA) to process character set
 * (CS_dynamic).
 * This same BPB is safe to use for both V3 & V4 db's - as
 * a V3 db will ignore the source_ & target_interp values.
 */
static const UCHAR metadata_text_bpb[] =
{
	isc_bpb_version1,
	isc_bpb_source_type, 1, isc_blob_text,
	isc_bpb_target_type, 1, isc_blob_text,
	isc_bpb_source_interp, 1, CS_METADATA,
	isc_bpb_target_interp, 1, CS_dynamic
};

// trigger action helpers

inline int TRIGGER_ACTION_PREFIX(int value)
{
	return (value + 1) & 1;
}

inline int TRIGGER_ACTION_SUFFIX(int value, int slot)
{
	return ((value + 1) >> (slot * 2 - 1)) & 3;
}

const char* trigger_action(int type)
{
	static char buffer[256];

	switch (type & TRIGGER_TYPE_MASK)
	{
	case TRIGGER_TYPE_DML:
		{
			int prefix = TRIGGER_ACTION_PREFIX(type);
			strcpy(buffer, Trigger_prefix_types[prefix]);
			int suffix = TRIGGER_ACTION_SUFFIX(type, 1);
			strcat(buffer, " ");
			strcat(buffer, Trigger_suffix_types[suffix]);
			if ( (suffix = TRIGGER_ACTION_SUFFIX(type, 2)) )
			{
				strcat(buffer, " OR ");
				strcat(buffer, Trigger_suffix_types[suffix]);
			}
			if ( (suffix = TRIGGER_ACTION_SUFFIX(type, 3)) )
			{
				strcat(buffer, " OR ");
				strcat(buffer, Trigger_suffix_types[suffix]);
			}
		}
		break;
	case TRIGGER_TYPE_DB:
		sprintf(buffer, "ON %s", Db_trigger_types[type & ~TRIGGER_TYPE_DB]);
		break;
	default:
		buffer[0] = '\0';
		fb_assert(false);
	}

	return buffer;
}


// *************************
// S H O W _ c o m m e n t s
// *************************
// Extract database comments. Since it's called by the script extraction
// routine, it does nothing for ODS < 11, unless the force option is true.
void SHOW_comments(bool force)
{
	if (isqlGlob.major_ods >= ODS_VERSION11 || force)
	{
		char banner[BUFFER_LENGTH128];
		sprintf(banner, "%s/* Comments for database objects. */%s", NEWLINE, NEWLINE);
		show_comments(cmmExtract, banner);
	}
}


bool SHOW_dbb_parameters(FB_API_HANDLE db_handle,
						 SCHAR* info_buf,
						 const SCHAR* db_itemsL,
						 USHORT item_length,
						 bool translate,
						 const char* separator)
{
/**************************************
 *
 *	S H O W _ d b b _ p a r a m e t e r s
 *
 **************************************
 *
 * Functional description
 *	Show db_info on this database
 *
 *	Arguments:
 *	    db_handle -- database handle
 *	    info_buf -- info_bufput file pointer
 *	    db_itemsL -- list of db_info items to process
 *
 **************************************/
	SCHAR buffer[BUFFER_LENGTH400];
	TEXT msg[MSG_LENGTH];

	ISC_STATUS_ARRAY status_vector;
	if (isc_database_info(status_vector, &db_handle, item_length,
						  db_itemsL, sizeof(buffer), buffer))
	{
		ISQL_errmsg(status_vector);
		return false;
	}

	*info_buf = '\0';
	SCHAR* info = info_buf;
	for (const SCHAR* d = buffer; *d != isc_info_end;)
	{
		SLONG value_out = 0;
		const SCHAR item = *d++;
		const int length = isc_vax_integer(d, 2);
		d += 2;
		/*
		 * This is not the best solution but it fixes the lack of <LF> characters
		 * in Windows ISQL.  This will need to remain until we modify the messages
		 * to remove the '\n' (on the PC its '\n\r').
		 * CVC: WISQL is dead. I've restored the missing newlines for isql.
		 */
		switch (item)
		{
		case isc_info_end:
			break;

		case isc_info_page_size:
			value_out = isc_vax_integer(d, length);
			sprintf(info, "PAGE_SIZE %" SLONGFORMAT"%s", value_out, separator);
			break;

		case isc_info_db_size_in_pages:
			value_out = isc_vax_integer(d, length);
			if (translate)
			{
				ISQL_msg_get(NUMBER_PAGES, msg, SafeArg() << value_out);
				sprintf(info, "%s%s", msg, separator);
			}
			else
				sprintf(info, "Number of DB pages allocated = %" SLONGFORMAT"%s", value_out, separator);
			break;

		case isc_info_sweep_interval:
			value_out = isc_vax_integer(d, length);
			if (translate)
			{
				ISQL_msg_get(SWEEP_INTERV, msg, SafeArg() << value_out);
				sprintf(info, "%s%s", msg, separator);
			}
			else
				sprintf(info, "Sweep interval = %" SLONGFORMAT"%s", value_out, separator);
			break;

		case isc_info_forced_writes:
			value_out = isc_vax_integer (d, length);
			sprintf (info, "Forced Writes are %s%s", (value_out == 1 ? "ON" : "OFF"), separator);
			break;

		case isc_info_oldest_transaction :
			value_out = isc_vax_integer (d, length);
			sprintf(info, "Transaction - oldest = %" SLONGFORMAT"%s", value_out, separator);
			break;

		case isc_info_oldest_active :
			value_out = isc_vax_integer (d, length);
			sprintf(info, "Transaction - oldest active = %" SLONGFORMAT"%s", value_out, separator);
			break;

		case isc_info_oldest_snapshot :
			value_out = isc_vax_integer (d, length);
			sprintf(info, "Transaction - oldest snapshot = %" SLONGFORMAT"%s", value_out, separator);
			break;

		case isc_info_next_transaction :
			value_out = isc_vax_integer (d, length);
			sprintf (info, "Transaction - Next = %" SLONGFORMAT"%s", value_out, separator);
			break;

		case isc_info_base_level:
			value_out = isc_vax_integer(d, length);
			if (translate)
			{
				ISQL_msg_get(BASE_LEVEL, msg, SafeArg() << value_out);
				sprintf(info, "%s%s", msg, separator);
			}
			else
				sprintf(info, "Base level = %" SLONGFORMAT"%s", value_out, separator);
			break;

		case isc_info_limbo:
			value_out = isc_vax_integer(d, length);
			if (translate)
			{
				ISQL_msg_get(LIMBO, msg, SafeArg() << value_out);
				sprintf(info, "%s%s", msg, separator);
			}
			else
				sprintf(info, "Transaction in limbo = %" SLONGFORMAT"%s", value_out, separator);
			break;

		case isc_info_ods_version:
			isqlGlob.major_ods = isc_vax_integer(d, length);
			break;
		case isc_info_ods_minor_version:
			value_out = isc_vax_integer(d, length);
			sprintf(info, "ODS = %" SLONGFORMAT".%" SLONGFORMAT"%s",
					(SLONG) isqlGlob.major_ods, value_out, separator);
			break;

#ifdef DEV_BUILD
		case isc_info_db_id:
			{
				// Will print with garbage for now.
				//It's sprintf(info, "DB/Host = %.*s", length, d);
				const UCHAR* s = reinterpret_cast<const UCHAR*>(d);
				const UCHAR* end = s + length;
				++s; // Skip useless indicator.
				int len = *s++;
				printf("DB = %.*s\n", len, s);
				s += len;
				while (s < end)
				{
					len = *s++;
					printf("Host = %.*s\n", len, s);
					s += len;
				}
			}
			break;
#endif

		case isc_info_truncated:
			return info > info_buf; // If we got some items, we are (partially) successful.
		}

		d += length;
		info += strlen(info);
	}

	return info > info_buf;
}


processing_state SHOW_grants(const SCHAR* object, const SCHAR* terminator, USHORT obj_type)
{
/**************************************
 *
 *	S H O W _ g r a n t s
 *
 **************************************
 *
 * Functional description
 *	Placeholder for SHOW_grants2 without additional message.
 *
 **************************************/
	return SHOW_grants2 (object, terminator, obj_type, NULL, false);
}


void SHOW_read_owner()
{
/**************************************
 *
 *	S H O W _ r e a d _ o w n e r
 *
 **************************************
 *
 * Functional description
 *	Make granted_by() re-read db owner name.
 *
 **************************************/
	reReadDbOwner = true;
}


static const char* granted_by(char* buffer, const char* grantor)
{
   struct isc_829_struct {
          char  isc_830 [32];	/* RDB$OWNER_NAME */
          short isc_831;	/* isc_utility */
          short isc_832;	/* gds__null_flag */
   } isc_829;
/**************************************
 *
 *	g r a n t e d _ b y
 *
 **************************************
 *
 * Functional description
 *	Output message only if not granted by DB owner.
 *
 **************************************/
	static /*BASED_ON RDB$RELATIONS.RDB$OWNER_NAME owner;*/
	       char
		  owner[32];


	if (reReadDbOwner)
	{
		// Get the owner name
		strcpy(owner, SYSDBA_USER_NAME);

		/*FOR REL IN RDB$RELATIONS WITH
			REL.RDB$RELATION_NAME = "RDB$DATABASE"*/
		{
                if (!isc_827)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_827, (short) sizeof(isc_828), (char*) isc_828);
		if (isc_827)
		   {
                   isc_start_request (isc_status, (FB_API_HANDLE*) &isc_827, (FB_API_HANDLE*) &gds_trans, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_827, (short) 0, (short) 36, &isc_829, (short) 0);
		   if (!isc_829.isc_831 || isc_status [1]) break;

			if (!/*REL.RDB$OWNER_NAME.NULL*/
			     isc_829.isc_832)
				strcpy(owner, /*REL.RDB$OWNER_NAME*/
					      isc_829.isc_830);
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			buffer[0] = '\0';
			return "";
		/*END_ERROR;*/
		   }
		}

		fb_utils::exact_name(owner);
		reReadDbOwner = false;
	}

 	strcpy(buffer, grantor);
	fb_utils::exact_name(buffer);
	if (!strcmp(buffer, owner))
		buffer[0] = '\0';
	else
	{
		strcpy(buffer, " GRANTED BY ");
		strcat(buffer, grantor);
		fb_utils::exact_name(buffer);
	}

	return buffer;
}


processing_state SHOW_grants2 (const SCHAR* object,
				  const SCHAR* terminator,
				  USHORT obj_type,
				  const TEXT* optional_msg,
				  bool mangle)
{
   struct isc_776_struct {
          char  isc_777 [32];	/* RDB$GRANTOR */
          char  isc_778 [32];	/* RDB$USER */
          char  isc_779 [32];	/* RDB$RELATION_NAME */
          short isc_780;	/* isc_utility */
          short isc_781;	/* RDB$GRANT_OPTION */
   } isc_776;
   struct isc_772_struct {
          char  isc_773 [32];	/* RDB$RELATION_NAME */
          short isc_774;	/* RDB$USER_TYPE */
          short isc_775;	/* RDB$OBJECT_TYPE */
   } isc_772;
   struct isc_786_struct {
          short isc_787;	/* isc_utility */
   } isc_786;
   struct isc_784_struct {
          char  isc_785 [32];	/* RDB$ROLE_NAME */
   } isc_784;
   struct isc_794_struct {
          char  isc_795 [32];	/* RDB$GRANTOR */
          char  isc_796 [32];	/* RDB$USER */
          short isc_797;	/* isc_utility */
          short isc_798;	/* RDB$GRANT_OPTION */
          short isc_799;	/* RDB$USER_TYPE */
   } isc_794;
   struct isc_790_struct {
          char  isc_791 [32];	/* RDB$PROCEDURE_NAME */
          char  isc_792 [32];	/* RDB$RELATION_NAME */
          short isc_793;	/* RDB$OBJECT_TYPE */
   } isc_790;
   struct isc_804_struct {
          short isc_805;	/* isc_utility */
   } isc_804;
   struct isc_802_struct {
          char  isc_803 [32];	/* RDB$PROCEDURE_NAME */
   } isc_802;
   struct isc_811_struct {
          char  isc_812 [32];	/* RDB$GRANTOR */
          char  isc_813 [32];	/* RDB$FIELD_NAME */
          char  isc_814 [32];	/* RDB$USER */
          short isc_815;	/* isc_utility */
          short isc_816;	/* RDB$USER_TYPE */
          short isc_817;	/* gds__null_flag */
          short isc_818;	/* gds__null_flag */
          short isc_819;	/* RDB$GRANT_OPTION */
          char  isc_820 [7];	/* RDB$PRIVILEGE */
   } isc_811;
   struct isc_808_struct {
          char  isc_809 [32];	/* RDB$RELATION_NAME */
          char  isc_810 [32];	/* RDB$RELATION_NAME */
   } isc_808;
   struct isc_825_struct {
          short isc_826;	/* isc_utility */
   } isc_825;
   struct isc_823_struct {
          char  isc_824 [32];	/* RDB$RELATION_NAME */
   } isc_823;
/**************************************
 *
 *	S H O W _ g r a n t s 2
 *
 **************************************
 *
 * Functional description
 *	Show grants for given object name
 *	This function is also called by extract for privileges.
 *  	It must extract granted privileges on tables/views to users,
 *		- these may be compound, so put them on the same line.
 *	Grant execute privilege on procedures to users
 *	Grant various privilegs to procedures.
 *	All privileges may have the with_grant option set.
 *	The optional msg is to display a customized message. When the
 *	new feature of all grants is used, there's no way to print the
 *	header message after this routine, so it should be printed here.
 *
 **************************************/
	/*BASED_ON RDB$USER_PRIVILEGES.RDB$USER prev_user;*/
	char
	   prev_user[32];

	/*BASED_ON RDB$USER_PRIVILEGES.RDB$GRANT_OPTION prev_option;*/
	short
	   prev_option;

	/*BASED_ON RDB$USER_PRIVILEGES.RDB$FIELD_NAME prev_field;*/
	char
	   prev_field[32];

	/*BASED_ON RDB$USER_PRIVILEGES.RDB$USER_TYPE prev_user_type;*/
	short
	   prev_user_type;

	/*BASED_ON RDB$USER_PRIVILEGES.RDB$GRANTOR prev_grantor;*/
	char
	   prev_grantor[32];

	SCHAR buf_grantor[sizeof(prev_grantor) + 20];
	SCHAR user_string[QUOTEDLENGTH + 20];
	bool first = true;

	if (!*object)
		return ps_ERR;

	// Query against user_privileges instead of looking at rdb$security_classes

	prev_option = -1;
	prev_user[0] = '\0';
	prev_field[0] = '\0';
	prev_grantor[0] = '\0';
	prev_user_type = -1;
	char priv_string[MAX_PRIV_LIST] = "";
	char col_string[BUFFER_LENGTH128] = "";
	char with_option[19] = "";
	USHORT priv_flags = 0;
	SSHORT prev_field_null = -1;

	if (obj_type == obj_relation || obj_type == 255)
	{

		// Find the user specified relation and show its privileges

		/*FOR FIRST 1 R IN RDB$RELATIONS WITH R.RDB$RELATION_NAME EQ object*/
		{
                if (!isc_821)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_821, (short) sizeof(isc_822), (char*) isc_822);
		isc_vtov ((const char*) object, (char*) isc_823.isc_824, 32);
		if (isc_821)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_821, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_823, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_821, (short) 1, (short) 2, &isc_825, (short) 0);
		   if (!isc_825.isc_826 || isc_status [1]) break;;

			// This query only finds tables, eliminating owner privileges

			/*FOR PRV IN RDB$USER_PRIVILEGES CROSS
				REL IN RDB$RELATIONS WITH
				PRV.RDB$RELATION_NAME EQ object AND
				REL.RDB$RELATION_NAME EQ object AND
				PRV.RDB$PRIVILEGE     NE 'M'    AND
				REL.RDB$OWNER_NAME    NE PRV.RDB$USER
				SORTED BY  PRV.RDB$USER, PRV.RDB$FIELD_NAME, PRV.RDB$GRANT_OPTION*/
			{
                        if (!isc_806)
                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_806, (short) sizeof(isc_807), (char*) isc_807);
			isc_vtov ((const char*) object, (char*) isc_808.isc_809, 32);
			isc_vtov ((const char*) object, (char*) isc_808.isc_810, 32);
			if (isc_806)
			   {
                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_806, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 64, &isc_808, (short) 0);
			   }
			if (!isc_status [1]) {
			while (1)
			   {
                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_806, (short) 1, (short) 113, &isc_811, (short) 0);
			   if (!isc_811.isc_815 || isc_status [1]) break;;

				fb_utils::exact_name(/*PRV.RDB$USER*/
						     isc_811.isc_814);

				// Sometimes grant options are null, sometimes 0.  Both same

				if (/*PRV.RDB$GRANT_OPTION.NULL*/
				    isc_811.isc_818)
					/*PRV.RDB$GRANT_OPTION*/
					isc_811.isc_819 = 0;

				if (/*PRV.RDB$FIELD_NAME.NULL*/
				    isc_811.isc_817)
					/*PRV.RDB$FIELD_NAME*/
					isc_811.isc_813[0] = '\0';

				// Print a new grant statement for each new user or change of option

				if ((prev_user[0] && strcmp (prev_user, /*PRV.RDB$USER*/
									isc_811.isc_814)) ||
					(prev_field_null != -1 &&
					 prev_field_null != /*PRV.RDB$FIELD_NAME.NULL*/
							    isc_811.isc_817) ||
					(!prev_field_null && strcmp (prev_field, /*PRV.RDB$FIELD_NAME*/
										 isc_811.isc_813)) ||
					(prev_option != -1 && prev_option != /*PRV.RDB$GRANT_OPTION*/
									     isc_811.isc_819) ||
					(prev_user_type != -1 && prev_user_type != /*PRV.RDB$USER_TYPE*/
										   isc_811.isc_816) ||
					(prev_grantor[0] && strcmp (prev_grantor, /*PRV.RDB$GRANTOR*/
										  isc_811.isc_812)))
				{

					make_priv_string (priv_flags, priv_string);

					if (first && optional_msg)
						isqlGlob.prints(optional_msg);

					first = false;

					if (mangle && isqlGlob.db_SQL_dialect > SQL_DIALECT_V6_TRANSITION)
						ISQL_copy_SQL_id (object, SQL_identifier, DBL_QUOTE);
					else
						strcpy (SQL_identifier, object);

					isqlGlob.printf("GRANT %s%s ON %s TO %s%s%s%s%s",
						priv_string, col_string,
						SQL_identifier,
						user_string, with_option, granted_by(buf_grantor, prev_grantor),
						terminator, NEWLINE);

					// re-initialize strings

					priv_string[0] = '\0';
					with_option[0] = '\0';
					col_string[0] = '\0';
					priv_flags = 0;
				}

				// At each row, store this value for the next compare of contol break

				strcpy (prev_user, /*PRV.RDB$USER*/
						   isc_811.isc_814);
				prev_option = /*PRV.RDB$GRANT_OPTION*/
					      isc_811.isc_819;
				prev_field_null = /*PRV.RDB$FIELD_NAME.NULL*/
						  isc_811.isc_817;
				strcpy (prev_field, /*PRV.RDB$FIELD_NAME*/
						    isc_811.isc_813);
				prev_user_type = /*PRV.RDB$USER_TYPE*/
						 isc_811.isc_816;
				strcpy (prev_grantor, /*PRV.RDB$GRANTOR*/
						      isc_811.isc_812);

				switch (/*PRV.RDB$USER_TYPE*/
					isc_811.isc_816)
				{
				case obj_relation:
				case obj_view:
				case obj_trigger:
				case obj_procedure:
				case obj_sql_role:
				case obj_user: // Users can be machine\user and need quoting
					if (mangle && isqlGlob.db_SQL_dialect > SQL_DIALECT_V6_TRANSITION) {
						ISQL_copy_SQL_id (/*PRV.RDB$USER*/
								  isc_811.isc_814, SQL_identifier, DBL_QUOTE);
					}
					else
						strcpy (SQL_identifier, /*PRV.RDB$USER*/
									isc_811.isc_814);
					break;
				default:
					strcpy (SQL_identifier, /*PRV.RDB$USER*/
								isc_811.isc_814);
					break;
				}

				switch (/*PRV.RDB$USER_TYPE*/
					isc_811.isc_816)
				{
				case obj_view:
					sprintf (user_string, "VIEW %s", SQL_identifier);
					break;
				case obj_trigger:
					sprintf (user_string, "TRIGGER %s", SQL_identifier);
					break;
				case obj_procedure:
					sprintf (user_string, "PROCEDURE %s", SQL_identifier);
					break;
				case obj_user:
					if (strcmp(SQL_identifier, "PUBLIC"))
						sprintf (user_string, "USER %s", SQL_identifier);
					else
						strcpy (user_string, SQL_identifier);
					break;
				case obj_user_group:
					sprintf (user_string, "GROUP %s", SQL_identifier);
					break;
				case obj_sql_role:
					sprintf (user_string, "ROLE %s", SQL_identifier);
					break;
				default:
					strcpy (user_string, SQL_identifier);
					break;
				}

				// Only the first character is used for permissions

				const char c = /*PRV.RDB$PRIVILEGE*/
					       isc_811.isc_820[0];

				switch (c)
				{
				case 'S':
					priv_flags |= priv_SELECT;
				break;
				case 'I':
					priv_flags |= priv_INSERT;
					break;
				case 'U':
					priv_flags |= priv_UPDATE;
					break;
				case 'D':
					priv_flags |= priv_DELETE;
					break;
				case 'R':
					priv_flags |= priv_REFERENCES;
					break;
				case 'X':
					// Execute should not be here -- special handling below
					break;
				default:
					priv_flags |= priv_UNKNOWN;
				}

				// Column level privileges for update and references only
				if (/*PRV.RDB$FIELD_NAME.NULL*/
				    isc_811.isc_817) {
					*col_string = '\0';
				}
				else
				{
					fb_utils::exact_name(/*PRV.RDB$FIELD_NAME*/
							     isc_811.isc_813);
					if (mangle && isqlGlob.db_SQL_dialect > SQL_DIALECT_V6_TRANSITION)
					{
						ISQL_copy_SQL_id (/*PRV.RDB$FIELD_NAME*/
								  isc_811.isc_813, SQL_identifier, DBL_QUOTE);
						sprintf(col_string, " (%s)", SQL_identifier);
					}
					else {
						sprintf(col_string, " (%s)", /*PRV.RDB$FIELD_NAME*/
									     isc_811.isc_813);
					}
				}

				if (/*PRV.RDB$GRANT_OPTION*/
				    isc_811.isc_819)
					strcpy (with_option, " WITH GRANT OPTION");

			/*END_FOR*/
			   }
			   };
			/*ON_ERROR*/
			if (isc_status [1])
			   {
				ISQL_errmsg (isc_status);
				return ps_ERR;
			/*END_ERROR;*/
			   }
			}

			// Print last case if there was anything to print

			if (prev_option != -1)
			{
				make_priv_string (priv_flags, priv_string);
				if (first && optional_msg)
					isqlGlob.prints(optional_msg);
				first = false;

				if (mangle && isqlGlob.db_SQL_dialect > SQL_DIALECT_V6_TRANSITION)
					ISQL_copy_SQL_id (object, SQL_identifier, DBL_QUOTE);
				else
					strcpy (SQL_identifier, object);

				isqlGlob.printf("GRANT %s%s ON %s TO %s%s%s%s%s",
					priv_string, col_string,
					SQL_identifier,
					user_string, with_option, granted_by(buf_grantor, prev_grantor), terminator, NEWLINE);
			}

		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}

		if (!first)
			return (SKIP);
	}

	// No relation called "object" was found, try procedure "object"
	if (obj_type == obj_procedure || obj_type == 255)
	{

		/*FOR FIRST 1 P IN RDB$PROCEDURES WITH P.RDB$PROCEDURE_NAME EQ object*/
		{
                if (!isc_800)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_800, (short) sizeof(isc_801), (char*) isc_801);
		isc_vtov ((const char*) object, (char*) isc_802.isc_803, 32);
		if (isc_800)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_800, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_802, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_800, (short) 1, (short) 2, &isc_804, (short) 0);
		   if (!isc_804.isc_805 || isc_status [1]) break;

			// Part two is for stored procedures only

			/*FOR PRV IN RDB$USER_PRIVILEGES CROSS
				PRC IN RDB$PROCEDURES WITH
				PRV.RDB$OBJECT_TYPE = obj_procedure AND
				PRV.RDB$RELATION_NAME EQ object AND
				PRC.RDB$PROCEDURE_NAME EQ object AND
				PRV.RDB$PRIVILEGE EQ 'X' AND
				PRC.RDB$OWNER_NAME NE PRV.RDB$USER
				SORTED BY  PRV.RDB$USER, PRV.RDB$FIELD_NAME, PRV.RDB$GRANT_OPTION*/
			{
                        if (!isc_788)
                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_788, (short) sizeof(isc_789), (char*) isc_789);
			isc_vtov ((const char*) object, (char*) isc_790.isc_791, 32);
			isc_vtov ((const char*) object, (char*) isc_790.isc_792, 32);
			isc_790.isc_793 = obj_procedure;
			if (isc_788)
			   {
                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_788, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 66, &isc_790, (short) 0);
			   }
			if (!isc_status [1]) {
			while (1)
			   {
                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_788, (short) 1, (short) 70, &isc_794, (short) 0);
			   if (!isc_794.isc_797 || isc_status [1]) break;;

				if (first && optional_msg)
					isqlGlob.prints(optional_msg);

				first = false;
				fb_utils::exact_name(/*PRV.RDB$USER*/
						     isc_794.isc_796);

				switch (/*PRV.RDB$USER_TYPE*/
					isc_794.isc_799)
				{
				case obj_relation:
				case obj_view:
				case obj_trigger:
				case obj_procedure:
				case obj_sql_role:
					if (mangle && isqlGlob.db_SQL_dialect > SQL_DIALECT_V6_TRANSITION) {
						ISQL_copy_SQL_id (/*PRV.RDB$USER*/
								  isc_794.isc_796, SQL_identifier, DBL_QUOTE);
					}
					else
						strcpy (SQL_identifier, /*PRV.RDB$USER*/
									isc_794.isc_796);
					break;
				default:
					strcpy (SQL_identifier, /*PRV.RDB$USER*/
								isc_794.isc_796);
					break;
				}

				switch (/*PRV.RDB$USER_TYPE*/
					isc_794.isc_799)
				{
				case obj_view:
					sprintf (user_string, "VIEW %s", SQL_identifier);
					break;
				case obj_trigger:
					sprintf (user_string, "TRIGGER %s", SQL_identifier);
					break;
				case obj_procedure:
					sprintf (user_string, "PROCEDURE %s", SQL_identifier);
					break;
				case obj_user:
					if (strcmp(SQL_identifier, "PUBLIC"))
						sprintf (user_string, "USER %s", SQL_identifier);
					else
						strcpy (user_string, SQL_identifier);
					break;
				case obj_user_group:
					sprintf (user_string, "GROUP %s", SQL_identifier);
					break;
				case obj_sql_role:
					sprintf (user_string, "ROLE %s", SQL_identifier);
					break;
				default:
					strcpy (user_string, SQL_identifier);
					break;
				}

				if (/*PRV.RDB$GRANT_OPTION*/
				    isc_794.isc_798)
					strcpy (with_option, " WITH GRANT OPTION");
				else
					with_option[0] = '\0';

				if (mangle && isqlGlob.db_SQL_dialect > SQL_DIALECT_V6_TRANSITION) {
					ISQL_copy_SQL_id (object, SQL_identifier, DBL_QUOTE);
				}
				else
					strcpy (SQL_identifier, object);

				isqlGlob.printf("GRANT EXECUTE ON PROCEDURE %s TO %s%s%s%s%s",
						 SQL_identifier, user_string, with_option,
						 granted_by(buf_grantor, /*PRV.RDB$GRANTOR*/
									 isc_794.isc_795), terminator, NEWLINE);
				first = false;

			/*END_FOR*/
			   }
			   };
			/*ON_ERROR*/
			if (isc_status [1])
			   {
				ISQL_errmsg (isc_status);
				return ps_ERR;
			/*END_ERROR*/
			   }
			}
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}

		if (!first)
			return (SKIP);
	}

	// No procedure called "object" was found, try role "object"
	SCHAR role_name[BUFFER_LENGTH128];

	if (obj_type == obj_sql_role || obj_type == 255)
	{
		// No procedure called "object" was found, try role "object"
		// CVC: This code could be superseded by SHOW_grant_roles() below
		// with the sole difference of the sort fields.
		// This part is only used by SHOW GRANT <object> command
		// Metadata extraction and SHOW GRANT with no param uses SHOW_grant_roles.

		/*FOR FIRST 1 R IN RDB$ROLES WITH R.RDB$ROLE_NAME EQ object*/
		{
                if (!isc_782)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_782, (short) sizeof(isc_783), (char*) isc_783);
		isc_vtov ((const char*) object, (char*) isc_784.isc_785, 32);
		if (isc_782)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_782, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_784, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_782, (short) 1, (short) 2, &isc_786, (short) 0);
		   if (!isc_786.isc_787 || isc_status [1]) break;

			/*FOR PRV IN RDB$USER_PRIVILEGES WITH
				PRV.RDB$OBJECT_TYPE   EQ obj_sql_role AND
				PRV.RDB$USER_TYPE     EQ obj_user     AND
				PRV.RDB$RELATION_NAME EQ object       AND
				PRV.RDB$PRIVILEGE     EQ 'M'
				SORTED BY  PRV.RDB$USER*/
			{
                        if (!isc_770)
                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_770, (short) sizeof(isc_771), (char*) isc_771);
			isc_vtov ((const char*) object, (char*) isc_772.isc_773, 32);
			isc_772.isc_774 = obj_user;
			isc_772.isc_775 = obj_sql_role;
			if (isc_770)
			   {
                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_770, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 36, &isc_772, (short) 0);
			   }
			if (!isc_status [1]) {
			while (1)
			   {
                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_770, (short) 1, (short) 100, &isc_776, (short) 0);
			   if (!isc_776.isc_780 || isc_status [1]) break;

				fb_utils::exact_name(/*PRV.RDB$RELATION_NAME*/
						     isc_776.isc_779);
				strcpy (role_name, /*PRV.RDB$RELATION_NAME*/
						   isc_776.isc_779);
				if (mangle && isqlGlob.db_SQL_dialect > SQL_DIALECT_V6_TRANSITION)
					ISQL_copy_SQL_id (role_name, SQL_identifier, DBL_QUOTE);
				else
					strcpy (SQL_identifier, role_name);

				fb_utils::exact_name(/*PRV.RDB$USER*/
						     isc_776.isc_778);
				strcpy (user_string, /*PRV.RDB$USER*/
						     isc_776.isc_778);

				if (/*PRV.RDB$GRANT_OPTION*/
				    isc_776.isc_781)
					strcpy (with_option, " WITH ADMIN OPTION");
				else
					with_option[0] = '\0';

				sprintf (Print_buffer, "GRANT %s TO %s%s%s%s%s", SQL_identifier,
						 user_string, with_option, granted_by(buf_grantor, /*PRV.RDB$GRANTOR*/
												   isc_776.isc_777),
						 terminator, NEWLINE);

				if (first && optional_msg)
					isqlGlob.prints(optional_msg);

				first = false;
				isqlGlob.prints(Print_buffer);

			/*END_FOR*/
			   }
			   };
			/*ON_ERROR*/
			if (isc_status [1])
			   {
				ISQL_errmsg (isc_status);
				return ps_ERR;
			/*END_ERROR;*/
			   }
			}

		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}

		if (!first)
			return (SKIP);
	}

	return OBJECT_NOT_FOUND;
}


void SHOW_grant_roles(const SCHAR* terminator, bool* first)
{
/**************************************
 *
 *	S H O W _ g r a n t _ r o l e s
 *
 **************************************
 *
 * Functional description
 *	Placeholder for SHOW_grant_roles2 without additional message.
 *
 **************************************/
	SHOW_grant_roles2 (terminator, first, 0, false);
}

void SHOW_grant_roles2 (const SCHAR* terminator,
						bool* first,
						const TEXT* optional_msg,
						bool mangle)
{
   struct isc_764_struct {
          char  isc_765 [32];	/* RDB$GRANTOR */
          char  isc_766 [32];	/* RDB$RELATION_NAME */
          char  isc_767 [32];	/* RDB$USER */
          short isc_768;	/* isc_utility */
          short isc_769;	/* RDB$GRANT_OPTION */
   } isc_764;
   struct isc_761_struct {
          short isc_762;	/* RDB$USER_TYPE */
          short isc_763;	/* RDB$OBJECT_TYPE */
   } isc_761;
/**************************************
 *
 *	S H O W _ g r a n t _ r o l e s
 *
 **************************************
 *
 * Functional description
 *	Show grants for each role name
 *	This function is also called by extract for privileges.
 *	All membership privilege may have the with_admin option set.
 *
 **************************************/
	TEXT SQL_identifier2[BUFFER_LENGTH128];
	/*BASED_ON RDB$USER_PRIVILEGES.RDB$GRANTOR dummy;*/
	char
	   dummy[32];
	// used to declare buf_grantor
	SCHAR buf_grantor[sizeof(dummy) + 20];

	// process role "object"

	/*FOR PRV IN RDB$USER_PRIVILEGES WITH
		PRV.RDB$OBJECT_TYPE   EQ obj_sql_role AND
		PRV.RDB$USER_TYPE     EQ obj_user     AND
		PRV.RDB$PRIVILEGE     EQ 'M'
		SORTED BY PRV.RDB$RELATION_NAME, PRV.RDB$USER*/
	{
        if (!isc_759)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_759, (short) sizeof(isc_760), (char*) isc_760);
	isc_761.isc_762 = obj_user;
	isc_761.isc_763 = obj_sql_role;
	if (isc_759)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_759, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 4, &isc_761, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_759, (short) 1, (short) 100, &isc_764, (short) 0);
	   if (!isc_764.isc_768 || isc_status [1]) break;

		if (first)
		{
			if (*first && optional_msg) {
				isqlGlob.prints(optional_msg);
			}
			*first = false;
		}

		const char* user_string = fb_utils::exact_name(/*PRV.RDB$USER*/
							       isc_764.isc_767);

		const char* with_option = "";
		if (/*PRV.RDB$GRANT_OPTION*/
		    isc_764.isc_769)
			with_option = " WITH ADMIN OPTION";

		const char* role = fb_utils::exact_name(/*PRV.RDB$RELATION_NAME*/
							isc_764.isc_766);
		const char* grantor = fb_utils::exact_name(/*PRV.RDB$GRANTOR*/
							   isc_764.isc_765);
		if (mangle && isqlGlob.db_SQL_dialect > SQL_DIALECT_V6_TRANSITION)
		{
			ISQL_copy_SQL_id (/*PRV.RDB$RELATION_NAME*/
					  isc_764.isc_766, SQL_identifier, DBL_QUOTE);
			role = SQL_identifier;
			ISQL_copy_SQL_id(/*PRV.RDB$USER*/
					 isc_764.isc_767, SQL_identifier2, DBL_QUOTE);
			user_string = SQL_identifier2;
		}
		isqlGlob.printf("GRANT %s TO %s%s%s%s%s", role,
			user_string, with_option, granted_by(buf_grantor, grantor), terminator, NEWLINE);

	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
	/*END_ERROR;*/
	   }
	}

}


void SHOW_print_metadata_text_blob(FILE* fp, ISC_QUAD* blobid, bool escape_squote)
{
/**************************************
 *
 *	S H O W _ p r i n t _ m e t a d a t a _ t e x t _ b l o b
 *
 **************************************
 *
 * Functional description
 *	Print a Blob that is known to be metadata text.
 *	The last param says whether single quotes should be escaped (duplicating them).
 *
 **************************************/

	// Don't bother with null blobs
	if (UserBlob::blobIsNull(*blobid))
		return;

	UserBlob blob(isc_status);
	if (!blob.open(DB, gds_trans, *blobid, sizeof(metadata_text_bpb), metadata_text_bpb))
	{
		ISQL_errmsg(isc_status);
		return;
	}

	SCHAR buffer[BUFFER_LENGTH512];
	bool endedWithCr = false;

	size_t length = 0;
	while (blob.getSegment(sizeof(buffer) - 1, buffer, length))
	{
		// ASF: In Windows, \n characters are printed as \r\n in text mode.
		// If the original string has \r\n, they're printed as \r\r\n, resulting
		// in mixed/wrong line endings. So here, we filter any \r present just
		// before \n.
		bool prevEndedWithCr = endedWithCr;

		if ((endedWithCr = length != 0 && buffer[length - 1] == '\r'))
			--length;

		buffer[length] = 0;

		for (SCHAR* p = buffer; p < buffer + length - 1; ++p)
		{
			if (p[0] == '\r' && p[1] == '\n')
			{
				memmove(p, p + 1, length - (p - buffer));
				--length;
			}
		}

		if (prevEndedWithCr && buffer[0] != '\n')
		    fputc('\r', fp);

		if (escape_squote)
		{
			for (const UCHAR* p = (UCHAR*) buffer; *p; ++p)
			{
				if (*p == SINGLE_QUOTE)
			        fputc(*p, fp);
			    fputc(*p, fp);
			}
			fflush(fp);
		}
		else
			ISQL_printf(fp, buffer);
	}

	if (endedWithCr)
	    fputc('\r', fp);

	if (isc_status[1] && isc_status[1] != isc_segstr_eof)
		ISQL_errmsg(isc_status);
}


processing_state SHOW_metadata(const SCHAR* const* cmd, SCHAR** lcmd)
{
   struct isc_733_struct {
          short isc_734;	/* isc_utility */
   } isc_733;
   struct isc_731_struct {
          char  isc_732 [32];	/* RDB$RELATION_NAME */
   } isc_731;
   struct isc_739_struct {
          short isc_740;	/* isc_utility */
   } isc_739;
   struct isc_737_struct {
          char  isc_738 [32];	/* RDB$ROLE_NAME */
   } isc_737;
   struct isc_745_struct {
          short isc_746;	/* isc_utility */
   } isc_745;
   struct isc_743_struct {
          char  isc_744 [32];	/* RDB$PROCEDURE_NAME */
   } isc_743;
   struct isc_751_struct {
          short isc_752;	/* isc_utility */
   } isc_751;
   struct isc_749_struct {
          char  isc_750 [32];	/* RDB$RELATION_NAME */
   } isc_749;
   struct isc_757_struct {
          short isc_758;	/* isc_utility */
   } isc_757;
   struct isc_755_struct {
          char  isc_756 [32];	/* RDB$RELATION_NAME */
   } isc_755;
/**************************************
 *
 *	S H O W _ m e t a d a t a
 *
 **************************************
 *
 * Functional description
 *	If somebody presses the show ..., come here to
 *	interpret the desired command.
 *	Paramters:
 *	cmd -- Array of words for the command
 *
 **************************************/

	class ShowOptions : public OptionsBase
	{
	public:
		enum show_commands
		{
			role, table, view, system, index, domain, exception,
			filter, function, generator, grant, procedure, trigger,
			check, database, comment, dependency, collation, security_class,
			users, wrong
		};
		ShowOptions(const optionsMap* inmap, size_t insize, int wrongval)
			: OptionsBase(inmap, insize, wrongval)
		{}
	};

	static const ShowOptions::optionsMap options[] =
	{
		//{role, "ROLE"},
		{ShowOptions::role, "ROLES", 4},
		//{table, "TABLE"},
		{ShowOptions::table, "TABLES", 5},
		//{view, "VIEW"},
		{ShowOptions::view, "VIEWS", 4},
		//{system, "SYS"},
		{ShowOptions::system, "SYSTEM", 3},
		//{index, "IND"},
		{ShowOptions::index, "INDEXES", 3},
		{ShowOptions::index, "INDICES", 0},
		//{domain, "DOMAIN"},
		{ShowOptions::domain, "DOMAINS", 6},
		//{exception, "EXCEPTION"},
		{ShowOptions::exception, "EXCEPTIONS", 5},
		//{filter, "FILTER"},
		{ShowOptions::filter, "FILTERS", 6},
		//{function, "FUNCTION"},
		{ShowOptions::function, "FUNCTIONS", 4},
		//{generator, "GEN"},
		//{generator, "GENERATOR"},
		{ShowOptions::generator, "GENERATORS", 3},
		//{generator, "SEQ"},
		//{generator, "SEQUENCE"},
		{ShowOptions::generator, "SEQUENCES", 3},
		//{grant, "GRANT"},
		{ShowOptions::grant, "GRANTS", 5},
		//{procedure, "PROC"},
		//{procedure, "PROCEDURE"},
		{ShowOptions::procedure, "PROCEDURES", 4},
		//{trigger, "TRIG"},
		//{trigger, "TRIGGER"},
		{ShowOptions::trigger, "TRIGGERS", 4},
		//{check, "CHECK"},
		{ShowOptions::check, "CHECKS", 5},
		{ShowOptions::database, "DB", 0},
		{ShowOptions::database, "DATABASE", 0},
		//{comment, "COMMENT"},
		{ShowOptions::comment, "COMMENTS", 7},
		{ShowOptions::dependency, "DEPENDENCY", 5},
		{ShowOptions::dependency, "DEPENDENCIES", 5},
		{ShowOptions::collation, "COLLATES", 7},
		{ShowOptions::collation, "COLLATIONS", 9},
		{ShowOptions::security_class, "SECURITY CLASSES", 12},
		{ShowOptions::security_class, "SECCLASSES", 6},
		{ShowOptions::users, "USERS", 0}
	};

	const ShowOptions showoptions(options, FB_NELEM(options), ShowOptions::wrong);


	// Can't show nothing, return an error

	if (!cmd[1] || !*cmd[1])
	{
		TEXT msg_string[MSG_LENGTH];
		ISQL_msg_get(VALID_OPTIONS, msg_string);
		isqlGlob.printf("%s\n", msg_string);
		showoptions.showCommands(isqlGlob.Out);
		return ps_ERR;
	}

	processing_state ret = SKIP;
	// Only show version and show sql dialect work if there is no db attached
	bool handled = true;
	if ((!strcmp(cmd[1], "VERSION")) || (!strcmp(cmd[1], "VER")))
	{
		TEXT msg_string[MSG_LENGTH];
		ISQL_msg_get(VERSION, msg_string, SafeArg() << FB_VERSION);
		isqlGlob.printf("%s%s", msg_string, NEWLINE);
		isqlGlob.printf("Server version:%s", NEWLINE);
		if (isc_version(&DB, local_fprintf, NULL))
		{
			ISQL_msg_get(CANNOT_GET_SRV_VER, msg_string);
			STDERROUT(msg_string);
		}
	}
	else if (!strcmp(cmd[1], "SQL"))
	{
		if (!strcmp(cmd[2], "DIALECT"))
			ret = show_dialect();
		else
			ret = ps_ERR;
	}
	else
	{
		handled = false;
		if (!ISQL_dbcheck())
			ret = ps_ERR;
	}

	if (ret == ps_ERR || handled)
		return ret;

	TEXT SQL_id_for_grant[BUFFER_LENGTH128];
	int key = 0;

	switch (showoptions.getCommand(cmd[1]))
	{
	case ShowOptions::role:
		if (isqlGlob.major_ods >= ODS_VERSION9)
		{
			if (*cmd[2])
			{
				if (*cmd[2] == '"')
				{
					remove_delimited_double_quotes(lcmd[2]);
					ret = show_role(lcmd[2]);
				}
				else
				{
					ret = show_role(cmd[2]);
				}

				if (ret == OBJECT_NOT_FOUND)
					key = NO_ROLE;
			}
			else
			{
				ret = show_role(NULL);
				if (ret == OBJECT_NOT_FOUND)
					key = NO_ROLES;
			}
		}
		else
		{
			ret = OBJECT_NOT_FOUND;
			key = NO_ROLES;
		}
		break;

	case ShowOptions::table:
		if (*cmd[2])
		{
			if (*cmd[2] == '"')
			{
				remove_delimited_double_quotes(lcmd[2]);
				ret = show_table(lcmd[2], false);
			}
			else
			{
				ret = show_table(cmd[2], false);
			}

			if (ret == OBJECT_NOT_FOUND)
				key = NO_TABLE;
		}
		else
		{
			ret = show_all_tables(0);
			if (ret == OBJECT_NOT_FOUND)
				key = NO_TABLES;
		}
		break;

	case ShowOptions::view:
		if (*cmd[2])
		{
			if (*cmd[2] == '"')
			{
				remove_delimited_double_quotes(lcmd[2]);
				ret = show_table(lcmd[2], true);
			}
			else
			{
				ret = show_table(cmd[2], true);
			}

			if (ret == OBJECT_NOT_FOUND)
				key = NO_VIEW;
		}
		else
		{
			ret = show_all_tables(-1);
			if (ret == OBJECT_NOT_FOUND)
				key = NO_VIEWS;
		}
		break;

	case ShowOptions::system:
		if (*cmd[2])
		{
			switch (showoptions.getCommand(cmd[2]))
			{
			case ShowOptions::collation:
				show_collations("", 1);
				break;

			case ShowOptions::function:
				show_functions("", 1, NULL);
				break;

			case ShowOptions::table:
				show_all_tables(1);
				break;

			default:
				return ps_ERR;
			}
		}
		else
		{
			TEXT msg[MSG_LENGTH];
			ISQL_msg_get(MSG_TABLES, msg);
			isqlGlob.printf("%s%s", msg, NEWLINE);
			show_all_tables(1);
			ISQL_msg_get(MSG_FUNCTIONS, msg);
			show_functions("", 1, msg);
			ISQL_msg_get(MSG_COLLATIONS, msg);
			show_collations("", 1, msg, true);
		}
		break;

	case ShowOptions::index:
		if (*cmd[2] == '"')
		{
			remove_delimited_double_quotes(lcmd[2]);
			ret = show_indices(lcmd);
		}
		else
		{
			ret = show_indices(cmd);
		}

		if (ret == OBJECT_NOT_FOUND)
		{
			if (*cmd[2])
			{
				/*FOR FIRST 1 R IN RDB$RELATIONS WITH R.RDB$RELATION_NAME EQ cmd[2]*/
				{
                                if (!isc_753)
                                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_753, (short) sizeof(isc_754), (char*) isc_754);
				isc_vtov ((const char*) cmd[2], (char*) isc_755.isc_756, 32);
				if (isc_753)
				   {
                                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_753, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_755, (short) 0);
				   }
				if (!isc_status [1]) {
				while (1)
				   {
                                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_753, (short) 1, (short) 2, &isc_757, (short) 0);
				   if (!isc_757.isc_758 || isc_status [1]) break;;
					key = NO_INDICES_ON_REL;
				/*END_FOR*/
				   }
				   };
				/*ON_ERROR*/
				if (isc_status [1])
				   {
					// Ignore any error
				/*END_ERROR;*/
				   }
				}
				if (!key)
					key = NO_REL_OR_INDEX;
			}
			else
			{
				key = NO_INDICES;
			}
		}
		break;

	case ShowOptions::domain:
		if (*cmd[2] == '"')
		{
			remove_delimited_double_quotes(lcmd[2]);
			ret = show_domains(lcmd[2]);
		}
		else
			ret = show_domains(cmd[2]);

		if (ret == OBJECT_NOT_FOUND)
		{
			if (*cmd[2])
				key = NO_DOMAIN;
			else
				key = NO_DOMAINS;
		}
		break;

	case ShowOptions::exception:
		if (*cmd[2] == '"')
		{
			remove_delimited_double_quotes(lcmd[2]);
			ret = show_exceptions(lcmd[2]);
		}
		else
			ret = show_exceptions(cmd[2]);

		if (ret == OBJECT_NOT_FOUND)
		{
			if (*cmd[2])
				key = NO_EXCEPTION;
			else
				key = NO_EXCEPTIONS;
		}
		break;

	case ShowOptions::filter:
		if (*cmd[2] == '"')
		{
			remove_delimited_double_quotes(lcmd[2]);
			ret = show_filters(lcmd[2]);
		}
		else
			ret = show_filters(cmd[2]);

		if (ret == OBJECT_NOT_FOUND)
		{
			if (*cmd[2])
				key = NO_FILTER;
			else
				key = NO_FILTERS;
		}
		break;

	case ShowOptions::function:
		if (*cmd[2] == '"')
		{
			remove_delimited_double_quotes(lcmd[2]);
			ret = show_functions(lcmd[2]);
		}
		else
			ret = show_functions(cmd[2]);

		if (ret == OBJECT_NOT_FOUND)
		{
			if (*cmd[2])
				key = NO_FUNCTION;
			else
				key = NO_FUNCTIONS;
		}
		break;

	case ShowOptions::generator:
		if (*cmd[2] == '"')
		{
			remove_delimited_double_quotes(lcmd[2]);
			ret = show_generators(lcmd[2]);
		}
		else
			ret = show_generators(cmd[2]);

		if (ret == OBJECT_NOT_FOUND)
		{
			if (*cmd[2])
				key = NO_GEN;
			else
				key = NO_GENS;
		}
		break;

	case ShowOptions::grant:
		if (*cmd[2])
		{
			if (*cmd[2] == '"')
			{
				remove_delimited_double_quotes(lcmd[2]);
				strcpy(SQL_id_for_grant, lcmd[2]);
			}
			else
				strcpy(SQL_id_for_grant, cmd[2]);
			ret = SHOW_grants (SQL_id_for_grant, "", 255);
		}
		else
		{
			strcpy(SQL_id_for_grant, cmd[2]);
			ret = EXTRACT_list_grants ("");
		}

		if (ret == OBJECT_NOT_FOUND)
		{
			if (*cmd[2])
			{
				/*FOR FIRST 1 R IN RDB$RELATIONS
					WITH R.RDB$RELATION_NAME EQ SQL_id_for_grant*/
				{
                                if (!isc_747)
                                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_747, (short) sizeof(isc_748), (char*) isc_748);
				isc_vtov ((const char*) SQL_id_for_grant, (char*) isc_749.isc_750, 32);
				if (isc_747)
				   {
                                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_747, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_749, (short) 0);
				   }
				if (!isc_status [1]) {
				while (1)
				   {
                                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_747, (short) 1, (short) 2, &isc_751, (short) 0);
				   if (!isc_751.isc_752 || isc_status [1]) break;;

					key = NO_GRANT_ON_REL;
				/*END_FOR*/
				   }
				   };
				/*ON_ERROR*/
				if (isc_status [1])
				   {
					// Ignore any error
				/*END_ERROR;*/
				   }
				}
				if (!key)
				{
					/*FOR FIRST 1 P IN RDB$PROCEDURES
						WITH P.RDB$PROCEDURE_NAME EQ SQL_id_for_grant*/
					{
                                        if (!isc_741)
                                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_741, (short) sizeof(isc_742), (char*) isc_742);
					isc_vtov ((const char*) SQL_id_for_grant, (char*) isc_743.isc_744, 32);
					if (isc_741)
					   {
                                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_741, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_743, (short) 0);
					   }
					if (!isc_status [1]) {
					while (1)
					   {
                                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_741, (short) 1, (short) 2, &isc_745, (short) 0);
					   if (!isc_745.isc_746 || isc_status [1]) break;;

						key = NO_GRANT_ON_PROC;
					/*END_FOR*/
					   }
					   };
					/*ON_ERROR*/
					if (isc_status [1])
					   {
						// Ignore any error
					/*END_ERROR;*/
					   }
					}
				}
				if (!key)
				{
					/*FOR FIRST 1 R IN RDB$ROLES
					WITH R.RDB$ROLE_NAME EQ SQL_id_for_grant*/
					{
                                        if (!isc_735)
                                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_735, (short) sizeof(isc_736), (char*) isc_736);
					isc_vtov ((const char*) SQL_id_for_grant, (char*) isc_737.isc_738, 32);
					if (isc_735)
					   {
                                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_735, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_737, (short) 0);
					   }
					if (!isc_status [1]) {
					while (1)
					   {
                                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_735, (short) 1, (short) 2, &isc_739, (short) 0);
					   if (!isc_739.isc_740 || isc_status [1]) break;;
						key = NO_GRANT_ON_ROL;
					/*END_FOR*/
					   }
					   };
					/*ON_ERROR*/
					if (isc_status [1])
					   {
						// Ignore any error
					/*END_ERROR;*/
					   }
					}
				}
				if (!key)
					key = NO_REL_OR_PROC_OR_ROLE;
			}
			else {
				key = NO_GRANT_ON_ANY;
			}
		}
		break;

	case ShowOptions::procedure:
		if (*cmd[2] == '"')
		{
			remove_delimited_double_quotes(lcmd[2]);
			ret = show_proc(lcmd[2]);
		}
		else
			ret = show_proc(cmd[2]);

		if (ret == OBJECT_NOT_FOUND)
		{
			if (*cmd[2])
				key = NO_PROC;
			else
				key = NO_PROCS;
		}
		break;

	case ShowOptions::trigger:
		if (*cmd[2] == '"')
		{
			remove_delimited_double_quotes(lcmd[2]);
			ret = show_trigger(lcmd[2], true, true);
		}
		else
			ret = show_trigger(cmd[2], true, true);

		if (ret == OBJECT_NOT_FOUND)
		{
			if (*cmd[2])
			{
				/*
				FOR FIRST 1 R IN RDB$RELATIONS WITH R.RDB$RELATION_NAME EQ cmd[2];
					key = NO_TRIGGERS_ON_REL;
				END_FOR
				ON_ERROR
					// Ignore any error
				END_ERROR;
				if (!key)
					key = NO_REL_OR_TRIGGER;
				*/
				key = NO_TRIGGER;
			}
			else
				key = NO_TRIGGERS;
		}
		break;

	case ShowOptions::check:
		if (*cmd[2] == '"')
		{
			remove_delimited_double_quotes(lcmd[2]);
			ret = show_check(lcmd[2]);
		}
		else
			ret = show_check(cmd[2]);

		if (ret == OBJECT_NOT_FOUND)
		{
			if (*cmd[2])
			{
				/*FOR FIRST 1 R IN RDB$RELATIONS WITH R.RDB$RELATION_NAME EQ cmd[2]*/
				{
                                if (!isc_729)
                                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_729, (short) sizeof(isc_730), (char*) isc_730);
				isc_vtov ((const char*) cmd[2], (char*) isc_731.isc_732, 32);
				if (isc_729)
				   {
                                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_729, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_731, (short) 0);
				   }
				if (!isc_status [1]) {
				while (1)
				   {
                                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_729, (short) 1, (short) 2, &isc_733, (short) 0);
				   if (!isc_733.isc_734 || isc_status [1]) break;;
					key = NO_CHECKS_ON_REL;
				/*END_FOR*/
				   }
				   };
				/*ON_ERROR*/
				if (isc_status [1])
				   {
					// Ignore any error
				/*END_ERROR;*/
				   }
				}
			}
			if (!key)
				key = NO_TABLE;
		}
		break;

	case ShowOptions::database:
		show_db();
		break;

	case ShowOptions::comment:
		ret = show_comments(cmmShow, 0);
		if (ret == OBJECT_NOT_FOUND)
			key = NO_COMMENTS;
		break;

	case ShowOptions::collation:
		if (*cmd[2] == '"')
		{
			remove_delimited_double_quotes(lcmd[2]);
			ret = show_collations(lcmd[2], -1);
		}
		else
			ret = show_collations(cmd[2], 0);

		if (ret == OBJECT_NOT_FOUND)
		{
			if (*cmd[2])
				key = NO_COLLATION;
			else
				key = NO_COLLATIONS;
		}
		break;

	case ShowOptions::dependency:
		if (*cmd[2] == '"')
		{
			remove_delimited_double_quotes(lcmd[2]);
			ret = show_dependencies(lcmd[2]);
		}
		else
			ret = show_dependencies(cmd[2]);

		if (ret == OBJECT_NOT_FOUND)
			key = NO_DEPENDENCIES;
		break;

	case ShowOptions::security_class:
		if (*cmd[2] == '"')
		{
			remove_delimited_double_quotes(lcmd[2]);
			ret = show_secclass(lcmd[2], cmd[3]);
		}
		else
			ret = show_secclass(cmd[2], cmd[3]);

		if (ret == OBJECT_NOT_FOUND)
		{
			if (!strcmp(cmd[2], "*"))
				key = NO_DB_WIDE_SECCLASS;
			else
				key = NO_SECCLASS;
		}
		break;

	case ShowOptions::users:
		ret = show_users();
		if (ret == OBJECT_NOT_FOUND) // It seems impossible, but...
			key = NO_CONNECTED_USERS;
		break;

	default:
		return ps_ERR;
	} // switch

	if (ret == OBJECT_NOT_FOUND)
	{
		TEXT key_string[MSG_LENGTH];
		if (*cmd[2] == '"')
			ISQL_msg_get(key, key_string, SafeArg() << lcmd[2]);
		else
			ISQL_msg_get(key, key_string, SafeArg() << cmd[2]);
		STDERROUT(key_string);
	}

	return ret;
}


static void local_fprintf(void* /*format_ignored*/, const char* string)
{
/**************************************
 *
 *	l o c a l _ p r i n t f
 *
 **************************************
 *
 * Functional description
 *	Used to make sure that local calls to print stuff go to isqlGlob.Out
 *	and not to stdout if isc_version gets called.
 *
 **************************************/

	isqlGlob.printf("%s%s", string, NEWLINE);
}


static void remove_delimited_double_quotes(TEXT* string)
{
/**************************************
 *
 *	r e m o v e _ d e l i m i t e d _ d o u b l e _ q u o t e s
 *
 **************************************
 *
 * Functional description
 *	Remove the delimited double quotes. Blanks could be part of
 *	delimited SQL identifier. Unescape embedded double quotes.
 *
 **************************************/
	ISQL_remove_and_unescape_quotes(string, DBL_QUOTE);
}


static void make_priv_string(USHORT flags, char* string)
{
/**************************************
 *
 *	m a k e _ p r i v _ s t r i n g
 *
 **************************************
 *
 * Functional description
 *	Given a bit-vector of privileges, turn it into a
 *	string list.
 *
 **************************************/
	for (int i = 0; privs[i].priv_string; i++)
	{
		if (flags & privs[i].priv_flag)
		{
			if (*string)
				strcat(string, ", ");
			strcat(string, privs[i].priv_string);
		}
	}
}


static processing_state show_all_tables(SSHORT sys_flag)
{
   struct isc_721_struct {
          char  isc_722 [32];	/* RDB$RELATION_NAME */
          short isc_723;	/* isc_utility */
   } isc_721;
   struct isc_719_struct {
          short isc_720;	/* RDB$SYSTEM_FLAG */
   } isc_719;
   struct isc_726_struct {
          char  isc_727 [32];	/* RDB$RELATION_NAME */
          short isc_728;	/* isc_utility */
   } isc_726;
/**************************************
 *
 *	s h o w _ a l l _ t a b l e s
 *
 **************************************
 *
 *	Print the names of all user tables from
 *	rdb$relations.  We use a dynamic query
 *
 *	Parameters:  sys_flag -- 0, show user tables
 *	1, show system tables only; -1, show views only
 *
 **************************************/
	bool odd = true;
	bool first = true;

	if (sys_flag == -1)
	{
		// Views
		/*FOR REL IN RDB$RELATIONS WITH
			REL.RDB$VIEW_BLR NOT MISSING
			SORTED BY REL.RDB$RELATION_NAME*/
		{
                if (!isc_724)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_724, (short) sizeof(isc_725), (char*) isc_725);
		if (isc_724)
		   {
                   isc_start_request (isc_status, (FB_API_HANDLE*) &isc_724, (FB_API_HANDLE*) &gds_trans, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_724, (short) 0, (short) 34, &isc_726, (short) 0);
		   if (!isc_726.isc_728 || isc_status [1]) break;

			first = false;
			isqlGlob.printf("%38s%s", /*REL.RDB$RELATION_NAME*/
						  isc_726.isc_727, (odd ? " " : NEWLINE));
			odd = !odd;

		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}
	}
	else // 23-Apr-2004 (only tables)
	{
		// The rdb$system_flag is not always set for non-system objects... this
		// query may potentially fail.
		/*FOR REL IN RDB$RELATIONS WITH
			(REL.RDB$SYSTEM_FLAG EQ sys_flag
				*//*OR (sys_flag == 0 AND REL.RDB$SYSTEM_FLAG MISSING)*//*)
			AND REL.RDB$VIEW_BLR MISSING
			SORTED BY REL.RDB$RELATION_NAME*/
		{
                if (!isc_717)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_717, (short) sizeof(isc_718), (char*) isc_718);
		isc_719.isc_720 = sys_flag;
		if (isc_717)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_717, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 2, &isc_719, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_717, (short) 1, (short) 34, &isc_721, (short) 0);
		   if (!isc_721.isc_723 || isc_status [1]) break;

			first = false;
			isqlGlob.printf("%38s%s", /*REL.RDB$RELATION_NAME*/
						  isc_721.isc_722, (odd ? " " : NEWLINE));
			odd = !odd;

		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}
	}

	if (!first)
	{
		isqlGlob.printf(NEWLINE);
		return SKIP;
	}

	return OBJECT_NOT_FOUND;
}


static void show_charsets(const SCHAR* relation_name, const SCHAR* field_name,
						  bool show_charset, bool show_collation,
						  bool doIndent, bool doNewLine)
{
   struct isc_698_struct {
          short isc_699;	/* isc_utility */
          short isc_700;	/* gds__null_flag */
          short isc_701;	/* RDB$COLLATION_ID */
          short isc_702;	/* gds__null_flag */
          short isc_703;	/* RDB$CHARACTER_SET_ID */
   } isc_698;
   struct isc_696_struct {
          char  isc_697 [32];	/* RDB$FIELD_NAME */
   } isc_696;
   struct isc_709_struct {
          short isc_710;	/* isc_utility */
          short isc_711;	/* gds__null_flag */
          short isc_712;	/* RDB$COLLATION_ID */
          short isc_713;	/* gds__null_flag */
          short isc_714;	/* RDB$COLLATION_ID */
          short isc_715;	/* gds__null_flag */
          short isc_716;	/* RDB$CHARACTER_SET_ID */
   } isc_709;
   struct isc_706_struct {
          char  isc_707 [32];	/* RDB$RELATION_NAME */
          char  isc_708 [32];	/* RDB$FIELD_NAME */
   } isc_706;
/*************************************
*
*	s h o w _ c h a r s e t s
*
**************************************
*
* Functional description
*	Show character set and collations
*
**************************************/
	SSHORT collation = -1, char_set_id = -1;
	const SSHORT default_char_set_id = ISQL_get_default_char_set_id();

// If there is a relation_name, this is a real column, look up collation
// in rdb$relation_fields

	if (relation_name)
	{
		/*FOR RRF IN RDB$RELATION_FIELDS CROSS
			FLD IN RDB$FIELDS
			WITH RRF.RDB$FIELD_NAME EQ field_name AND
			RRF.RDB$RELATION_NAME EQ relation_name AND
			RRF.RDB$FIELD_SOURCE EQ FLD.RDB$FIELD_NAME*/
		{
                if (!isc_704)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_704, (short) sizeof(isc_705), (char*) isc_705);
		isc_vtov ((const char*) relation_name, (char*) isc_706.isc_707, 32);
		isc_vtov ((const char*) field_name, (char*) isc_706.isc_708, 32);
		if (isc_704)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_704, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 64, &isc_706, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_704, (short) 1, (short) 14, &isc_709, (short) 0);
		   if (!isc_709.isc_710 || isc_status [1]) break;

			char_set_id = 0;
			if (!/*FLD.RDB$CHARACTER_SET_ID.NULL*/
			     isc_709.isc_715)
				char_set_id = /*FLD.RDB$CHARACTER_SET_ID*/
					      isc_709.isc_716;
			collation = 0;
			if (!/*RRF.RDB$COLLATION_ID.NULL*/
			     isc_709.isc_713)
				collation = /*RRF.RDB$COLLATION_ID*/
					    isc_709.isc_714;
			else if (!/*FLD.RDB$COLLATION_ID.NULL*/
				  isc_709.isc_711)
				collation = /*FLD.RDB$COLLATION_ID*/
					    isc_709.isc_712;
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
#ifdef DEV_BUILD
			fprintf(stderr, "show_charsets(%s %s) failed\n", relation_name, field_name);
#endif
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR FLD IN RDB$FIELDS WITH
			FLD.RDB$FIELD_NAME EQ field_name*/
		{
                if (!isc_694)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_694, (short) sizeof(isc_695), (char*) isc_695);
		isc_vtov ((const char*) field_name, (char*) isc_696.isc_697, 32);
		if (isc_694)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_694, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_696, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_694, (short) 1, (short) 10, &isc_698, (short) 0);
		   if (!isc_698.isc_699 || isc_status [1]) break;

			char_set_id = 0;
			collation = 0;
			if (!/*FLD.RDB$CHARACTER_SET_ID.NULL*/
			     isc_698.isc_702)
				char_set_id = /*FLD.RDB$CHARACTER_SET_ID*/
					      isc_698.isc_703;
			if (!/*FLD.RDB$COLLATION_ID.NULL*/
			     isc_698.isc_700)
				collation = /*FLD.RDB$COLLATION_ID*/
					    isc_698.isc_701;
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
#ifdef DEV_BUILD
			fprintf(stderr, "show_charsets(NULL %s) failed\n",
					   field_name);
#endif
		/*END_ERROR;*/
		   }
		}
	}

	TEXT char_sets[86];			/* CHARACTER SET <name31> COLLATE <name31> */
	char_sets[0] = 0;
	if ((char_set_id != default_char_set_id) || collation)
	{
		if (show_charset && !show_collation)
			ISQL_get_character_sets(char_set_id, 0, false, false, char_sets);
		else if (!show_charset && show_collation)
			ISQL_get_character_sets(char_set_id, collation, true, false, char_sets);
		else
			ISQL_get_character_sets(char_set_id, collation, false, false, char_sets);
	}
	if (char_sets[0])
	{
		if (doIndent)
			isqlGlob.printf(spaces);
		isqlGlob.prints(char_sets);
		if (doNewLine)
			isqlGlob.printf(NEWLINE);
	}
}


static void show_proc_charsets(const SCHAR* procedure_name, const SCHAR* parameter_name,
							   bool show_charset, bool show_collation,
							   bool doIndent)
{
   struct isc_657_struct {
          short isc_658;	/* isc_utility */
          short isc_659;	/* gds__null_flag */
          short isc_660;	/* RDB$COLLATION_ID */
          short isc_661;	/* gds__null_flag */
          short isc_662;	/* RDB$CHARACTER_SET_ID */
   } isc_657;
   struct isc_655_struct {
          char  isc_656 [32];	/* RDB$FIELD_NAME */
   } isc_655;
   struct isc_668_struct {
          short isc_669;	/* isc_utility */
          short isc_670;	/* gds__null_flag */
          short isc_671;	/* RDB$COLLATION_ID */
   } isc_668;
   struct isc_665_struct {
          char  isc_666 [32];	/* RDB$PARAMETER_NAME */
          char  isc_667 [32];	/* RDB$PROCEDURE_NAME */
   } isc_665;
   struct isc_677_struct {
          short isc_678;	/* isc_utility */
          short isc_679;	/* gds__null_flag */
          short isc_680;	/* RDB$COLLATION_ID */
   } isc_677;
   struct isc_674_struct {
          char  isc_675 [32];	/* RDB$PARAMETER_NAME */
          char  isc_676 [32];	/* RDB$PROCEDURE_NAME */
   } isc_674;
   struct isc_686_struct {
          char  isc_687 [32];	/* RDB$PARAMETER_NAME */
          char  isc_688 [32];	/* RDB$PROCEDURE_NAME */
          short isc_689;	/* isc_utility */
          short isc_690;	/* gds__null_flag */
          short isc_691;	/* RDB$COLLATION_ID */
          short isc_692;	/* gds__null_flag */
          short isc_693;	/* RDB$CHARACTER_SET_ID */
   } isc_686;
   struct isc_683_struct {
          char  isc_684 [32];	/* RDB$PROCEDURE_NAME */
          char  isc_685 [32];	/* RDB$PARAMETER_NAME */
   } isc_683;
	SSHORT collation = -1, char_set_id = -1;
	const SSHORT default_char_set_id = ISQL_get_default_char_set_id();

	// If there is a procedure_name, this is a real column, look up collation
	// in rdb$procedure_parameters

	if (procedure_name)
	{
		/*FOR PRP IN RDB$PROCEDURE_PARAMETERS CROSS
			FLD IN RDB$FIELDS
			WITH PRP.RDB$PARAMETER_NAME EQ parameter_name AND
			PRP.RDB$PROCEDURE_NAME EQ procedure_name AND
			PRP.RDB$FIELD_SOURCE EQ FLD.RDB$FIELD_NAME*/
		{
                if (!isc_681)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_681, (short) sizeof(isc_682), (char*) isc_682);
		isc_vtov ((const char*) procedure_name, (char*) isc_683.isc_684, 32);
		isc_vtov ((const char*) parameter_name, (char*) isc_683.isc_685, 32);
		if (isc_681)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_681, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 64, &isc_683, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_681, (short) 1, (short) 74, &isc_686, (short) 0);
		   if (!isc_686.isc_689 || isc_status [1]) break;

			char_set_id = 0;
			if (!/*FLD.RDB$CHARACTER_SET_ID.NULL*/
			     isc_686.isc_692)
				char_set_id = /*FLD.RDB$CHARACTER_SET_ID*/
					      isc_686.isc_693;

			bool prp_collation_null = true;
			collation = 0;

			if (ENCODE_ODS(isqlGlob.major_ods, isqlGlob.minor_ods) >= ODS_11_1)
			{
				/*FOR PRP2 IN RDB$PROCEDURE_PARAMETERS
					WITH PRP2.RDB$PROCEDURE_NAME EQ PRP.RDB$PROCEDURE_NAME AND
						 PRP2.RDB$PARAMETER_NAME EQ PRP.RDB$PARAMETER_NAME*/
				{
                                if (!isc_672)
                                   isc_compile_request2 (NULL, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_672, (short) sizeof(isc_673), (char*) isc_673);
				isc_vtov ((const char*) isc_686.isc_687, (char*) isc_674.isc_675, 32);
				isc_vtov ((const char*) isc_686.isc_688, (char*) isc_674.isc_676, 32);
                                isc_start_and_send (NULL, (FB_API_HANDLE*) &isc_672, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 64, &isc_674, (short) 0);
				while (1)
				   {
                                   isc_receive (NULL, (FB_API_HANDLE*) &isc_672, (short) 1, (short) 6, &isc_677, (short) 0);
				   if (!isc_677.isc_678) break;

					prp_collation_null = /*PRP2.RDB$COLLATION_ID.NULL*/
							     isc_677.isc_679;
					if (!prp_collation_null)
						collation = /*PRP2.RDB$COLLATION_ID*/
							    isc_677.isc_680;
				/*END_FOR*/
				   }
				}
			}

			if (prp_collation_null &&
				ENCODE_ODS(isqlGlob.major_ods, isqlGlob.minor_ods) >= ODS_11_2)
			{
				/*FOR PRP2 IN RDB$PROCEDURE_PARAMETERS CROSS
					RFL IN RDB$RELATION_FIELDS
					WITH PRP2.RDB$PROCEDURE_NAME EQ PRP.RDB$PROCEDURE_NAME AND
						 PRP2.RDB$PARAMETER_NAME EQ PRP.RDB$PARAMETER_NAME AND
						 RFL.RDB$RELATION_NAME = PRP2.RDB$RELATION_NAME AND
						 RFL.RDB$FIELD_NAME = PRP2.RDB$FIELD_NAME*/
				{
                                if (!isc_663)
                                   isc_compile_request2 (NULL, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_663, (short) sizeof(isc_664), (char*) isc_664);
				isc_vtov ((const char*) isc_686.isc_687, (char*) isc_665.isc_666, 32);
				isc_vtov ((const char*) isc_686.isc_688, (char*) isc_665.isc_667, 32);
                                isc_start_and_send (NULL, (FB_API_HANDLE*) &isc_663, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 64, &isc_665, (short) 0);
				while (1)
				   {
                                   isc_receive (NULL, (FB_API_HANDLE*) &isc_663, (short) 1, (short) 6, &isc_668, (short) 0);
				   if (!isc_668.isc_669) break;

					prp_collation_null = /*RFL.RDB$COLLATION_ID.NULL*/
							     isc_668.isc_670;
					if (!prp_collation_null)
						collation = /*RFL.RDB$COLLATION_ID*/
							    isc_668.isc_671;
				/*END_FOR*/
				   }
				}
			}

			if (prp_collation_null && !/*FLD.RDB$COLLATION_ID.NULL*/
						   isc_686.isc_690)
				collation = /*FLD.RDB$COLLATION_ID*/
					    isc_686.isc_691;
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
#ifdef DEV_BUILD
			fprintf(stderr, "show_proc_charsets(%s %s) failed\n",
					   procedure_name, parameter_name);
#endif
		/*END_ERROR;*/
		   }
		}
	}
	else
	{
		/*FOR FLD IN RDB$FIELDS WITH
			FLD.RDB$FIELD_NAME EQ parameter_name*/
		{
                if (!isc_653)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_653, (short) sizeof(isc_654), (char*) isc_654);
		isc_vtov ((const char*) parameter_name, (char*) isc_655.isc_656, 32);
		if (isc_653)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_653, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_655, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_653, (short) 1, (short) 10, &isc_657, (short) 0);
		   if (!isc_657.isc_658 || isc_status [1]) break;

			char_set_id = 0;
			collation = 0;
			if (!/*FLD.RDB$CHARACTER_SET_ID.NULL*/
			     isc_657.isc_661)
				char_set_id = /*FLD.RDB$CHARACTER_SET_ID*/
					      isc_657.isc_662;
			if (!/*FLD.RDB$COLLATION_ID.NULL*/
			     isc_657.isc_659)
				collation = /*FLD.RDB$COLLATION_ID*/
					    isc_657.isc_660;
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
#ifdef DEV_BUILD
			fprintf(stderr, "show_proc_charsets(NULL %s) failed\n", parameter_name);
#endif
		/*END_ERROR;*/
		   }
		}
	}

	TEXT char_sets[86];			/* CHARACTER SET <name31> COLLATE <name31> */
	char_sets[0] = 0;
	if ((char_set_id != default_char_set_id) || collation)
	{
		if (show_charset && !show_collation)
			ISQL_get_character_sets(char_set_id, 0, false, false, char_sets);
		else if (!show_charset && show_collation)
			ISQL_get_character_sets(char_set_id, collation, true, false, char_sets);
		else
			ISQL_get_character_sets(char_set_id, collation, false, false, char_sets);
	}

	if (char_sets[0])
	{
		if (doIndent)
			isqlGlob.printf(spaces);
		isqlGlob.prints(char_sets);
	}
}


static processing_state show_check(const SCHAR* object)
{
   struct isc_648_struct {
          ISC_QUAD isc_649;	/* RDB$TRIGGER_SOURCE */
          char  isc_650 [32];	/* RDB$CONSTRAINT_NAME */
          short isc_651;	/* isc_utility */
          short isc_652;	/* gds__null_flag */
   } isc_648;
   struct isc_645_struct {
          char  isc_646 [32];	/* RDB$RELATION_NAME */
          short isc_647;	/* RDB$SYSTEM_FLAG */
   } isc_645;
/**************************************
 *
 *	s h o w _ c h e c k
 *
 **************************************
 *
 * Functional description
 *	Show check constraints for the named object
 *
 **************************************/
	bool first = true;

	if (!*object)
		return ps_ERR;
// Query gets the check clauses for triggers stored for check constraints

	/*FOR TRG IN RDB$TRIGGERS CROSS
		CHK IN RDB$CHECK_CONSTRAINTS WITH
		TRG.RDB$TRIGGER_TYPE EQ 1 AND
		TRG.RDB$TRIGGER_NAME EQ CHK.RDB$TRIGGER_NAME AND
		//CHK.RDB$TRIGGER_NAME STARTING WITH "CHECK" AND
		TRG.RDB$SYSTEM_FLAG EQ int(fb_sysflag_check_constraint) AND
		TRG.RDB$RELATION_NAME EQ object
		SORTED BY CHK.RDB$CONSTRAINT_NAME*/
	{
        if (!isc_643)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_643, (short) sizeof(isc_644), (char*) isc_644);
	isc_vtov ((const char*) object, (char*) isc_645.isc_646, 32);
	isc_645.isc_647 = int(fb_sysflag_check_constraint);
	if (isc_643)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_643, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 34, &isc_645, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_643, (short) 1, (short) 44, &isc_648, (short) 0);
	   if (!isc_648.isc_651 || isc_status [1]) break;

		// Use print_blob to print the blob
		first = false;

		isqlGlob.printf("CONSTRAINT %s:%s  ",
			fb_utils::exact_name(/*CHK.RDB$CONSTRAINT_NAME*/
					     isc_648.isc_650), NEWLINE);

		if (!/*TRG.RDB$TRIGGER_SOURCE.NULL*/
		     isc_648.isc_652)
			SHOW_print_metadata_text_blob (isqlGlob.Out, &/*TRG.RDB$TRIGGER_SOURCE*/
								      isc_648.isc_649);
		isqlGlob.printf(NEWLINE);

	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR;*/
	   }
	}
	if (first)
		return (OBJECT_NOT_FOUND);
	return (SKIP);
}


static processing_state show_collations(const SCHAR* object, SSHORT sys_flag, const char* msg, bool compact)
{
   struct isc_631_struct {
          ISC_QUAD isc_632;	/* RDB$SPECIFIC_ATTRIBUTES */
          char  isc_633 [32];	/* RDB$BASE_COLLATION_NAME */
          char  isc_634 [32];	/* RDB$CHARACTER_SET_NAME */
          char  isc_635 [32];	/* RDB$COLLATION_NAME */
          short isc_636;	/* isc_utility */
          short isc_637;	/* gds__null_flag */
          short isc_638;	/* gds__null_flag */
          short isc_639;	/* RDB$COLLATION_ATTRIBUTES */
          short isc_640;	/* gds__null_flag */
          short isc_641;	/* gds__null_flag */
          short isc_642;	/* RDB$SYSTEM_FLAG */
   } isc_631;
/**************************************
 *
 *	s h o w _ c o l l a t i o n s
 *
 **************************************
 *
 * Functional description
 *	Show collations.
 *
 **************************************/
	bool found = false;
	bool odd = true;

	// Show all collations or named collation
	/*FOR CL IN RDB$COLLATIONS CROSS
		CS IN RDB$CHARACTER_SETS WITH
		CS.RDB$CHARACTER_SET_ID EQ CL.RDB$CHARACTER_SET_ID
		SORTED BY CL.RDB$COLLATION_NAME*/
	{
        if (!isc_629)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_629, (short) sizeof(isc_630), (char*) isc_630);
	if (isc_629)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_629, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_629, (short) 0, (short) 118, &isc_631, (short) 0);
	   if (!isc_631.isc_636 || isc_status [1]) break;

		fb_utils::exact_name(/*CL.RDB$COLLATION_NAME*/
				     isc_631.isc_635);

		if ((!*object &&
			 (!/*CL.RDB$SYSTEM_FLAG.NULL*/
			   isc_631.isc_641 && /*CL.RDB$SYSTEM_FLAG*/
    isc_631.isc_642 != 0 && sys_flag != 0 ||
			  !(!/*CL.RDB$SYSTEM_FLAG.NULL*/
			     isc_631.isc_641 && /*CL.RDB$SYSTEM_FLAG*/
    isc_631.isc_642 != 0) && sys_flag != 1)) ||
			strcmp(/*CL.RDB$COLLATION_NAME*/
			       isc_631.isc_635, object) == 0)
		{
			if (!found)
			{
				found = true;

				if (msg)
					isqlGlob.printf("%s%s", msg, NEWLINE);
			}

			if (compact)
			{
				isqlGlob.printf("       %-31s%s", /*CL.RDB$COLLATION_NAME*/
								  isc_631.isc_635, (odd ? " " : NEWLINE));
				odd = !odd;
			}
			else
			{
				isqlGlob.printf("%s", /*CL.RDB$COLLATION_NAME*/
						      isc_631.isc_635);

				fb_utils::exact_name(/*CS.RDB$CHARACTER_SET_NAME*/
						     isc_631.isc_634);
				isqlGlob.printf(", CHARACTER SET %s", /*CS.RDB$CHARACTER_SET_NAME*/
								      isc_631.isc_634);

				if (!/*CL.RDB$BASE_COLLATION_NAME.NULL*/
				     isc_631.isc_640)
				{
					fb_utils::exact_name(/*CL.RDB$BASE_COLLATION_NAME*/
							     isc_631.isc_633);
					isqlGlob.printf(", FROM EXTERNAL ('%s')", /*CL.RDB$BASE_COLLATION_NAME*/
										  isc_631.isc_633);
				}

				if (!/*CL.RDB$COLLATION_ATTRIBUTES.NULL*/
				     isc_631.isc_638)
				{
					if (/*CL.RDB$COLLATION_ATTRIBUTES*/
					    isc_631.isc_639 & TEXTTYPE_ATTR_PAD_SPACE)
						isqlGlob.printf(", PAD SPACE");

					if (/*CL.RDB$COLLATION_ATTRIBUTES*/
					    isc_631.isc_639 & TEXTTYPE_ATTR_CASE_INSENSITIVE)
						isqlGlob.printf(", CASE INSENSITIVE");

					if (/*CL.RDB$COLLATION_ATTRIBUTES*/
					    isc_631.isc_639 & TEXTTYPE_ATTR_ACCENT_INSENSITIVE)
						isqlGlob.printf(", ACCENT INSENSITIVE");
				}

				if (!/*CL.RDB$SPECIFIC_ATTRIBUTES.NULL*/
				     isc_631.isc_637)
				{
					isqlGlob.printf(", '");
					SHOW_print_metadata_text_blob (isqlGlob.Out, &/*CL.RDB$SPECIFIC_ATTRIBUTES*/
										      isc_631.isc_632);
					isqlGlob.printf("'");
				}

				if (!/*CL.RDB$SYSTEM_FLAG.NULL*/
				     isc_631.isc_641 && /*CL.RDB$SYSTEM_FLAG*/
    isc_631.isc_642 != 0)
					isqlGlob.printf(", SYSTEM");

				isqlGlob.printf("%s", NEWLINE);
			}
		}
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR;*/
	   }
	}

	if (!found)
		return (OBJECT_NOT_FOUND);

	isqlGlob.printf(NEWLINE);

	return SKIP;
}


// ***********************
// s h o w _ c o m m e n t
// ***********************
// Helper that displays in correct syntax the COMMENT ON command for each object.
// It escapes identifiers with embedded double quotes and escapes the comment
// itself if it contains single quotes when we are honoring script extraction.
static void show_comment(const char* objtype, char* name1, char* name2,
	ISC_QUAD* blobfld, const commentMode showextract, const char* banner)
{
	const bool escape_quotes = showextract == cmmExtract;

	if (escape_quotes && banner)
		isqlGlob.prints(banner);

	if (name1)
		fb_utils::exact_name(name1);
	if (name2)
		fb_utils::exact_name(name2);

	char SQL_identifier2[BUFFER_LENGTH128];
	if (escape_quotes && isqlGlob.db_SQL_dialect > SQL_DIALECT_V6_TRANSITION)
	{
		if (name1)
		{
			ISQL_copy_SQL_id (name1, SQL_identifier, DBL_QUOTE);
			name1 = SQL_identifier;
		}
		if (name2)
		{
			ISQL_copy_SQL_id (name2, SQL_identifier2, DBL_QUOTE);
			name2 = SQL_identifier2;
		}
	}

	const char* quot = escape_quotes ? "'" : "";

	if (!name1)
		isqlGlob.printf("COMMENT ON %-12s IS %s", objtype, quot);
	else if (!name2)
		isqlGlob.printf("COMMENT ON %-12s %s IS %s", objtype, name1, quot);
	else
		isqlGlob.printf("COMMENT ON %-12s %s.%s IS %s", objtype, name1, name2, quot);

	SHOW_print_metadata_text_blob(isqlGlob.Out, blobfld, escape_quotes);
	isqlGlob.printf("%s%s%s", quot, isqlGlob.global_Term, NEWLINE);
}


// *************************
// s h o w _ c o m m e n t s
// *************************
// Will extract and show descriptions (comments) for all supported db objects.
// This function does its task even if the server version doesn't support
// the COMMENT ON command. It will however skip generators and roles that
// didn't have description fields before ODS11.
// It will extract the main objects by category and inside each category,
// in alphabetical order. For tables and views, their fields are printed
// immediately after the table/field in rdb$field_position order, that's
// the order the users sees when doing a select * from tbl/view. For procedures,
// their parameters are printed immediately after the procedure, first the input
// params by position, the  the output params by position. All system objects
// as well as implicit domains and implicit triggers are skipped. For ODS < 11,
// we skip generators and roles because those system tables didn't have a
// rdb$description field.
// When showing comments, we don't escape quotes in neither names nor strings.
// When extracting comments, we do the usual escaping to make the script valid.
static processing_state show_comments(const commentMode showextract, const char* banner)
{
   struct isc_521_struct {
          ISC_QUAD isc_522;	/* RDB$DESCRIPTION */
          char  isc_523 [32];	/* RDB$COLLATION_NAME */
          short isc_524;	/* isc_utility */
   } isc_521;
   struct isc_527_struct {
          ISC_QUAD isc_528;	/* RDB$DESCRIPTION */
          char  isc_529 [32];	/* RDB$CHARACTER_SET_NAME */
          short isc_530;	/* isc_utility */
   } isc_527;
   struct isc_533_struct {
          ISC_QUAD isc_534;	/* RDB$DESCRIPTION */
          char  isc_535 [32];	/* RDB$ROLE_NAME */
          short isc_536;	/* isc_utility */
   } isc_533;
   struct isc_539_struct {
          ISC_QUAD isc_540;	/* RDB$DESCRIPTION */
          char  isc_541 [32];	/* RDB$INDEX_NAME */
          short isc_542;	/* isc_utility */
   } isc_539;
   struct isc_545_struct {
          ISC_QUAD isc_546;	/* RDB$DESCRIPTION */
          char  isc_547 [32];	/* RDB$GENERATOR_NAME */
          short isc_548;	/* isc_utility */
   } isc_545;
   struct isc_551_struct {
          ISC_QUAD isc_552;	/* RDB$DESCRIPTION */
          char  isc_553 [32];	/* RDB$EXCEPTION_NAME */
          short isc_554;	/* isc_utility */
   } isc_551;
   struct isc_557_struct {
          ISC_QUAD isc_558;	/* RDB$DESCRIPTION */
          char  isc_559 [32];	/* RDB$FUNCTION_NAME */
          short isc_560;	/* isc_utility */
   } isc_557;
   struct isc_563_struct {
          char  isc_564 [32];	/* RDB$FUNCTION_NAME */
          ISC_QUAD isc_565;	/* RDB$DESCRIPTION */
          short isc_566;	/* isc_utility */
   } isc_563;
   struct isc_569_struct {
          ISC_QUAD isc_570;	/* RDB$DESCRIPTION */
          char  isc_571 [32];	/* RDB$TRIGGER_NAME */
          short isc_572;	/* isc_utility */
   } isc_569;
   struct isc_577_struct {
          ISC_QUAD isc_578;	/* RDB$DESCRIPTION */
          char  isc_579 [32];	/* RDB$PARAMETER_NAME */
          short isc_580;	/* isc_utility */
   } isc_577;
   struct isc_575_struct {
          char  isc_576 [32];	/* RDB$PROCEDURE_NAME */
   } isc_575;
   struct isc_583_struct {
          char  isc_584 [32];	/* RDB$PROCEDURE_NAME */
          ISC_QUAD isc_585;	/* RDB$DESCRIPTION */
          short isc_586;	/* isc_utility */
          short isc_587;	/* gds__null_flag */
   } isc_583;
   struct isc_592_struct {
          ISC_QUAD isc_593;	/* RDB$DESCRIPTION */
          char  isc_594 [32];	/* RDB$FIELD_NAME */
          short isc_595;	/* isc_utility */
   } isc_592;
   struct isc_590_struct {
          char  isc_591 [32];	/* RDB$RELATION_NAME */
   } isc_590;
   struct isc_598_struct {
          char  isc_599 [32];	/* RDB$RELATION_NAME */
          ISC_QUAD isc_600;	/* RDB$DESCRIPTION */
          short isc_601;	/* isc_utility */
          short isc_602;	/* gds__null_flag */
   } isc_598;
   struct isc_607_struct {
          ISC_QUAD isc_608;	/* RDB$DESCRIPTION */
          char  isc_609 [32];	/* RDB$FIELD_NAME */
          short isc_610;	/* isc_utility */
   } isc_607;
   struct isc_605_struct {
          char  isc_606 [32];	/* RDB$RELATION_NAME */
   } isc_605;
   struct isc_613_struct {
          char  isc_614 [32];	/* RDB$RELATION_NAME */
          ISC_QUAD isc_615;	/* RDB$DESCRIPTION */
          short isc_616;	/* isc_utility */
          short isc_617;	/* gds__null_flag */
   } isc_613;
   struct isc_620_struct {
          ISC_QUAD isc_621;	/* RDB$DESCRIPTION */
          char  isc_622 [32];	/* RDB$FIELD_NAME */
          short isc_623;	/* isc_utility */
   } isc_620;
   struct isc_626_struct {
          ISC_QUAD isc_627;	/* RDB$DESCRIPTION */
          short isc_628;	/* isc_utility */
   } isc_626;
// From dsql.h:
//	ddl_database, ddl_domain, ddl_relation, ddl_view, ddl_procedure, ddl_trigger,
//	ddl_udf, ddl_blob_filter, ddl_exception, ddl_generator, ddl_index, ddl_role,
//	ddl_charset, ddl_collation//, ddl_sec_class

	bool first = true;

	/*FOR FIRST 1 DT IN RDB$DATABASE
		WITH DT.RDB$DESCRIPTION NOT MISSING*/
	{
        if (!isc_624)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_624, (short) sizeof(isc_625), (char*) isc_625);
	if (isc_624)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_624, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_624, (short) 0, (short) 10, &isc_626, (short) 0);
	   if (!isc_626.isc_628 || isc_status [1]) break;

		show_comment("DATABASE", 0, 0, &/*DT.RDB$DESCRIPTION*/
						isc_626.isc_627, showextract, first ? banner : 0);
		first = false;
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	/*FOR DM IN RDB$FIELDS
	WITH DM.RDB$FIELD_NAME NOT MATCHING "RDB$+" USING "+=[0-9][0-9]* *"
		AND (DM.RDB$SYSTEM_FLAG EQ 0 OR DM.RDB$SYSTEM_FLAG MISSING)
		AND DM.RDB$DESCRIPTION NOT MISSING
		SORTED BY DM.RDB$FIELD_NAME*/
	{
        if (!isc_618)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_618, (short) sizeof(isc_619), (char*) isc_619);
	if (isc_618)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_618, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_618, (short) 0, (short) 42, &isc_620, (short) 0);
	   if (!isc_620.isc_623 || isc_status [1]) break;

		show_comment("DOMAIN", /*DM.RDB$FIELD_NAME*/
				       isc_620.isc_622, 0, &/*DM.RDB$DESCRIPTION*/
      isc_620.isc_621,
			showextract, first ? banner : 0);
		first = false;
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	/*FOR RL IN RDB$RELATIONS
		WITH RL.RDB$VIEW_BLR MISSING
		AND (RL.RDB$SYSTEM_FLAG EQ 0 OR RL.RDB$SYSTEM_FLAG MISSING)
		SORTED BY RL.RDB$RELATION_NAME*/
	{
        if (!isc_611)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_611, (short) sizeof(isc_612), (char*) isc_612);
	if (isc_611)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_611, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_611, (short) 0, (short) 44, &isc_613, (short) 0);
	   if (!isc_613.isc_616 || isc_status [1]) break;

		if (!/*RL.RDB$DESCRIPTION.NULL*/
		     isc_613.isc_617 && !UserBlob::blobIsNull(/*RL.RDB$DESCRIPTION*/
			  isc_613.isc_615))
		{
			show_comment("TABLE", /*RL.RDB$RELATION_NAME*/
					      isc_613.isc_614, 0, &/*RL.RDB$DESCRIPTION*/
      isc_613.isc_615,
				showextract, first ? banner : 0);
			first = false;
		}

		/*FOR RF IN RDB$RELATION_FIELDS
			WITH RF.RDB$RELATION_NAME = RL.RDB$RELATION_NAME
			AND RF.RDB$DESCRIPTION NOT MISSING
			SORTED BY RF.RDB$FIELD_POSITION*/
		{
                if (!isc_603)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_603, (short) sizeof(isc_604), (char*) isc_604);
		isc_vtov ((const char*) isc_613.isc_614, (char*) isc_605.isc_606, 32);
		if (isc_603)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_603, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_605, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_603, (short) 1, (short) 42, &isc_607, (short) 0);
		   if (!isc_607.isc_610 || isc_status [1]) break;

			show_comment("   COLUMN", /*RL.RDB$RELATION_NAME*/
						  isc_613.isc_614, /*RF.RDB$FIELD_NAME*/
  isc_607.isc_609,
				&/*RF.RDB$DESCRIPTION*/
				 isc_607.isc_608, showextract, first ? banner : 0);
			first = false;
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR*/
		   }
		}

	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	/*FOR VW IN RDB$RELATIONS
		WITH VW.RDB$VIEW_BLR NOT MISSING
		AND (VW.RDB$SYSTEM_FLAG EQ 0 OR VW.RDB$SYSTEM_FLAG MISSING)
		SORTED BY VW.RDB$RELATION_NAME*/
	{
        if (!isc_596)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_596, (short) sizeof(isc_597), (char*) isc_597);
	if (isc_596)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_596, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_596, (short) 0, (short) 44, &isc_598, (short) 0);
	   if (!isc_598.isc_601 || isc_status [1]) break;

		if (!/*VW.RDB$DESCRIPTION.NULL*/
		     isc_598.isc_602 && !UserBlob::blobIsNull(/*VW.RDB$DESCRIPTION*/
			  isc_598.isc_600))
		{
			show_comment("VIEW", /*VW.RDB$RELATION_NAME*/
					     isc_598.isc_599, 0 , &/*VW.RDB$DESCRIPTION*/
       isc_598.isc_600,
				showextract, first ? banner : 0);
			first = false;
		}

		/*FOR RF IN RDB$RELATION_FIELDS
			WITH RF.RDB$RELATION_NAME = VW.RDB$RELATION_NAME
			AND RF.RDB$DESCRIPTION NOT MISSING
			SORTED BY RF.RDB$FIELD_POSITION*/
		{
                if (!isc_588)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_588, (short) sizeof(isc_589), (char*) isc_589);
		isc_vtov ((const char*) isc_598.isc_599, (char*) isc_590.isc_591, 32);
		if (isc_588)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_588, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_590, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_588, (short) 1, (short) 42, &isc_592, (short) 0);
		   if (!isc_592.isc_595 || isc_status [1]) break;

			show_comment("   COLUMN", /*VW.RDB$RELATION_NAME*/
						  isc_598.isc_599, /*RF.RDB$FIELD_NAME*/
  isc_592.isc_594,
				&/*RF.RDB$DESCRIPTION*/
				 isc_592.isc_593, showextract, first ? banner : 0);
			first = false;
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR*/
		   }
		}

	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	/*FOR PR IN RDB$PROCEDURES
		WITH (PR.RDB$SYSTEM_FLAG EQ 0 OR PR.RDB$SYSTEM_FLAG MISSING)
		SORTED BY PR.RDB$PROCEDURE_NAME*/
	{
        if (!isc_581)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_581, (short) sizeof(isc_582), (char*) isc_582);
	if (isc_581)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_581, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_581, (short) 0, (short) 44, &isc_583, (short) 0);
	   if (!isc_583.isc_586 || isc_status [1]) break;

		if (!/*PR.RDB$DESCRIPTION.NULL*/
		     isc_583.isc_587 && !UserBlob::blobIsNull(/*PR.RDB$DESCRIPTION*/
			  isc_583.isc_585))
		{
			show_comment("PROCEDURE", /*PR.RDB$PROCEDURE_NAME*/
						  isc_583.isc_584, 0, &/*PR.RDB$DESCRIPTION*/
      isc_583.isc_585,
				showextract, first ? banner : 0);
			first = false;
		}

		/*FOR PA IN RDB$PROCEDURE_PARAMETERS
			WITH PA.RDB$PROCEDURE_NAME = PR.RDB$PROCEDURE_NAME
			AND PA.RDB$DESCRIPTION NOT MISSING
			SORTED BY PA.RDB$PARAMETER_TYPE, PA.RDB$PARAMETER_NUMBER*/
		{
                if (!isc_573)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_573, (short) sizeof(isc_574), (char*) isc_574);
		isc_vtov ((const char*) isc_583.isc_584, (char*) isc_575.isc_576, 32);
		if (isc_573)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_573, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_575, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_573, (short) 1, (short) 42, &isc_577, (short) 0);
		   if (!isc_577.isc_580 || isc_status [1]) break;

			show_comment("   PARAMETER", /*PR.RDB$PROCEDURE_NAME*/
						     isc_583.isc_584, /*PA.RDB$PARAMETER_NAME*/
  isc_577.isc_579,
				&/*PA.RDB$DESCRIPTION*/
				 isc_577.isc_578, showextract, first ? banner : 0);
			first = false;
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR*/
		   }
		}

	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	/*FOR TR IN RDB$TRIGGERS
		WITH TR.RDB$DESCRIPTION NOT MISSING
		AND (TR.RDB$SYSTEM_FLAG EQ 0 OR TR.RDB$SYSTEM_FLAG MISSING)
		SORTED BY TR.RDB$TRIGGER_NAME*/
	{
        if (!isc_567)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_567, (short) sizeof(isc_568), (char*) isc_568);
	if (isc_567)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_567, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_567, (short) 0, (short) 42, &isc_569, (short) 0);
	   if (!isc_569.isc_572 || isc_status [1]) break;

		show_comment("TRIGGER", /*TR.RDB$TRIGGER_NAME*/
					isc_569.isc_571, 0, &/*TR.RDB$DESCRIPTION*/
      isc_569.isc_570,
			showextract, first ? banner : 0);
		first = false;
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	/*FOR UD IN RDB$FUNCTIONS
		WITH UD.RDB$DESCRIPTION NOT MISSING
		AND (UD.RDB$SYSTEM_FLAG EQ 0 OR UD.RDB$SYSTEM_FLAG MISSING)
		SORTED BY UD.RDB$FUNCTION_NAME*/
	{
        if (!isc_561)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_561, (short) sizeof(isc_562), (char*) isc_562);
	if (isc_561)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_561, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_561, (short) 0, (short) 42, &isc_563, (short) 0);
	   if (!isc_563.isc_566 || isc_status [1]) break;

		// Avoid syntax error when extracting scripts due to an historical bug in gbak.
		// See CORE-1174.
		if (UserBlob::blobIsNull(/*UD.RDB$DESCRIPTION*/
					 isc_563.isc_565))
			continue;

		show_comment("EXTERNAL FUNCTION", /*UD.RDB$FUNCTION_NAME*/
						  isc_563.isc_564, 0,
			&/*UD.RDB$DESCRIPTION*/
			 isc_563.isc_565, showextract, first ? banner : 0);
		first = false;
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	/*FOR BF IN RDB$FILTERS
		WITH BF.RDB$DESCRIPTION NOT MISSING
		AND (BF.RDB$SYSTEM_FLAG EQ 0 OR BF.RDB$SYSTEM_FLAG MISSING)
		SORTED BY BF.RDB$FUNCTION_NAME*/
	{
        if (!isc_555)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_555, (short) sizeof(isc_556), (char*) isc_556);
	if (isc_555)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_555, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_555, (short) 0, (short) 42, &isc_557, (short) 0);
	   if (!isc_557.isc_560 || isc_status [1]) break;

		show_comment("FILTER", /*BF.RDB$FUNCTION_NAME*/
				       isc_557.isc_559, 0, &/*BF.RDB$DESCRIPTION*/
      isc_557.isc_558,
			showextract, first ? banner : 0);
		first = false;
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	/*FOR XC IN RDB$EXCEPTIONS
		WITH XC.RDB$DESCRIPTION NOT MISSING
		AND (XC.RDB$SYSTEM_FLAG EQ 0 OR XC.RDB$SYSTEM_FLAG MISSING)
		SORTED BY XC.RDB$EXCEPTION_NAME*/
	{
        if (!isc_549)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_549, (short) sizeof(isc_550), (char*) isc_550);
	if (isc_549)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_549, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_549, (short) 0, (short) 42, &isc_551, (short) 0);
	   if (!isc_551.isc_554 || isc_status [1]) break;

		show_comment("EXCEPTION", /*XC.RDB$EXCEPTION_NAME*/
					  isc_551.isc_553, 0, &/*XC.RDB$DESCRIPTION*/
      isc_551.isc_552,
			showextract, first ? banner : 0);
		first = false;
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	if (isqlGlob.major_ods >= ODS_VERSION11)
	{
		/*FOR GR IN RDB$GENERATORS
			WITH GR.RDB$DESCRIPTION NOT MISSING
			AND (GR.RDB$SYSTEM_FLAG EQ 0 OR GR.RDB$SYSTEM_FLAG MISSING)
			SORTED BY GR.RDB$GENERATOR_NAME*/
		{
                if (!isc_543)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_543, (short) sizeof(isc_544), (char*) isc_544);
		if (isc_543)
		   {
                   isc_start_request (isc_status, (FB_API_HANDLE*) &isc_543, (FB_API_HANDLE*) &gds_trans, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_543, (short) 0, (short) 42, &isc_545, (short) 0);
		   if (!isc_545.isc_548 || isc_status [1]) break;

			show_comment("GENERATOR", /*GR.RDB$GENERATOR_NAME*/
						  isc_545.isc_547, 0, &/*GR.RDB$DESCRIPTION*/
      isc_545.isc_546,
				showextract, first ? banner : 0);
			first = false;
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR*/
		   }
		}
	}

	/*FOR IX IN RDB$INDICES
		WITH IX.RDB$DESCRIPTION NOT MISSING
		AND (IX.RDB$SYSTEM_FLAG EQ 0 OR IX.RDB$SYSTEM_FLAG MISSING)
		SORTED BY IX.RDB$INDEX_NAME*/
	{
        if (!isc_537)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_537, (short) sizeof(isc_538), (char*) isc_538);
	if (isc_537)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_537, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_537, (short) 0, (short) 42, &isc_539, (short) 0);
	   if (!isc_539.isc_542 || isc_status [1]) break;

		show_comment("INDEX", /*IX.RDB$INDEX_NAME*/
				      isc_539.isc_541, 0, &/*IX.RDB$DESCRIPTION*/
      isc_539.isc_540,
			showextract, first ? banner : 0);
		first = false;
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	if (isqlGlob.major_ods >= ODS_VERSION11)
	{
		/*FOR RO IN RDB$ROLES
			WITH RO.RDB$DESCRIPTION NOT MISSING
			AND (RO.RDB$SYSTEM_FLAG EQ 0 OR RO.RDB$SYSTEM_FLAG MISSING)
			SORTED BY RO.RDB$ROLE_NAME*/
		{
                if (!isc_531)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_531, (short) sizeof(isc_532), (char*) isc_532);
		if (isc_531)
		   {
                   isc_start_request (isc_status, (FB_API_HANDLE*) &isc_531, (FB_API_HANDLE*) &gds_trans, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_531, (short) 0, (short) 42, &isc_533, (short) 0);
		   if (!isc_533.isc_536 || isc_status [1]) break;

			show_comment("ROLE", /*RO.RDB$ROLE_NAME*/
					     isc_533.isc_535, 0, &/*RO.RDB$DESCRIPTION*/
      isc_533.isc_534,
				showextract, first ? banner : 0);
			first = false;
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR*/
		   }
		}
	}

	/*FOR CH IN RDB$CHARACTER_SETS
		WITH CH.RDB$DESCRIPTION NOT MISSING
		AND (CH.RDB$SYSTEM_FLAG EQ 0 OR CH.RDB$SYSTEM_FLAG MISSING)
		SORTED BY CH.RDB$CHARACTER_SET_NAME*/
	{
        if (!isc_525)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_525, (short) sizeof(isc_526), (char*) isc_526);
	if (isc_525)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_525, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_525, (short) 0, (short) 42, &isc_527, (short) 0);
	   if (!isc_527.isc_530 || isc_status [1]) break;

		show_comment("CHARACTER SET", /*CH.RDB$CHARACTER_SET_NAME*/
					      isc_527.isc_529, 0,
			&/*CH.RDB$DESCRIPTION*/
			 isc_527.isc_528, showextract, first ? banner : 0);
		first = false;
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	/*FOR CL IN RDB$COLLATIONS
		WITH CL.RDB$DESCRIPTION NOT MISSING
		AND (CL.RDB$SYSTEM_FLAG EQ 0 OR CL.RDB$SYSTEM_FLAG MISSING)
		SORTED BY CL.RDB$COLLATION_NAME*/
	{
        if (!isc_519)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_519, (short) sizeof(isc_520), (char*) isc_520);
	if (isc_519)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_519, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_519, (short) 0, (short) 42, &isc_521, (short) 0);
	   if (!isc_521.isc_524 || isc_status [1]) break;

		show_comment("COLLATION", /*CL.RDB$COLLATION_NAME*/
					  isc_521.isc_523, 0, &/*CL.RDB$DESCRIPTION*/
      isc_521.isc_522,
			showextract, first ? banner : 0);
		first = false;
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	return first ? OBJECT_NOT_FOUND : SKIP;
}


static void show_db()
{
   struct isc_494_struct {
          char  isc_495 [32];	/* RDB$DEFAULT_COLLATE_NAME */
          char  isc_496 [32];	/* RDB$CHARACTER_SET_NAME */
          short isc_497;	/* isc_utility */
          short isc_498;	/* gds__null_flag */
   } isc_494;
   struct isc_501_struct {
          char  isc_502 [256];	/* RDB$FILE_NAME */
          ISC_LONG isc_503;	/* RDB$FILE_START */
          ISC_LONG isc_504;	/* RDB$FILE_LENGTH */
          short isc_505;	/* isc_utility */
          short isc_506;	/* RDB$SHADOW_NUMBER */
          short isc_507;	/* gds__null_flag */
          short isc_508;	/* gds__null_flag */
          short isc_509;	/* RDB$FILE_SEQUENCE */
          short isc_510;	/* gds__null_flag */
          short isc_511;	/* gds__null_flag */
          short isc_512;	/* RDB$FILE_FLAGS */
   } isc_501;
   struct isc_515_struct {
          char  isc_516 [32];	/* RDB$OWNER_NAME */
          short isc_517;	/* isc_utility */
          short isc_518;	/* gds__null_flag */
   } isc_515;
/**************************************
 *
 *	s h o w _ d b
 *
 **************************************
 *
 * Functional description
 *	Show info on this database.  cache, logfiles, etc
 *
 **************************************/

// First print the name of the database

	isqlGlob.printf("Database: %s%s", isqlGlob.global_Db_name, NEWLINE);
// Get the owner name
	/*FOR REL IN RDB$RELATIONS WITH
		REL.RDB$RELATION_NAME = "RDB$DATABASE"*/
	{
        if (!isc_513)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_513, (short) sizeof(isc_514), (char*) isc_514);
	if (isc_513)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_513, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_513, (short) 0, (short) 36, &isc_515, (short) 0);
	   if (!isc_515.isc_517 || isc_status [1]) break;

		if (!/*REL.RDB$OWNER_NAME.NULL*/
		     isc_515.isc_518) {
			isqlGlob.printf("%sOwner: %s%s", TAB_AS_SPACES, /*REL.RDB$OWNER_NAME*/
									isc_515.isc_516, NEWLINE);
		}
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return;
	/*END_ERROR;*/
	   }
	}

// Query for files

	/*FOR FIL IN RDB$FILES SORTED BY FIL.RDB$SHADOW_NUMBER, FIL.RDB$FILE_SEQUENCE,
		FIL.RDB$FILE_SEQUENCE*/
	{
        if (!isc_499)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_499, (short) sizeof(isc_500), (char*) isc_500);
	if (isc_499)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_499, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_499, (short) 0, (short) 280, &isc_501, (short) 0);
	   if (!isc_501.isc_505 || isc_status [1]) break;

		// reset nulls to zero

		if (/*FIL.RDB$FILE_FLAGS.NULL*/
		    isc_501.isc_511)
			/*FIL.RDB$FILE_FLAGS*/
			isc_501.isc_512 = 0;
		if (/*FIL.RDB$FILE_LENGTH.NULL*/
		    isc_501.isc_510)
			/*FIL.RDB$FILE_LENGTH*/
			isc_501.isc_504 = 0;
		if (/*FIL.RDB$FILE_SEQUENCE.NULL*/
		    isc_501.isc_508)
			/*FIL.RDB$FILE_SEQUENCE*/
			isc_501.isc_509 = 0;
		if (/*FIL.RDB$FILE_START.NULL*/
		    isc_501.isc_507)
			/*FIL.RDB$FILE_START*/
			isc_501.isc_503 = 0;

		fb_utils::exact_name(/*FIL.RDB$FILE_NAME*/
				     isc_501.isc_502);

		if (/*FIL.RDB$FILE_FLAGS*/
		    isc_501.isc_512 == 0)
		{
			isqlGlob.printf(" File %d: \"%s\", length %ld, start %ld%s",
					 /*FIL.RDB$FILE_SEQUENCE*/
					 isc_501.isc_509, /*FIL.RDB$FILE_NAME*/
  isc_501.isc_502,
					 /*FIL.RDB$FILE_LENGTH*/
					 isc_501.isc_504, /*FIL.RDB$FILE_START*/
  isc_501.isc_503, NEWLINE);
		}

		if (/*FIL.RDB$FILE_FLAGS*/
		    isc_501.isc_512 & FILE_shadow)
		{
			if (/*FIL.RDB$FILE_SEQUENCE*/
			    isc_501.isc_509) {
				isqlGlob.printf("%sfile %s ", TAB_AS_SPACES, /*FIL.RDB$FILE_NAME*/
									     isc_501.isc_502);
			}
			else
			{
				isqlGlob.printf(" Shadow %d: \"%s\" ", /*FIL.RDB$SHADOW_NUMBER*/
								       isc_501.isc_506, /*FIL.RDB$FILE_NAME*/
  isc_501.isc_502);
				if (/*FIL.RDB$FILE_FLAGS*/
				    isc_501.isc_512 & FILE_inactive) {
					isqlGlob.printf("inactive ");
				}
				if (/*FIL.RDB$FILE_FLAGS*/
				    isc_501.isc_512 & FILE_manual) {
					isqlGlob.printf("manual ");
				}
				else {
					isqlGlob.printf("auto ");
				}
				if (/*FIL.RDB$FILE_FLAGS*/
				    isc_501.isc_512 & FILE_conditional) {
					isqlGlob.printf("conditional ");
				}
			}
			if (/*FIL.RDB$FILE_LENGTH*/
			    isc_501.isc_504) {
				isqlGlob.printf("length %ld ", /*FIL.RDB$FILE_LENGTH*/
							       isc_501.isc_504);
			}
			if (/*FIL.RDB$FILE_START*/
			    isc_501.isc_503) {
				isqlGlob.printf("starting %ld", /*FIL.RDB$FILE_START*/
								isc_501.isc_503);
			}
			isqlGlob.printf(NEWLINE);
		}

	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return;
	/*END_ERROR;*/
	   }
	}

	SCHAR info_buf[BUFFER_LENGTH400];

	// First general database parameters

	bool translate = true;

	if (SHOW_dbb_parameters(DB, info_buf, db_items, sizeof(db_items), translate, NEWLINE)) {
		isqlGlob.prints(info_buf);
	}

	/*FOR DBB IN RDB$DATABASE
		CROSS CS IN RDB$CHARACTER_SETS
		WITH CS.RDB$CHARACTER_SET_NAME EQ DBB.RDB$CHARACTER_SET_NAME*/
	{
        if (!isc_492)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_492, (short) sizeof(isc_493), (char*) isc_493);
	if (isc_492)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_492, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_492, (short) 0, (short) 68, &isc_494, (short) 0);
	   if (!isc_494.isc_497 || isc_status [1]) break;

		fb_utils::exact_name(/*DBB.RDB$CHARACTER_SET_NAME*/
				     isc_494.isc_496);
		fb_utils::exact_name(/*CS.RDB$DEFAULT_COLLATE_NAME*/
				     isc_494.isc_495);

		isqlGlob.printf("Default Character set: %s", /*DBB.RDB$CHARACTER_SET_NAME*/
							     isc_494.isc_496);

		if (!/*CS.RDB$DEFAULT_COLLATE_NAME.NULL*/
		     isc_494.isc_498 &&
			strcmp(/*CS.RDB$DEFAULT_COLLATE_NAME*/
			       isc_494.isc_495, /*DBB.RDB$CHARACTER_SET_NAME*/
  isc_494.isc_496) != 0)
		{
			isqlGlob.printf(" (with Default Collation %s)", /*CS.RDB$DEFAULT_COLLATE_NAME*/
									isc_494.isc_495);
		}

		isqlGlob.printf("%s", NEWLINE);
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return;
	/*END_ERROR;*/
	   }
	}
}


// *********************************
// s h o w _ d e p e n d e n c i e s   (front-end)
// *********************************
// Iterate through all types of objects types (as per jrd/obj.h) calling the
// overloaded routine. We try to fetch all possible object types that share
// the same name.
static processing_state show_dependencies(const char* object)
{
	if (!object || !object[0])
		return ps_ERR;

	bool missing = true;

	for (int i = 0; i < FB_NELEM(Object_types); ++i)
	{
		if (show_dependencies(object, i) == SKIP)
		{
			missing = false;
			isqlGlob.printf("+++%s", NEWLINE);
		}
	}

	return missing ? OBJECT_NOT_FOUND : SKIP;
}


// *********************************
// s h o w _ d e p e n d e n c i e s    (processor)
// *********************************
// Discover dependencies. Format:
// - objects that depend on this object
// - objects this object depends on
// - if it's table or view, list fields that depend on other objects
// - if it's procedure, list parameters that depend on other objects (unlikely for now)
static processing_state show_dependencies(const char* object, int obj_type)
{
   struct isc_442_struct {
          char  isc_443 [32];	/* RDB$DEPENDED_ON_NAME */
          char  isc_444 [32];	/* RDB$FIELD_NAME */
          char  isc_445 [32];	/* RDB$PARAMETER_NAME */
          ISC_QUAD isc_446;	/* RDB$COMPUTED_BLR */
          short isc_447;	/* isc_utility */
          short isc_448;	/* RDB$PARAMETER_TYPE */
          short isc_449;	/* RDB$DEPENDED_ON_TYPE */
          short isc_450;	/* gds__null_flag */
   } isc_442;
   struct isc_439_struct {
          char  isc_440 [32];	/* RDB$PROCEDURE_NAME */
          short isc_441;	/* RDB$DEPENDENT_TYPE */
   } isc_439;
   struct isc_456_struct {
          char  isc_457 [32];	/* RDB$DEPENDED_ON_NAME */
          char  isc_458 [32];	/* RDB$FIELD_NAME */
          char  isc_459 [32];	/* RDB$FIELD_NAME */
          ISC_QUAD isc_460;	/* RDB$COMPUTED_BLR */
          short isc_461;	/* isc_utility */
          short isc_462;	/* RDB$DEPENDED_ON_TYPE */
          short isc_463;	/* gds__null_flag */
   } isc_456;
   struct isc_453_struct {
          char  isc_454 [32];	/* RDB$RELATION_NAME */
          short isc_455;	/* RDB$DEPENDENT_TYPE */
   } isc_453;
   struct isc_468_struct {
          short isc_469;	/* isc_utility */
   } isc_468;
   struct isc_466_struct {
          char  isc_467 [32];	/* RDB$RELATION_NAME */
   } isc_466;
   struct isc_475_struct {
          char  isc_476 [32];	/* RDB$FIELD_NAME */
          char  isc_477 [32];	/* RDB$DEPENDED_ON_NAME */
          short isc_478;	/* isc_utility */
          short isc_479;	/* gds__null_flag */
          short isc_480;	/* RDB$DEPENDED_ON_TYPE */
   } isc_475;
   struct isc_472_struct {
          char  isc_473 [32];	/* RDB$DEPENDENT_NAME */
          short isc_474;	/* RDB$DEPENDENT_TYPE */
   } isc_472;
   struct isc_486_struct {
          char  isc_487 [32];	/* RDB$FIELD_NAME */
          char  isc_488 [32];	/* RDB$DEPENDENT_NAME */
          short isc_489;	/* isc_utility */
          short isc_490;	/* gds__null_flag */
          short isc_491;	/* RDB$DEPENDENT_TYPE */
   } isc_486;
   struct isc_483_struct {
          char  isc_484 [32];	/* RDB$DEPENDED_ON_NAME */
          short isc_485;	/* RDB$DEPENDED_ON_TYPE */
   } isc_483;
	bool missing1 = true;
	bool target_done = false;

	/*FOR DEP1 IN RDB$DEPENDENCIES
		WITH DEP1.RDB$DEPENDED_ON_NAME EQ object AND
			 DEP1.RDB$DEPENDED_ON_TYPE EQ obj_type*/
	{
        if (!isc_481)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_481, (short) sizeof(isc_482), (char*) isc_482);
	isc_vtov ((const char*) object, (char*) isc_483.isc_484, 32);
	isc_483.isc_485 = obj_type;
	if (isc_481)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_481, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 34, &isc_483, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_481, (short) 1, (short) 70, &isc_486, (short) 0);
	   if (!isc_486.isc_489 || isc_status [1]) break;
		if (missing1)
			missing1 = false;
		else
			isqlGlob.prints(", ");

		fb_utils::exact_name(/*DEP1.RDB$DEPENDENT_NAME*/
				     isc_486.isc_488);
		const char* type_name = Object_types[/*DEP1.RDB$DEPENDENT_TYPE*/
						     isc_486.isc_491];
		if (/*DEP1.RDB$FIELD_NAME.NULL*/
		    isc_486.isc_490)
			isqlGlob.printf("%s:%s", /*DEP1.RDB$DEPENDENT_NAME*/
						 isc_486.isc_488, type_name);
		else
		{
			fb_utils::exact_name(/*DEP1.RDB$FIELD_NAME*/
					     isc_486.isc_487);
			isqlGlob.printf("%s:%s->%s", /*DEP1.RDB$DEPENDENT_NAME*/
						     isc_486.isc_488, type_name, /*DEP1.RDB$FIELD_NAME*/
	     isc_486.isc_487);
		}
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR;*/
	   }
	}

	if (!missing1)
	{
		const char* type_name = Object_types[obj_type];
		isqlGlob.printf("%s%s[%s:%s]", NEWLINE, TAB_AS_SPACES, object, type_name);
		target_done = true;
	}

	bool missing2 = true;

	/*FOR DEP2 IN RDB$DEPENDENCIES
		WITH DEP2.RDB$DEPENDENT_NAME EQ object AND
			 DEP2.RDB$DEPENDENT_TYPE EQ obj_type*/
	{
        if (!isc_470)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_470, (short) sizeof(isc_471), (char*) isc_471);
	isc_vtov ((const char*) object, (char*) isc_472.isc_473, 32);
	isc_472.isc_474 = obj_type;
	if (isc_470)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_470, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 34, &isc_472, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_470, (short) 1, (short) 70, &isc_475, (short) 0);
	   if (!isc_475.isc_478 || isc_status [1]) break;
		if (missing2)
		{
			if (!target_done)
			{
				const char* type_name = Object_types[obj_type];
				isqlGlob.printf("%s[%s:%s]", TAB_AS_SPACES, object, type_name);
				target_done = true;
			}

			isqlGlob.prints(NEWLINE);
			missing2 = false;
		}
		else
			isqlGlob.prints(", ");

		fb_utils::exact_name(/*DEP2.RDB$DEPENDED_ON_NAME*/
				     isc_475.isc_477);
		const char* type_name = Object_types[/*DEP2.RDB$DEPENDED_ON_TYPE*/
						     isc_475.isc_480];
		if (/*DEP2.RDB$FIELD_NAME.NULL*/
		    isc_475.isc_479)
			isqlGlob.printf("%s:%s", /*DEP2.RDB$DEPENDED_ON_NAME*/
						 isc_475.isc_477, type_name);
		else
		{
			fb_utils::exact_name(/*DEP2.RDB$FIELD_NAME*/
					     isc_475.isc_476);
			isqlGlob.printf("%s:%s<-%s", /*DEP2.RDB$DEPENDED_ON_NAME*/
						     isc_475.isc_477, type_name, /*DEP2.RDB$FIELD_NAME*/
	     isc_475.isc_476);
		}
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR;*/
	   }
	}

	bool missing3 = true;
	bool is_table = false;

	/*FOR REL IN RDB$RELATIONS
		WITH REL.RDB$RELATION_NAME = object AND
			 REL.RDB$VIEW_BLR MISSING AND
			 (REL.RDB$DBKEY_LENGTH MISSING OR REL.RDB$DBKEY_LENGTH = 8)*/
	{
        if (!isc_464)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_464, (short) sizeof(isc_465), (char*) isc_465);
	isc_vtov ((const char*) object, (char*) isc_466.isc_467, 32);
	if (isc_464)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_464, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_466, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_464, (short) 1, (short) 2, &isc_468, (short) 0);
	   if (!isc_468.isc_469 || isc_status [1]) break;
		is_table = true;
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR;*/
	   }
	}

	if (obj_type == obj_relation && is_table || obj_type == obj_view && !is_table)
	{
		/*FOR RFR IN RDB$RELATION_FIELDS
			CROSS FLD IN RDB$FIELDS
			CROSS DEP3 IN RDB$DEPENDENCIES
			WITH RFR.RDB$RELATION_NAME = object AND
				 RFR.RDB$FIELD_SOURCE = FLD.RDB$FIELD_NAME AND
				 DEP3.RDB$DEPENDENT_NAME = RFR.RDB$FIELD_SOURCE AND
				 DEP3.RDB$DEPENDENT_TYPE EQ obj_computed
			SORTED BY RFR.RDB$FIELD_POSITION*/
		{
                if (!isc_451)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_451, (short) sizeof(isc_452), (char*) isc_452);
		isc_vtov ((const char*) object, (char*) isc_453.isc_454, 32);
		isc_453.isc_455 = obj_computed;
		if (isc_451)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_451, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 34, &isc_453, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_451, (short) 1, (short) 110, &isc_456, (short) 0);
		   if (!isc_456.isc_461 || isc_status [1]) break;

			if (/*FLD.RDB$COMPUTED_BLR.NULL*/
			    isc_456.isc_463) // redundant
				continue;

			if (missing3)
			{
				if (!target_done)
				{
					const char* type_name = Object_types[obj_type];
					isqlGlob.printf("%s[%s:%s]", TAB_AS_SPACES, object, type_name);
					target_done = true;
				}

				isqlGlob.prints(NEWLINE);
				missing3 = false;
			}
			else
				isqlGlob.prints(", ");

			fb_utils::exact_name(/*RFR.RDB$FIELD_NAME*/
					     isc_456.isc_459);
			fb_utils::exact_name(/*FLD.RDB$FIELD_NAME*/
					     isc_456.isc_458);
			fb_utils::exact_name(/*DEP3.RDB$DEPENDED_ON_NAME*/
					     isc_456.isc_457);
			const char* type_name = Object_types[/*DEP3.RDB$DEPENDED_ON_TYPE*/
							     isc_456.isc_462];
			isqlGlob.printf("Field-%s(%s):%s->%s:%s", /*RFR.RDB$FIELD_NAME*/
								  isc_456.isc_459, /*FLD.RDB$FIELD_NAME*/
  isc_456.isc_458,
				Object_types[obj_computed], /*DEP3.RDB$DEPENDED_ON_NAME*/
							    isc_456.isc_457, type_name);
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}
	}
	else if (obj_type == obj_procedure)
	{
		// This code shouldn't find anything under normal circumstances.
		/*FOR PAR IN RDB$PROCEDURE_PARAMETERS
			CROSS FLD IN RDB$FIELDS
			CROSS DEP3 IN RDB$DEPENDENCIES
			WITH PAR.RDB$PROCEDURE_NAME = object AND
				 PAR.RDB$FIELD_SOURCE = FLD.RDB$FIELD_NAME AND
				 DEP3.RDB$DEPENDENT_NAME = PAR.RDB$FIELD_SOURCE AND
				 DEP3.RDB$DEPENDENT_TYPE EQ obj_computed
			SORTED BY PAR.RDB$PARAMETER_TYPE, PAR.RDB$PARAMETER_NUMBER*/
		{
                if (!isc_437)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_437, (short) sizeof(isc_438), (char*) isc_438);
		isc_vtov ((const char*) object, (char*) isc_439.isc_440, 32);
		isc_439.isc_441 = obj_computed;
		if (isc_437)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_437, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 34, &isc_439, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_437, (short) 1, (short) 112, &isc_442, (short) 0);
		   if (!isc_442.isc_447 || isc_status [1]) break;
			if (/*FLD.RDB$COMPUTED_BLR.NULL*/
			    isc_442.isc_450) // redundant
				continue;

			if (missing3)
			{
				if (!target_done)
				{
					const char* type_name = Object_types[obj_type];
					isqlGlob.printf("%s[%s:%s]", TAB_AS_SPACES, object, type_name);
					target_done = true;
				}

				isqlGlob.prints(NEWLINE);
				missing3 = false;
			}
			else
				isqlGlob.prints(", ");

			fb_utils::exact_name(/*PAR.RDB$PARAMETER_NAME*/
					     isc_442.isc_445);
			fb_utils::exact_name(/*FLD.RDB$FIELD_NAME*/
					     isc_442.isc_444);
			fb_utils::exact_name(/*DEP3.RDB$DEPENDED_ON_NAME*/
					     isc_442.isc_443);
			const char* type_name = Object_types[/*DEP3.RDB$DEPENDED_ON_TYPE*/
							     isc_442.isc_449];
			isqlGlob.printf("%s-%s(%s):%s->%s:%s", /*PAR.RDB$PARAMETER_TYPE*/
							       isc_442.isc_448 ? "Output" : "Input",
				/*PAR.RDB$PARAMETER_NAME*/
				isc_442.isc_445, /*FLD.RDB$FIELD_NAME*/
  isc_442.isc_444,
				Object_types[obj_computed], /*DEP3.RDB$DEPENDED_ON_NAME*/
							    isc_442.isc_443, type_name);
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}
	}


	if (!target_done)
		return OBJECT_NOT_FOUND;

	isqlGlob.prints(NEWLINE);
	return SKIP;
}


static processing_state show_dialect()
{
/**************************************
 *
 *	s h o w _ d i a l e c t
 *
 **************************************
 *
 *	Print out the SQL dialect information
 *
 **************************************/

	if (isqlGlob.db_SQL_dialect > 0)
	{
		isqlGlob.printf("%38s%d%s%d",
				"Client SQL dialect is set to: ", isqlGlob.SQL_dialect,
				" and database SQL dialect is: ", isqlGlob.db_SQL_dialect);
	}
	else if (isqlGlob.SQL_dialect == 0)
	{
		isqlGlob.printf("%38s%s",
				"Client SQL dialect has not been set",
				" and no database has been connected yet.");
	}
	else
	{
		isqlGlob.printf("%38s%d%s",
				"Client SQL dialect is set to: ", isqlGlob.SQL_dialect,
				". No database has been connected.");
	}
	isqlGlob.printf(NEWLINE);
	return SKIP;
}


static processing_state show_domains(const SCHAR* domain_name)
{
   struct isc_410_struct {
          short isc_411;	/* isc_utility */
          short isc_412;	/* RDB$FIELD_SCALE */
          short isc_413;	/* RDB$FIELD_SUB_TYPE */
          short isc_414;	/* gds__null_flag */
          short isc_415;	/* RDB$FIELD_PRECISION */
   } isc_410;
   struct isc_408_struct {
          char  isc_409 [32];	/* RDB$FIELD_NAME */
   } isc_408;
   struct isc_420_struct {
          ISC_QUAD isc_421;	/* RDB$VALIDATION_SOURCE */
          char  isc_422 [32];	/* RDB$FIELD_NAME */
          short isc_423;	/* isc_utility */
          short isc_424;	/* gds__null_flag */
          short isc_425;	/* RDB$NULL_FLAG */
          short isc_426;	/* RDB$FIELD_SUB_TYPE */
          short isc_427;	/* RDB$SEGMENT_LENGTH */
          short isc_428;	/* RDB$FIELD_SCALE */
          short isc_429;	/* RDB$FIELD_TYPE */
          short isc_430;	/* gds__null_flag */
          short isc_431;	/* RDB$DIMENSIONS */
   } isc_420;
   struct isc_418_struct {
          char  isc_419 [32];	/* RDB$FIELD_NAME */
   } isc_418;
   struct isc_434_struct {
          char  isc_435 [32];	/* RDB$FIELD_NAME */
          short isc_436;	/* isc_utility */
   } isc_434;
/*************************************
*
*	s h o w _ d o m a i n s
*
**************************************
*
* Functional description
*	Show all domains or the named domain
************************************/
	bool first = true;

	if (!*domain_name)
	{
		bool odd = true;
		//  List all domain names in columns
		/*FOR FLD IN RDB$FIELDS WITH
			FLD.RDB$FIELD_NAME NOT MATCHING "RDB$+" USING "+=[0-9][0-9]* *"
			AND FLD.RDB$SYSTEM_FLAG NE 1
			SORTED BY FLD.RDB$FIELD_NAME*/
		{
                if (!isc_432)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_432, (short) sizeof(isc_433), (char*) isc_433);
		if (isc_432)
		   {
                   isc_start_request (isc_status, (FB_API_HANDLE*) &isc_432, (FB_API_HANDLE*) &gds_trans, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_432, (short) 0, (short) 34, &isc_434, (short) 0);
		   if (!isc_434.isc_436 || isc_status [1]) break;

			first = false;
			isqlGlob.printf("%38s%s", /*FLD.RDB$FIELD_NAME*/
						  isc_434.isc_435, (odd ? " " : NEWLINE));
			odd = !odd;
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}
		if (!first)
			isqlGlob.printf(NEWLINE);
	}
	else
	{						// List named domain

		/*FOR FLD IN RDB$FIELDS WITH
			FLD.RDB$FIELD_NAME EQ domain_name*/
		{
                if (!isc_416)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_416, (short) sizeof(isc_417), (char*) isc_417);
		isc_vtov ((const char*) domain_name, (char*) isc_418.isc_419, 32);
		if (isc_416)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_416, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_418, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_416, (short) 1, (short) 58, &isc_420, (short) 0);
		   if (!isc_420.isc_423 || isc_status [1]) break;;

			first = false;
			// Print the name of the domain
			fb_utils::exact_name(/*FLD.RDB$FIELD_NAME*/
					     isc_420.isc_422);
			isqlGlob.printf("%-32s", /*FLD.RDB$FIELD_NAME*/
						 isc_420.isc_422);

			// Array dimensions
			if (!/*FLD.RDB$DIMENSIONS.NULL*/
			     isc_420.isc_430)
			{
				isqlGlob.printf("ARRAY OF ");
				ISQL_array_dimensions (/*FLD.RDB$FIELD_NAME*/
						       isc_420.isc_422);
				isqlGlob.printf("%s                                ",
						 NEWLINE);
			}

			// Look through types array

			for (int i = 0; Column_types[i].type; i++)
				if (/*FLD.RDB$FIELD_TYPE*/
				    isc_420.isc_429 == Column_types[i].type)
				{
					bool precision_known = false;

					if (isqlGlob.major_ods >= ODS_VERSION10)
					{
						// Handle Integral subtypes NUMERIC and DECIMAL
						if ((/*FLD.RDB$FIELD_TYPE*/
						     isc_420.isc_429 == SMALLINT) ||
							(/*FLD.RDB$FIELD_TYPE*/
							 isc_420.isc_429 == INTEGER) ||
							(/*FLD.RDB$FIELD_TYPE*/
							 isc_420.isc_429 == BIGINT))
						{
							/*FOR FLD1 IN RDB$FIELDS WITH
								FLD1.RDB$FIELD_NAME EQ domain_name*/
							{
                                                        if (!isc_406)
                                                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_406, (short) sizeof(isc_407), (char*) isc_407);
							isc_vtov ((const char*) domain_name, (char*) isc_408.isc_409, 32);
							if (isc_406)
							   {
                                                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_406, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_408, (short) 0);
							   }
							if (!isc_status [1]) {
							while (1)
							   {
                                                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_406, (short) 1, (short) 10, &isc_410, (short) 0);
							   if (!isc_410.isc_411 || isc_status [1]) break;;
								/* We are ODS >= 10 and could be any Dialect */
								if (!/*FLD1.RDB$FIELD_PRECISION.NULL*/
								     isc_410.isc_414)
								{
									/* We are Dialect >=3 since FIELD_PRECISION
									   is non-NULL */
									if (/*FLD1.RDB$FIELD_SUB_TYPE*/
									    isc_410.isc_413 > 0 &&
										/*FLD1.RDB$FIELD_SUB_TYPE*/
										isc_410.isc_413 <= MAX_INTSUBTYPES)
									{
										sprintf (Print_buffer, "%s(%d, %d)",
												 Integral_subtypes[/*FLD1.RDB$FIELD_SUB_TYPE*/
														   isc_410.isc_413],
												 /*FLD1.RDB$FIELD_PRECISION*/
												 isc_410.isc_415,
												 -/*FLD1.RDB$FIELD_SCALE*/
												  isc_410.isc_412);
										precision_known = true;
									}
								}
							/*END_FOR*/
							   }
							   };
							/*ON_ERROR*/
							if (isc_status [1])
							   {
								ISQL_errmsg (isc_status);
								return ps_ERR;
							/*END_ERROR;*/
							   }
							}
						}
					}

					if (!precision_known)
					{
						// Take a stab at numerics and decimals
						if ((/*FLD.RDB$FIELD_TYPE*/
						     isc_420.isc_429 == SMALLINT) && (/*FLD.RDB$FIELD_SCALE*/
		  isc_420.isc_428 < 0))
						{
							sprintf (Print_buffer, "NUMERIC(4, %d)", -/*FLD.RDB$FIELD_SCALE*/
												  isc_420.isc_428);
						}
						else if ((/*FLD.RDB$FIELD_TYPE*/
							  isc_420.isc_429 == INTEGER) && (/*FLD.RDB$FIELD_SCALE*/
		 isc_420.isc_428 < 0))
						{
							sprintf (Print_buffer, "NUMERIC(9, %d)", -/*FLD.RDB$FIELD_SCALE*/
												  isc_420.isc_428);
						}
						else if ((/*FLD.RDB$FIELD_TYPE*/
							  isc_420.isc_429 == DOUBLE_PRECISION) && (/*FLD.RDB$FIELD_SCALE*/
			  isc_420.isc_428 < 0))
						{
							sprintf (Print_buffer, "NUMERIC(15, %d)", -/*FLD.RDB$FIELD_SCALE*/
												   isc_420.isc_428);
						}
						else {
							sprintf (Print_buffer, "%s", Column_types[i].type_name);
						}
					}

					isqlGlob.prints(Print_buffer);

					break;
				}

			// Length for CHARs
			if ((/*FLD.RDB$FIELD_TYPE*/
			     isc_420.isc_429 == T_CHAR) || (/*FLD.RDB$FIELD_TYPE*/
		isc_420.isc_429 == VARCHAR)) {
				isqlGlob.printf("(%d)", ISQL_get_field_length(/*FLD.RDB$FIELD_NAME*/
									      isc_420.isc_422));
			}

			// Blob domains
			if (/*FLD.RDB$FIELD_TYPE*/
			    isc_420.isc_429 == BLOB)
			{
				isqlGlob.printf(" segment %u, subtype ", (USHORT) /*FLD.RDB$SEGMENT_LENGTH*/
										  isc_420.isc_427);
				const int subtype  = /*FLD.RDB$FIELD_SUB_TYPE*/
						     isc_420.isc_426;
				if (subtype >= 0 && subtype <= MAX_BLOBSUBTYPES) {
					isqlGlob.prints(Sub_types[subtype]);
				}
				else {
					isqlGlob.printf("%d", subtype);
				}
			}

			// Show international character sets
			if (/*FLD.RDB$FIELD_TYPE*/
			    isc_420.isc_429 == T_CHAR ||
				/*FLD.RDB$FIELD_TYPE*/
				isc_420.isc_429 == VARCHAR ||
				/*FLD.RDB$FIELD_TYPE*/
				isc_420.isc_429 == BLOB)
			{
				show_charsets(NULL, /*FLD.RDB$FIELD_NAME*/
						    isc_420.isc_422, true, false, false, false);
			}

			if (/*FLD.RDB$NULL_FLAG*/
			    isc_420.isc_425 != 1) {
				isqlGlob.printf(" Nullable");
			}
			else {
				isqlGlob.printf(" Not Null");
			}
			isqlGlob.printf(NEWLINE);

			ISC_QUAD default_source;
			ISQL_get_default_source (NULL, /*FLD.RDB$FIELD_NAME*/
						       isc_420.isc_422, &default_source);
			if (default_source.gds_quad_high)
			{
				isqlGlob.printf("                                ");
				SHOW_print_metadata_text_blob (isqlGlob.Out, &default_source);
				isqlGlob.printf(NEWLINE);
			}

			if (!/*FLD.RDB$VALIDATION_SOURCE.NULL*/
			     isc_420.isc_424)
			{
				isqlGlob.printf("                                ");
				SHOW_print_metadata_text_blob (isqlGlob.Out, &/*FLD.RDB$VALIDATION_SOURCE*/
									      isc_420.isc_421);
				isqlGlob.printf(NEWLINE);
			}

			// Show collations
			if (/*FLD.RDB$FIELD_TYPE*/
			    isc_420.isc_429 == T_CHAR ||
				/*FLD.RDB$FIELD_TYPE*/
				isc_420.isc_429 == VARCHAR ||
				/*FLD.RDB$FIELD_TYPE*/
				isc_420.isc_429 == BLOB)
			{
				show_charsets(NULL, /*FLD.RDB$FIELD_NAME*/
						    isc_420.isc_422, false, true, true, true);
			}

		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}
	}
	if (first)
		return (OBJECT_NOT_FOUND);
	return (SKIP);
}


static processing_state show_exceptions(const SCHAR* object)
{
   struct isc_395_struct {
          char  isc_396 [32];	/* RDB$DEPENDENT_NAME */
          short isc_397;	/* isc_utility */
          short isc_398;	/* RDB$DEPENDENT_TYPE */
   } isc_395;
   struct isc_392_struct {
          char  isc_393 [32];	/* RDB$EXCEPTION_NAME */
          short isc_394;	/* RDB$DEPENDED_ON_TYPE */
   } isc_392;
   struct isc_401_struct {
          char  isc_402 [1024];	/* RDB$MESSAGE */
          char  isc_403 [32];	/* RDB$EXCEPTION_NAME */
          short isc_404;	/* isc_utility */
          short isc_405;	/* gds__null_flag */
   } isc_401;
/**************************************
 *
 *	s h o w _ e x c e p t i o n s
 *
 **************************************
 *
 * Functional description
 *	Show exceptions and their dependencies
 *	This version fetches all the exceptions, and only prints the
 *	one you asked for if you ask for one.  It could be optimized
 *	like other such functions.
 *
 **************************************/
	bool first = true;
	SCHAR type[20];

	//fb_utils::exact_name(object); It already comes trimmed.

	/*FOR EXC IN RDB$EXCEPTIONS
		SORTED BY EXC.RDB$EXCEPTION_NAME*/
	{
        if (!isc_399)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_399, (short) sizeof(isc_400), (char*) isc_400);
	if (isc_399)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_399, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_399, (short) 0, (short) 1060, &isc_401, (short) 0);
	   if (!isc_401.isc_404 || isc_status [1]) break;

		fb_utils::exact_name(/*EXC.RDB$EXCEPTION_NAME*/
				     isc_401.isc_403);
		// List all objects if none specified, or just the named exception

		if (!*object || !strcmp (/*EXC.RDB$EXCEPTION_NAME*/
					 isc_401.isc_403, object))
		{
			if (first)
			{
				isqlGlob.printf("Exception Name                  Used by, Type%s%s%s",
					NEWLINE,
					"=============================== =============================================",
					NEWLINE);
			}
			first = false;

			isqlGlob.printf("%-31s ", /*EXC.RDB$EXCEPTION_NAME*/
						  isc_401.isc_403);

			// Look up dependent objects --procedures and triggers
			bool first_dep = true;
			/*FOR DEP IN RDB$DEPENDENCIES WITH
				DEP.RDB$DEPENDED_ON_TYPE = obj_exception AND
				DEP.RDB$DEPENDED_ON_NAME EQ EXC.RDB$EXCEPTION_NAME
				SORTED BY DEP.RDB$DEPENDENT_TYPE, DEP.RDB$DEPENDENT_NAME*/
			{
                        if (!isc_390)
                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_390, (short) sizeof(isc_391), (char*) isc_391);
			isc_vtov ((const char*) isc_401.isc_403, (char*) isc_392.isc_393, 32);
			isc_392.isc_394 = obj_exception;
			if (isc_390)
			   {
                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_390, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 34, &isc_392, (short) 0);
			   }
			if (!isc_status [1]) {
			while (1)
			   {
                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_390, (short) 1, (short) 36, &isc_395, (short) 0);
			   if (!isc_395.isc_397 || isc_status [1]) break;

				if (!first_dep) {
					isqlGlob.printf("%31s ", "");
				}
				first_dep = false;

				fb_utils::exact_name(/*DEP.RDB$DEPENDENT_NAME*/
						     isc_395.isc_396);

				switch (/*DEP.RDB$DEPENDENT_TYPE*/
					isc_395.isc_398)
				{
					case obj_trigger:
						strcpy (type, "Trigger");
						break;
					case obj_procedure:
						strcpy (type, "Stored procedure");
						break;
					default:
						strcpy (type, "Unknown");
						break;
				}
				isqlGlob.printf("%s, %s%s", /*DEP.RDB$DEPENDENT_NAME*/
							    isc_395.isc_396, type, NEWLINE);
			/*END_FOR*/
			   }
			   };
			/*ON_ERROR*/
			if (isc_status [1])
			   {
				ISQL_errmsg (isc_status);
				return ps_ERR;
			/*END_ERROR;*/
			   }
			}

			if (first_dep)
				printf(NEWLINE);

			if (!/*EXC.RDB$MESSAGE.NULL*/
			     isc_401.isc_405 && strlen(/*EXC.RDB$MESSAGE*/
	   isc_401.isc_402))
				isqlGlob.printf("Msg: %s%s", /*EXC.RDB$MESSAGE*/
							     isc_401.isc_402, NEWLINE);
		}
		if (!first)
			isqlGlob.printf(NEWLINE);
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR;*/
	   }
	}
	if (first)
		return (OBJECT_NOT_FOUND);
	return (SKIP);
}


static processing_state show_filters(const SCHAR* object)
{
   struct isc_378_struct {
          char  isc_379 [32];	/* RDB$ENTRYPOINT */
          char  isc_380 [256];	/* RDB$MODULE_NAME */
          char  isc_381 [32];	/* RDB$FUNCTION_NAME */
          short isc_382;	/* isc_utility */
          short isc_383;	/* RDB$OUTPUT_SUB_TYPE */
          short isc_384;	/* RDB$INPUT_SUB_TYPE */
   } isc_378;
   struct isc_376_struct {
          char  isc_377 [32];	/* RDB$FUNCTION_NAME */
   } isc_376;
   struct isc_387_struct {
          char  isc_388 [32];	/* RDB$FUNCTION_NAME */
          short isc_389;	/* isc_utility */
   } isc_387;
/**************************************
 *
 *	s h o w _ f i l t e r s
 *
 **************************************
 *
 * Functional description
 *	Show blob filters in general or  for the named filters
 *
 **************************************/
	bool first = true;

// Show all functions
	if (!*object)
	{
		bool odd = true;
		/*FOR FIL IN RDB$FILTERS
		SORTED BY FIL.RDB$FUNCTION_NAME*/
		{
                if (!isc_385)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_385, (short) sizeof(isc_386), (char*) isc_386);
		if (isc_385)
		   {
                   isc_start_request (isc_status, (FB_API_HANDLE*) &isc_385, (FB_API_HANDLE*) &gds_trans, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_385, (short) 0, (short) 34, &isc_387, (short) 0);
		   if (!isc_387.isc_389 || isc_status [1]) break;

			first = false;
			//fb_utils::exact_name(FIL.RDB$FUNCTION_NAME);
			isqlGlob.printf("%38s%s", /*FIL.RDB$FUNCTION_NAME*/
						  isc_387.isc_388, (odd ? " " : NEWLINE));
			odd = !odd;
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}
		if (!first)
		{
			isqlGlob.printf(NEWLINE);
			return (SKIP);
		}

		return OBJECT_NOT_FOUND;
	}

// We have a filter name, so expand on it
	/*FOR FIL IN RDB$FILTERS WITH
	   FIL.RDB$FUNCTION_NAME EQ object*/
	{
        if (!isc_374)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_374, (short) sizeof(isc_375), (char*) isc_375);
	isc_vtov ((const char*) object, (char*) isc_376.isc_377, 32);
	if (isc_374)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_374, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_376, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_374, (short) 1, (short) 326, &isc_378, (short) 0);
	   if (!isc_378.isc_382 || isc_status [1]) break;

	   first = false;

	   fb_utils::exact_name(/*FIL.RDB$FUNCTION_NAME*/
				isc_378.isc_381);
	   fb_utils::exact_name(/*FIL.RDB$MODULE_NAME*/
				isc_378.isc_380);
	   fb_utils::exact_name(/*FIL.RDB$ENTRYPOINT*/
				isc_378.isc_379);

	   isqlGlob.printf("BLOB Filter: %s %s%sInput subtype: %d Output subtype: %d%s",
				/*FIL.RDB$FUNCTION_NAME*/
				isc_378.isc_381, NEWLINE,
				TAB_AS_SPACES, /*FIL.RDB$INPUT_SUB_TYPE*/
					       isc_378.isc_384, /*FIL.RDB$OUTPUT_SUB_TYPE*/
  isc_378.isc_383, NEWLINE);
	   isqlGlob.printf("%sFilter library is %s%s%sEntry point is %s%s%s",
				TAB_AS_SPACES, /*FIL.RDB$MODULE_NAME*/
					       isc_378.isc_380, NEWLINE,
				TAB_AS_SPACES, /*FIL.RDB$ENTRYPOINT*/
					       isc_378.isc_379, NEWLINE,
				NEWLINE);

	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR;*/
	   }
	}

	if (first)
		return (OBJECT_NOT_FOUND);
	return (SKIP);
}


static processing_state show_functions(const SCHAR* object, const SSHORT sys_flag, const char* msg)
{
   struct isc_331_struct {
          char  isc_332 [32];	/* RDB$CHARACTER_SET_NAME */
          short isc_333;	/* isc_utility */
          short isc_334;	/* RDB$BYTES_PER_CHARACTER */
   } isc_331;
   struct isc_328_struct {
          char  isc_329 [32];	/* RDB$FUNCTION_NAME */
          short isc_330;	/* RDB$ARGUMENT_POSITION */
   } isc_328;
   struct isc_340_struct {
          short isc_341;	/* isc_utility */
          short isc_342;	/* RDB$FIELD_SCALE */
          short isc_343;	/* RDB$FIELD_SUB_TYPE */
          short isc_344;	/* gds__null_flag */
          short isc_345;	/* RDB$FIELD_PRECISION */
   } isc_340;
   struct isc_337_struct {
          char  isc_338 [32];	/* RDB$FUNCTION_NAME */
          short isc_339;	/* RDB$ARGUMENT_POSITION */
   } isc_337;
   struct isc_350_struct {
          char  isc_351 [32];	/* RDB$FUNCTION_NAME */
          char  isc_352 [32];	/* RDB$ENTRYPOINT */
          char  isc_353 [256];	/* RDB$MODULE_NAME */
          char  isc_354 [32];	/* RDB$FUNCTION_NAME */
          short isc_355;	/* isc_utility */
          short isc_356;	/* RDB$FIELD_LENGTH */
          short isc_357;	/* RDB$FIELD_SCALE */
          short isc_358;	/* RDB$FIELD_TYPE */
          short isc_359;	/* RDB$ARGUMENT_POSITION */
          short isc_360;	/* RDB$RETURN_ARGUMENT */
          short isc_361;	/* RDB$MECHANISM */
   } isc_350;
   struct isc_348_struct {
          char  isc_349 [32];	/* RDB$FUNCTION_NAME */
   } isc_348;
   struct isc_366_struct {
          char  isc_367 [32];	/* RDB$FUNCTION_NAME */
          short isc_368;	/* isc_utility */
   } isc_366;
   struct isc_364_struct {
          short isc_365;	/* RDB$SYSTEM_FLAG */
   } isc_364;
   struct isc_371_struct {
          char  isc_372 [32];	/* RDB$FUNCTION_NAME */
          short isc_373;	/* isc_utility */
   } isc_371;
/**************************************
 *
 *	s h o w _ f u n c t i o n s
 *
 **************************************
 *
 * Functional description
 *	Show external functions in general or  for the named function
 *
 **************************************/
	bool first = true;

	// Show all functions
	if (!*object)
	{
		bool odd = true;
		if (!sys_flag)
		{
			/*FOR FUN IN RDB$FUNCTIONS
				WITH FUN.RDB$SYSTEM_FLAG EQ 0
				OR FUN.RDB$SYSTEM_FLAG MISSING
				SORTED BY FUN.RDB$FUNCTION_NAME*/
			{
                        if (!isc_369)
                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_369, (short) sizeof(isc_370), (char*) isc_370);
			if (isc_369)
			   {
                           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_369, (FB_API_HANDLE*) &gds_trans, (short) 0);
			   }
			if (!isc_status [1]) {
			while (1)
			   {
                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_369, (short) 0, (short) 34, &isc_371, (short) 0);
			   if (!isc_371.isc_373 || isc_status [1]) break;

				first = false;
				isqlGlob.printf("%38s%s", /*FUN.RDB$FUNCTION_NAME*/
							  isc_371.isc_372, (odd ? " " : NEWLINE));
				odd = !odd;
			/*END_FOR*/
			   }
			   };
			/*ON_ERROR*/
			if (isc_status [1])
			   {
				ISQL_errmsg(isc_status);
				return ps_ERR;
			/*END_ERROR;*/
			   }
			}
		}
		else
		{
			/*FOR FUN IN RDB$FUNCTIONS
				WITH FUN.RDB$SYSTEM_FLAG EQ sys_flag
				SORTED BY FUN.RDB$FUNCTION_NAME*/
			{
                        if (!isc_362)
                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_362, (short) sizeof(isc_363), (char*) isc_363);
			isc_364.isc_365 = sys_flag;
			if (isc_362)
			   {
                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_362, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 2, &isc_364, (short) 0);
			   }
			if (!isc_status [1]) {
			while (1)
			   {
                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_362, (short) 1, (short) 34, &isc_366, (short) 0);
			   if (!isc_366.isc_368 || isc_status [1]) break;

				if (first)
				{
					first = false;
					if (msg)
						isqlGlob.printf("%s%s", msg, NEWLINE);
				}
				isqlGlob.printf("%38s%s", /*FUN.RDB$FUNCTION_NAME*/
							  isc_366.isc_367, (odd ? " " : NEWLINE));
				odd = !odd;
			/*END_FOR*/
			   }
			   };
			/*ON_ERROR*/
			if (isc_status [1])
			   {
				ISQL_errmsg(isc_status);
				return ps_ERR;
			/*END_ERROR;*/
			   }
			}
		}
		if (!first)
		{
			isqlGlob.printf(NEWLINE);
			return (SKIP);
		}

		return OBJECT_NOT_FOUND;
	}

	/*FOR FUN IN RDB$FUNCTIONS CROSS
		FNA IN RDB$FUNCTION_ARGUMENTS WITH
		FUN.RDB$FUNCTION_NAME EQ FNA.RDB$FUNCTION_NAME AND
		FUN.RDB$FUNCTION_NAME EQ object
		SORTED BY FNA.RDB$ARGUMENT_POSITION*/
	{
        if (!isc_346)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_346, (short) sizeof(isc_347), (char*) isc_347);
	isc_vtov ((const char*) object, (char*) isc_348.isc_349, 32);
	if (isc_346)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_346, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_348, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_346, (short) 1, (short) 366, &isc_350, (short) 0);
	   if (!isc_350.isc_355 || isc_status [1]) break;

		fb_utils::exact_name(/*FUN.RDB$FUNCTION_NAME*/
				     isc_350.isc_354);
		fb_utils::exact_name(/*FUN.RDB$MODULE_NAME*/
				     isc_350.isc_353);
		fb_utils::exact_name(/*FUN.RDB$ENTRYPOINT*/
				     isc_350.isc_352);
		if (first)
		{
			isqlGlob.printf("%sFunction %s:%s", NEWLINE, /*FUN.RDB$FUNCTION_NAME*/
								     isc_350.isc_354, NEWLINE);
			isqlGlob.printf("Function library is %s%s", /*FUN.RDB$MODULE_NAME*/
								    isc_350.isc_353, NEWLINE);
			isqlGlob.printf("Entry point is %s%s", /*FUN.RDB$ENTRYPOINT*/
							       isc_350.isc_352, NEWLINE);
		}

		SSHORT ptype = (SSHORT) abs (/*FNA.RDB$MECHANISM*/
					     isc_350.isc_361);
		if (ptype > MAX_UDFPARAM_TYPES) {
			ptype = MAX_UDFPARAM_TYPES;
		}

		first = false;
		if (/*FUN.RDB$RETURN_ARGUMENT*/
		    isc_350.isc_360 == /*FNA.RDB$ARGUMENT_POSITION*/
    isc_350.isc_359)
		{
			isqlGlob.printf("Returns %s%s", UDF_param_types[ptype],
					 (/*FNA.RDB$MECHANISM*/
					  isc_350.isc_361 < 0 ? " FREE_IT " : " "));
		}
		else {
			isqlGlob.printf("Argument %d:%s ", /*FNA.RDB$ARGUMENT_POSITION*/
							   isc_350.isc_359, UDF_param_types[ptype]);
		}
		for (int i = 0; Column_types[i].type; i++)
		{
			if (/*FNA.RDB$FIELD_TYPE*/
			    isc_350.isc_358 == Column_types[i].type)
			{
				bool precision_known = false;

				// Handle Integral subtypes NUMERIC and DECIMAL
				if ( (isqlGlob.major_ods >= ODS_VERSION10) &&
					 ((/*FNA.RDB$FIELD_TYPE*/
					   isc_350.isc_358 == SMALLINT) ||
					  (/*FNA.RDB$FIELD_TYPE*/
					   isc_350.isc_358 == INTEGER) ||
					  (/*FNA.RDB$FIELD_TYPE*/
					   isc_350.isc_358 == BIGINT)) )
				{
					/*FOR FNA1 IN RDB$FUNCTION_ARGUMENTS WITH
						FNA1.RDB$FUNCTION_NAME = FNA.RDB$FUNCTION_NAME AND
						FNA1.RDB$ARGUMENT_POSITION = FNA.RDB$ARGUMENT_POSITION*/
					{
                                        if (!isc_335)
                                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_335, (short) sizeof(isc_336), (char*) isc_336);
					isc_vtov ((const char*) isc_350.isc_351, (char*) isc_337.isc_338, 32);
					isc_337.isc_339 = isc_350.isc_359;
					if (isc_335)
					   {
                                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_335, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 34, &isc_337, (short) 0);
					   }
					if (!isc_status [1]) {
					while (1)
					   {
                                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_335, (short) 1, (short) 10, &isc_340, (short) 0);
					   if (!isc_340.isc_341 || isc_status [1]) break;

						/* We are ODS >= 10 */
						if (!/*FNA1.RDB$FIELD_PRECISION.NULL*/
						     isc_340.isc_344)
						{
							/* We are Dialect >=3 since FIELD_PRECISION is
							   non-NULL */
							if (/*FNA1.RDB$FIELD_SUB_TYPE*/
							    isc_340.isc_343 > 0 &&
								/*FNA1.RDB$FIELD_SUB_TYPE*/
								isc_340.isc_343 <= MAX_INTSUBTYPES)
							{
								sprintf (Print_buffer, "%s(%d, %d)",
										 Integral_subtypes[/*FNA1.RDB$FIELD_SUB_TYPE*/
												   isc_340.isc_343],
										 /*FNA1.RDB$FIELD_PRECISION*/
										 isc_340.isc_345,
										 -/*FNA1.RDB$FIELD_SCALE*/
										  isc_340.isc_342);
								precision_known = true;
							}
						}
					/*END_FOR*/
					   }
					   };
					/*ON_ERROR*/
					if (isc_status [1])
					   {
						ISQL_errmsg (isc_status);
					   return ps_ERR;
				   /*END_ERROR;*/
				      }
				   }
				}

				if (!precision_known)
				{
					// Take a stab at numerics and decimals
					if ((/*FNA.RDB$FIELD_TYPE*/
					     isc_350.isc_358 == SMALLINT) && (/*FNA.RDB$FIELD_SCALE*/
		  isc_350.isc_357 < 0))
					{
						sprintf (Print_buffer, "NUMERIC(4, %d)", -/*FNA.RDB$FIELD_SCALE*/
											  isc_350.isc_357);
					}
					else if ((/*FNA.RDB$FIELD_TYPE*/
						  isc_350.isc_358 == INTEGER) && (/*FNA.RDB$FIELD_SCALE*/
		 isc_350.isc_357 < 0))
					{
						sprintf (Print_buffer, "NUMERIC(9, %d)", -/*FNA.RDB$FIELD_SCALE*/
											  isc_350.isc_357);
					}
					else if ((/*FNA.RDB$FIELD_TYPE*/
						  isc_350.isc_358 == DOUBLE_PRECISION) && (/*FNA.RDB$FIELD_SCALE*/
			  isc_350.isc_357 < 0))
					{
						sprintf (Print_buffer, "NUMERIC(15, %d)", -/*FNA.RDB$FIELD_SCALE*/
											   isc_350.isc_357);
					}
					else
					{
						sprintf (Print_buffer, "%s", Column_types[i].type_name);
					}
				}
				isqlGlob.prints(Print_buffer);
				break;
			}

		}
		// Print length where appropriate
		if (/*FNA.RDB$FIELD_TYPE*/
		    isc_350.isc_358 == T_CHAR || /*FNA.RDB$FIELD_TYPE*/
	      isc_350.isc_358 == VARCHAR ||
			/*FNA.RDB$FIELD_TYPE*/
			isc_350.isc_358 == CSTRING)
		{
			/*FOR V4FNA IN RDB$FUNCTION_ARGUMENTS CROSS
				CHARSET IN RDB$CHARACTER_SETS OVER RDB$CHARACTER_SET_ID
				WITH V4FNA.RDB$FUNCTION_NAME EQ FNA.RDB$FUNCTION_NAME AND
				V4FNA.RDB$ARGUMENT_POSITION EQ FNA.RDB$ARGUMENT_POSITION*/
			{
                        if (!isc_326)
                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_326, (short) sizeof(isc_327), (char*) isc_327);
			isc_vtov ((const char*) isc_350.isc_351, (char*) isc_328.isc_329, 32);
			isc_328.isc_330 = isc_350.isc_359;
			if (isc_326)
			   {
                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_326, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 34, &isc_328, (short) 0);
			   }
			if (!isc_status [1]) {
			while (1)
			   {
                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_326, (short) 1, (short) 36, &isc_331, (short) 0);
			   if (!isc_331.isc_333 || isc_status [1]) break;

				fb_utils::exact_name(/*CHARSET.RDB$CHARACTER_SET_NAME*/
						     isc_331.isc_332);
				isqlGlob.printf("(%d) CHARACTER SET %s",
						 (/*FNA.RDB$FIELD_LENGTH*/
						  isc_350.isc_356 / MAX (1, /*CHARSET.RDB$BYTES_PER_CHARACTER*/
	   isc_331.isc_334)),
						 /*CHARSET.RDB$CHARACTER_SET_NAME*/
						 isc_331.isc_332);

			/*END_FOR*/
			   }
			   };
			/*ON_ERROR*/
			if (isc_status [1])
			   {
				ISQL_errmsg (isc_status);
				return ps_ERR;
			/*END_ERROR;*/
			   }
			}
		}

		isqlGlob.printf(NEWLINE);

	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR;*/
	   }
	}
	if (first)
		return (OBJECT_NOT_FOUND);
	return (SKIP);
}


static processing_state show_generators(const SCHAR* object)
{
   struct isc_321_struct {
          char  isc_322 [32];	/* RDB$GENERATOR_NAME */
          short isc_323;	/* isc_utility */
          short isc_324;	/* gds__null_flag */
          short isc_325;	/* RDB$SYSTEM_FLAG */
   } isc_321;
/**************************************
 *
 *	s h o w _ g e n e r a t o r s
 *
 **************************************
 *
 * Functional description
 *	Show generators including the current number they return
 *      We do this by selecting the GEN_ID of each one,
 *         incrementing by 0 to not change the current value.
 *
 **************************************/
	SSHORT indicator;
	bool found = false;
	XSQLDA sqlda;
	SINT64 genid64 = 0;
	SLONG genid = 0;
	const char genIdStr[] = "SELECT GEN_ID(%s, 0) FROM RDB$DATABASE";
	TEXT query[sizeof(genIdStr) + QUOTEDLENGTH], gen_name[QUOTEDLENGTH];

	// Show all generators or named generator
	/*FOR GEN IN RDB$GENERATORS
		SORTED BY GEN.RDB$GENERATOR_NAME*/
	{
        if (!isc_319)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_319, (short) sizeof(isc_320), (char*) isc_320);
	if (isc_319)
	   {
           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_319, (FB_API_HANDLE*) &gds_trans, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_319, (short) 0, (short) 38, &isc_321, (short) 0);
	   if (!isc_321.isc_323 || isc_status [1]) break;

		fb_utils::exact_name(/*GEN.RDB$GENERATOR_NAME*/
				     isc_321.isc_322);

		if ((!*object && (/*GEN.RDB$SYSTEM_FLAG.NULL*/
				  isc_321.isc_324 || /*GEN.RDB$SYSTEM_FLAG*/
    isc_321.isc_325 == 0)) ||
			!strcmp(/*GEN.RDB$GENERATOR_NAME*/
				isc_321.isc_322, object))
		{
			// Get the current id for each generator

			if (isqlGlob.db_SQL_dialect > SQL_DIALECT_V6_TRANSITION) {
				ISQL_copy_SQL_id (/*GEN.RDB$GENERATOR_NAME*/
						  isc_321.isc_322, gen_name, DBL_QUOTE);
			}
			else { // If we are extracting in dialect 1, identifiers may cause failures.
				strcpy(gen_name, /*GEN.RDB$GENERATOR_NAME*/
						 isc_321.isc_322);
			}

			sprintf (query, genIdStr, gen_name);

			isc_stmt_handle stmt = 0;
			isc_dsql_allocate_statement (isc_status, &DB, &stmt);
			sqlda.sqln = 1;
			sqlda.version = SQLDA_VERSION1;

			/* If the user has set his client dialect to 1, we take that to
			   mean that he wants to see just the lower 32 bits of the
			   generator, as in V5.  Otherwise, we show him the whole 64-bit
			   value.
			*/
			if (isc_dsql_prepare (isc_status, &gds_trans, &stmt, 0, query,
								  isqlGlob.SQL_dialect, &sqlda))
			{
				ISQL_errmsg (isc_status);
				continue;
			}
			if (isqlGlob.SQL_dialect >= SQL_DIALECT_V6_TRANSITION)
				sqlda.sqlvar[0].sqldata = (SCHAR*) &genid64;
			else
				sqlda.sqlvar[0].sqldata = (SCHAR*) &genid;
			sqlda.sqlvar[0].sqlind = &indicator;

			// Singleton select needs no fetch
			if (isc_dsql_execute2 (isc_status, &gds_trans, &stmt, isqlGlob.SQL_dialect, NULL, &sqlda))
			{
				ISQL_errmsg (isc_status);
			}
			else
			{
				found = true;
				if (isqlGlob.SQL_dialect >= SQL_DIALECT_V6_TRANSITION)
				{
					isqlGlob.printf("Generator %s, current value is %" QUADFORMAT "d%s",
							 /*GEN.RDB$GENERATOR_NAME*/
							 isc_321.isc_322,
							 genid64,
							 NEWLINE);
				}
				else
				{
					isqlGlob.printf("Generator %s, current value is %ld%s",
							 /*GEN.RDB$GENERATOR_NAME*/
							 isc_321.isc_322,
							 genid,
							 NEWLINE);
				}
			}
			if (isc_dsql_free_statement (isc_status, &stmt, DSQL_drop))
				ISQL_errmsg (isc_status);
		}
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR;*/
	   }
	}
	if (!found)
		return (OBJECT_NOT_FOUND);
	return SKIP;
}


static void show_index(SCHAR* relation_name,
					   SCHAR* index_name,
					   const SSHORT unique_flag,
					   const SSHORT index_type,
					   const SSHORT inactive)
{
/**************************************
 *
 *	s h o w _ i n d e x
 *
 **************************************
 *
 * Functional description
 *	Show an index.
 *
 *	relation_name -- Name of table to investigate
 *
 **************************************/

	// Strip trailing blanks

	fb_utils::exact_name(relation_name);
	fb_utils::exact_name(index_name);

	isqlGlob.printf("%s%s%s INDEX ON %s", index_name,
			(unique_flag ? " UNIQUE" : ""),
			(index_type == 1 ? " DESCENDING" : ""), relation_name);

	// Get column names

	SCHAR collist[BUFFER_LENGTH512];

	if (ISQL_get_index_segments(collist, sizeof(collist), index_name, false))
	{
		isqlGlob.printf("(%s) %s%s", collist, (inactive ? "(inactive)" : ""), NEWLINE);
	}
}


static processing_state show_indices(const SCHAR* const* cmd)
{
   struct isc_291_struct {
          ISC_QUAD isc_292;	/* RDB$EXPRESSION_SOURCE */
          ISC_QUAD isc_293;	/* RDB$EXPRESSION_BLR */
          char  isc_294 [32];	/* RDB$INDEX_NAME */
          char  isc_295 [32];	/* RDB$RELATION_NAME */
          short isc_296;	/* isc_utility */
          short isc_297;	/* gds__null_flag */
          short isc_298;	/* gds__null_flag */
          short isc_299;	/* RDB$INDEX_INACTIVE */
          short isc_300;	/* RDB$INDEX_TYPE */
          short isc_301;	/* RDB$UNIQUE_FLAG */
   } isc_291;
   struct isc_307_struct {
          ISC_QUAD isc_308;	/* RDB$EXPRESSION_SOURCE */
          ISC_QUAD isc_309;	/* RDB$EXPRESSION_BLR */
          char  isc_310 [32];	/* RDB$INDEX_NAME */
          char  isc_311 [32];	/* RDB$RELATION_NAME */
          short isc_312;	/* isc_utility */
          short isc_313;	/* gds__null_flag */
          short isc_314;	/* gds__null_flag */
          short isc_315;	/* RDB$INDEX_TYPE */
          short isc_316;	/* RDB$UNIQUE_FLAG */
          short isc_317;	/* gds__null_flag */
          short isc_318;	/* RDB$INDEX_INACTIVE */
   } isc_307;
   struct isc_304_struct {
          char  isc_305 [32];	/* RDB$INDEX_NAME */
          char  isc_306 [32];	/* RDB$RELATION_NAME */
   } isc_304;
/**************************************
 *
 *	s h o w _ i n d i c e s
 *
 **************************************
 *
 * Functional description
 *	shows indices for a given table name or index name or all tables
 *
 *	Use a static SQL query to get the info and print it.
 *
 *	relation_name -- Name of table to investigate
 *
 **************************************/
	bool first = true;

// The names stored in the database are all upper case

	const SCHAR* name = cmd[2];

	if (*name)
	{
		/*FOR IDX1 IN RDB$INDICES WITH
			IDX1.RDB$RELATION_NAME EQ name OR
			IDX1.RDB$INDEX_NAME EQ name
			SORTED BY IDX1.RDB$INDEX_NAME*/
		{
                if (!isc_302)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_302, (short) sizeof(isc_303), (char*) isc_303);
		isc_vtov ((const char*) name, (char*) isc_304.isc_305, 32);
		isc_vtov ((const char*) name, (char*) isc_304.isc_306, 32);
		if (isc_302)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_302, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 64, &isc_304, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_302, (short) 1, (short) 94, &isc_307, (short) 0);
		   if (!isc_307.isc_312 || isc_status [1]) break;

			if (/*IDX1.RDB$INDEX_INACTIVE.NULL*/
			    isc_307.isc_317)
				/*IDX1.RDB$INDEX_INACTIVE*/
				isc_307.isc_318 = 0;

			show_index (/*IDX1.RDB$RELATION_NAME*/
				    isc_307.isc_311, /*IDX1.RDB$INDEX_NAME*/
  isc_307.isc_310,
						/*IDX1.RDB$UNIQUE_FLAG*/
						isc_307.isc_316, /*IDX1.RDB$INDEX_TYPE*/
  isc_307.isc_315, /*IDX1.RDB$INDEX_INACTIVE*/
  isc_307.isc_318);

			if (!/*IDX1.RDB$EXPRESSION_BLR.NULL*/
			     isc_307.isc_314)
			{
				isqlGlob.printf(" COMPUTED BY ");
				if (!/*IDX1.RDB$EXPRESSION_SOURCE.NULL*/
				     isc_307.isc_313)
					SHOW_print_metadata_text_blob (isqlGlob.Out, &/*IDX1.RDB$EXPRESSION_SOURCE*/
										      isc_307.isc_308);
				isqlGlob.printf(NEWLINE);
			}

			first = false;
		/*END_FOR*/
		   }
		   };
			/*ON_ERROR*/
			if (isc_status [1])
			   { ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}
		if (first)
			return (OBJECT_NOT_FOUND);
		return (SKIP);

	}
	else
	{
		/*FOR IDX2 IN RDB$INDICES CROSS
			REL IN RDB$RELATIONS OVER RDB$RELATION_NAME WITH
			REL.RDB$SYSTEM_FLAG NE 1 OR
			REL.RDB$SYSTEM_FLAG MISSING
			SORTED BY IDX2.RDB$RELATION_NAME, IDX2.RDB$INDEX_NAME*/
		{
                if (!isc_289)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_289, (short) sizeof(isc_290), (char*) isc_290);
		if (isc_289)
		   {
                   isc_start_request (isc_status, (FB_API_HANDLE*) &isc_289, (FB_API_HANDLE*) &gds_trans, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_289, (short) 0, (short) 92, &isc_291, (short) 0);
		   if (!isc_291.isc_296 || isc_status [1]) break;

			first = false;

			show_index (/*IDX2.RDB$RELATION_NAME*/
				    isc_291.isc_295, /*IDX2.RDB$INDEX_NAME*/
  isc_291.isc_294,
						/*IDX2.RDB$UNIQUE_FLAG*/
						isc_291.isc_301, /*IDX2.RDB$INDEX_TYPE*/
  isc_291.isc_300, /*IDX2.RDB$INDEX_INACTIVE*/
  isc_291.isc_299);

			if (!/*IDX2.RDB$EXPRESSION_BLR.NULL*/
			     isc_291.isc_298)
			{
				isqlGlob.printf(" COMPUTED BY ");
				if (!/*IDX2.RDB$EXPRESSION_SOURCE.NULL*/
				     isc_291.isc_297)
					SHOW_print_metadata_text_blob (isqlGlob.Out, &/*IDX2.RDB$EXPRESSION_SOURCE*/
										      isc_291.isc_292);
				isqlGlob.printf(NEWLINE);
			}

		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}
		if (first)
			return (OBJECT_NOT_FOUND);
		return (SKIP);
	}
}


static processing_state show_proc(const SCHAR* procname)
{
   struct isc_215_struct {
          char  isc_216 [32];	/* RDB$FIELD_NAME */
          char  isc_217 [32];	/* RDB$RELATION_NAME */
          short isc_218;	/* isc_utility */
          short isc_219;	/* gds__null_flag */
          short isc_220;	/* gds__null_flag */
   } isc_215;
   struct isc_212_struct {
          char  isc_213 [32];	/* RDB$PARAMETER_NAME */
          char  isc_214 [32];	/* RDB$PROCEDURE_NAME */
   } isc_212;
   struct isc_226_struct {
          ISC_QUAD isc_227;	/* RDB$DEFAULT_SOURCE */
          short isc_228;	/* isc_utility */
          short isc_229;	/* gds__null_flag */
          short isc_230;	/* gds__null_flag */
          short isc_231;	/* RDB$PARAMETER_MECHANISM */
   } isc_226;
   struct isc_223_struct {
          char  isc_224 [32];	/* RDB$PARAMETER_NAME */
          char  isc_225 [32];	/* RDB$PROCEDURE_NAME */
   } isc_223;
   struct isc_236_struct {
          short isc_237;	/* isc_utility */
          short isc_238;	/* RDB$FIELD_SCALE */
          short isc_239;	/* RDB$FIELD_SUB_TYPE */
          short isc_240;	/* gds__null_flag */
          short isc_241;	/* RDB$FIELD_PRECISION */
   } isc_236;
   struct isc_234_struct {
          char  isc_235 [32];	/* RDB$FIELD_NAME */
   } isc_234;
   struct isc_246_struct {
          ISC_QUAD isc_247;	/* RDB$DEFAULT_SOURCE */
          char  isc_248 [32];	/* RDB$PROCEDURE_NAME */
          char  isc_249 [32];	/* RDB$FIELD_NAME */
          char  isc_250 [32];	/* RDB$PARAMETER_NAME */
          short isc_251;	/* isc_utility */
          short isc_252;	/* gds__null_flag */
          short isc_253;	/* RDB$SYSTEM_FLAG */
          short isc_254;	/* RDB$PARAMETER_TYPE */
          short isc_255;	/* gds__null_flag */
          short isc_256;	/* RDB$CHARACTER_LENGTH */
          short isc_257;	/* RDB$FIELD_SCALE */
          short isc_258;	/* RDB$FIELD_TYPE */
   } isc_246;
   struct isc_244_struct {
          char  isc_245 [32];	/* RDB$PROCEDURE_NAME */
   } isc_244;
   struct isc_263_struct {
          char  isc_264 [32];	/* RDB$PROCEDURE_NAME */
          ISC_QUAD isc_265;	/* RDB$PROCEDURE_SOURCE */
          short isc_266;	/* isc_utility */
          short isc_267;	/* gds__null_flag */
   } isc_263;
   struct isc_261_struct {
          char  isc_262 [32];	/* RDB$PROCEDURE_NAME */
   } isc_261;
   struct isc_272_struct {
          char  isc_273 [32];	/* RDB$DEPENDED_ON_NAME */
          short isc_274;	/* isc_utility */
          short isc_275;	/* RDB$DEPENDED_ON_TYPE */
   } isc_272;
   struct isc_270_struct {
          char  isc_271 [32];	/* RDB$PROCEDURE_NAME */
   } isc_270;
   struct isc_280_struct {
          short isc_281;	/* isc_utility */
          short isc_282;	/* gds__null_flag */
          short isc_283;	/* RDB$VALID_BLR */
   } isc_280;
   struct isc_278_struct {
          char  isc_279 [32];	/* RDB$PROCEDURE_NAME */
   } isc_278;
   struct isc_286_struct {
          char  isc_287 [32];	/* RDB$PROCEDURE_NAME */
          short isc_288;	/* isc_utility */
   } isc_286;
/**************************************
 *
 *	s h o w _ p r o c
 *
 **************************************
 *
 * Functional description
 *	shows text of a stored procedure given a name.
 *	or lists procedures if no argument.
 *
 *	procname -- Name of procedure to investigate
 *
 **************************************/

// If no procedure name was given, just list the procedures

	if (!procname || !strlen(procname))
	{
		/* This query gets the procedure name  the next query
		   **   gets all the dependencies if any
		 */
		bool first_proc = true;

		/*FOR PRC IN RDB$PROCEDURES
			SORTED BY PRC.RDB$PROCEDURE_NAME*/
		{
                if (!isc_284)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_284, (short) sizeof(isc_285), (char*) isc_285);
		if (isc_284)
		   {
                   isc_start_request (isc_status, (FB_API_HANDLE*) &isc_284, (FB_API_HANDLE*) &gds_trans, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_284, (short) 0, (short) 34, &isc_286, (short) 0);
		   if (!isc_286.isc_288 || isc_status [1]) break;

			if (first_proc)
			{
				isqlGlob.printf(
						 "Procedure Name                    Invalid Dependency, Type%s", NEWLINE);
				isqlGlob.printf(
						 "================================= ======= =====================================%s", NEWLINE);
				first_proc = false;
			}

			const char* invalid = "        ";

			if (ENCODE_ODS(isqlGlob.major_ods, isqlGlob.minor_ods) >= ODS_11_1)
			{
				/*FOR PRC2 IN RDB$PROCEDURES
					WITH PRC2.RDB$PROCEDURE_NAME EQ PRC.RDB$PROCEDURE_NAME*/
				{
                                if (!isc_276)
                                   isc_compile_request2 (NULL, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_276, (short) sizeof(isc_277), (char*) isc_277);
				isc_vtov ((const char*) isc_286.isc_287, (char*) isc_278.isc_279, 32);
                                isc_start_and_send (NULL, (FB_API_HANDLE*) &isc_276, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_278, (short) 0);
				while (1)
				   {
                                   isc_receive (NULL, (FB_API_HANDLE*) &isc_276, (short) 1, (short) 6, &isc_280, (short) 0);
				   if (!isc_280.isc_281) break;
					if (!(/*PRC2.RDB$VALID_BLR.NULL*/
					      isc_280.isc_282 || /*PRC2.RDB$VALID_BLR*/
    isc_280.isc_283))
						invalid = "   *    ";
				/*END_FOR*/
				   }
				}
			}

			// Strip trailing blanks

			fb_utils::exact_name(/*PRC.RDB$PROCEDURE_NAME*/
					     isc_286.isc_287);
			isqlGlob.printf("%-34s%s", /*PRC.RDB$PROCEDURE_NAME*/
						   isc_286.isc_287, invalid);

			bool first_dep = true;
			/*FOR DEP IN RDB$DEPENDENCIES WITH
				PRC.RDB$PROCEDURE_NAME EQ DEP.RDB$DEPENDENT_NAME
				REDUCED TO DEP.RDB$DEPENDED_ON_TYPE, DEP.RDB$DEPENDED_ON_NAME
				SORTED BY DEP.RDB$DEPENDED_ON_TYPE, DEP.RDB$DEPENDED_ON_NAME*/
			{
                        if (!isc_268)
                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_268, (short) sizeof(isc_269), (char*) isc_269);
			isc_vtov ((const char*) isc_286.isc_287, (char*) isc_270.isc_271, 32);
			if (isc_268)
			   {
                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_268, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_270, (short) 0);
			   }
			if (!isc_status [1]) {
			while (1)
			   {
                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_268, (short) 1, (short) 36, &isc_272, (short) 0);
			   if (!isc_272.isc_274 || isc_status [1]) break;

				fb_utils::exact_name(/*DEP.RDB$DEPENDED_ON_NAME*/
						     isc_272.isc_273);
				// Get column type name to print
				if (!first_dep) {
					isqlGlob.printf("%s%42s", NEWLINE, "");
				}
				first_dep = false;
				isqlGlob.printf("%s, %s", /*DEP.RDB$DEPENDED_ON_NAME*/
							  isc_272.isc_273,
						 Object_types[/*DEP.RDB$DEPENDED_ON_TYPE*/
							      isc_272.isc_275]);
			/*END_FOR*/
			   }
			   };
			/*ON_ERROR*/
			if (isc_status [1])
			   {
				ISQL_errmsg (isc_status);
				return ps_ERR;
			/*END_ERROR;*/
			   }
			}
			isqlGlob.printf(NEWLINE);

		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}
		if (first_proc)
			return OBJECT_NOT_FOUND;
		return (SKIP);
	}

// A procedure was named, so print all the info on that procedure

	SCHAR type_name[33];
	SCHAR lenstring[33] = "";
	bool first = true;

	/*FOR PRC IN RDB$PROCEDURES WITH
		PRC.RDB$PROCEDURE_NAME EQ procname*/
	{
        if (!isc_259)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_259, (short) sizeof(isc_260), (char*) isc_260);
	isc_vtov ((const char*) procname, (char*) isc_261.isc_262, 32);
	if (isc_259)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_259, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_261, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_259, (short) 1, (short) 44, &isc_263, (short) 0);
	   if (!isc_263.isc_266 || isc_status [1]) break;
		first = false;

		isqlGlob.printf("Procedure text:%s", NEWLINE);
		isqlGlob.printf("=============================================================================%s", NEWLINE);

		if (!/*PRC.RDB$PROCEDURE_SOURCE.NULL*/
		     isc_263.isc_267)
			SHOW_print_metadata_text_blob (isqlGlob.Out, &/*PRC.RDB$PROCEDURE_SOURCE*/
								      isc_263.isc_265);
		isqlGlob.printf("%s=============================================================================%s", NEWLINE, NEWLINE);

		bool first_param = true;

		/*FOR PRM IN RDB$PROCEDURE_PARAMETERS CROSS
			FLD IN RDB$FIELDS WITH
			PRC.RDB$PROCEDURE_NAME EQ PRM.RDB$PROCEDURE_NAME AND
			PRM.RDB$FIELD_SOURCE EQ FLD.RDB$FIELD_NAME
			SORTED BY PRM.RDB$PARAMETER_TYPE, PRM.RDB$PARAMETER_NUMBER*/
		{
                if (!isc_242)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_242, (short) sizeof(isc_243), (char*) isc_243);
		isc_vtov ((const char*) isc_263.isc_264, (char*) isc_244.isc_245, 32);
		if (isc_242)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_242, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_244, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_242, (short) 1, (short) 120, &isc_246, (short) 0);
		   if (!isc_246.isc_251 || isc_status [1]) break;

			if (first_param)
			{
				isqlGlob.printf("Parameters:%s", NEWLINE);
				first_param = false;
			}
			fb_utils::exact_name(/*PRM.RDB$PARAMETER_NAME*/
					     isc_246.isc_250);
			// Get column type name to print
			// Look through types array

			for (int i = 0; Column_types[i].type; i++)
				if (/*FLD.RDB$FIELD_TYPE*/
				    isc_246.isc_258 == Column_types[i].type)
				{
					bool precision_known = false;

					if (isqlGlob.major_ods >= ODS_VERSION10)
					{
						// Handle Integral subtypes NUMERIC and DECIMAL

						if ((/*FLD.RDB$FIELD_TYPE*/
						     isc_246.isc_258 == SMALLINT) ||
							(/*FLD.RDB$FIELD_TYPE*/
							 isc_246.isc_258 == INTEGER) ||
							(/*FLD.RDB$FIELD_TYPE*/
							 isc_246.isc_258 == BIGINT))
						{
							/*FOR FLD1 IN RDB$FIELDS
								WITH FLD1.RDB$FIELD_NAME EQ FLD.RDB$FIELD_NAME*/
							{
                                                        if (!isc_232)
                                                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_232, (short) sizeof(isc_233), (char*) isc_233);
							isc_vtov ((const char*) isc_246.isc_249, (char*) isc_234.isc_235, 32);
							if (isc_232)
							   {
                                                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_232, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_234, (short) 0);
							   }
							if (!isc_status [1]) {
							while (1)
							   {
                                                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_232, (short) 1, (short) 10, &isc_236, (short) 0);
							   if (!isc_236.isc_237 || isc_status [1]) break;
								/* We are ODS >= 10 and could be any Dialect */
								if (!/*FLD1.RDB$FIELD_PRECISION.NULL*/
								     isc_236.isc_240)
								{
									/* We are Dialect >=3 since FIELD_PRECISION is
									   non-NULL */
									if (/*FLD1.RDB$FIELD_SUB_TYPE*/
									    isc_236.isc_239 > 0 &&
										/*FLD1.RDB$FIELD_SUB_TYPE*/
										isc_236.isc_239 <= MAX_INTSUBTYPES)
									{
										sprintf (type_name, "%s(%d, %d)",
												 Integral_subtypes[/*FLD1.RDB$FIELD_SUB_TYPE*/
														   isc_236.isc_239],
												 /*FLD1.RDB$FIELD_PRECISION*/
												 isc_236.isc_241,
												 -/*FLD1.RDB$FIELD_SCALE*/
												  isc_236.isc_238);
										precision_known = true;
									}
								}
							/*END_FOR*/
							   }
							   };
							/*ON_ERROR*/
							if (isc_status [1])
							   {
								ISQL_errmsg (isc_status);
								return ps_ERR;
							/*END_ERROR;*/
							   }
							}
						} // if field_type ...
					} // if isqlGlob.major_ods ...

					if (!precision_known)
					{
						// Take a stab at numerics and decimals
						if ((/*FLD.RDB$FIELD_TYPE*/
						     isc_246.isc_258 == SMALLINT) && (/*FLD.RDB$FIELD_SCALE*/
		  isc_246.isc_257 < 0)) {
							sprintf (type_name, "NUMERIC(4, %d)", -/*FLD.RDB$FIELD_SCALE*/
											       isc_246.isc_257);
						}
						else if ((/*FLD.RDB$FIELD_TYPE*/
							  isc_246.isc_258 == INTEGER) && (/*FLD.RDB$FIELD_SCALE*/
		 isc_246.isc_257 < 0)) {
							sprintf (type_name, "NUMERIC(9, %d)", -/*FLD.RDB$FIELD_SCALE*/
											       isc_246.isc_257);
						}
						else if ((/*FLD.RDB$FIELD_TYPE*/
							  isc_246.isc_258 == DOUBLE_PRECISION) && (/*FLD.RDB$FIELD_SCALE*/
			  isc_246.isc_257 < 0))
						{
							sprintf (type_name, "NUMERIC(15, %d)", -/*FLD.RDB$FIELD_SCALE*/
												isc_246.isc_257);
						}
						else {
							strcpy(type_name, Column_types[i].type_name);
						}
					}
					break;
				}
			/* Use RDB$CHARACTER_LENGTH instead of RDB$FIELD_LENGTH
			   FSG 19.Nov.2000
			*/
			if (((/*FLD.RDB$FIELD_TYPE*/
			      isc_246.isc_258 == T_CHAR) || (/*FLD.RDB$FIELD_TYPE*/
		isc_246.isc_258 == VARCHAR)) &&
				!/*FLD.RDB$CHARACTER_LENGTH.NULL*/
				 isc_246.isc_255)
			{
				sprintf (lenstring, "(%d)", /*FLD.RDB$CHARACTER_LENGTH*/
							    isc_246.isc_256);
			}
			else
			{
				// CVC: the original programmer initialized it only once,
				// outside the loop, so it may contain garbage from previous iteration.
				strcpy(lenstring, "");
			}

			isqlGlob.printf("%-33s %s ", /*PRM.RDB$PARAMETER_NAME*/
						     isc_246.isc_250,
					 (/*PRM.RDB$PARAMETER_TYPE*/
					  isc_246.isc_254 ? "OUTPUT" : "INPUT"));

			prm_mech_t mechanism = prm_mech_normal;
			bool prm_default_source_null = true;
			ISC_QUAD prm_default_source;

			if (ENCODE_ODS(isqlGlob.major_ods, isqlGlob.minor_ods) >= ODS_11_1)
			{
				/*FOR PRM2 IN RDB$PROCEDURE_PARAMETERS
					WITH PRM2.RDB$PROCEDURE_NAME EQ PRM.RDB$PROCEDURE_NAME AND
						 PRM2.RDB$PARAMETER_NAME EQ PRM.RDB$PARAMETER_NAME*/
				{
                                if (!isc_221)
                                   isc_compile_request2 (NULL, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_221, (short) sizeof(isc_222), (char*) isc_222);
				isc_vtov ((const char*) isc_246.isc_250, (char*) isc_223.isc_224, 32);
				isc_vtov ((const char*) isc_246.isc_248, (char*) isc_223.isc_225, 32);
                                isc_start_and_send (NULL, (FB_API_HANDLE*) &isc_221, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 64, &isc_223, (short) 0);
				while (1)
				   {
                                   isc_receive (NULL, (FB_API_HANDLE*) &isc_221, (short) 1, (short) 16, &isc_226, (short) 0);
				   if (!isc_226.isc_228) break;

					if (!/*PRM2.RDB$PARAMETER_MECHANISM.NULL*/
					     isc_226.isc_230)
						mechanism = (prm_mech_t) /*PRM2.RDB$PARAMETER_MECHANISM*/
									 isc_226.isc_231;

					if (/*PRM.RDB$PARAMETER_TYPE*/
					    isc_246.isc_254 == 0) // input, try to show default and make Vlad happy.
					{
						prm_default_source_null = /*PRM2.RDB$DEFAULT_SOURCE.NULL*/
									  isc_226.isc_229;
						prm_default_source = /*PRM2.RDB$DEFAULT_SOURCE*/
								     isc_226.isc_227;
					}
				/*END_FOR*/
				   }
				}
			}

			char relationName[BUFFER_LENGTH128] = "";
			char relationField[BUFFER_LENGTH128] = "";

			if (ENCODE_ODS(isqlGlob.major_ods, isqlGlob.minor_ods) >= ODS_11_2)
			{
				/*FOR PRM2 IN RDB$PROCEDURE_PARAMETERS
					WITH PRM2.RDB$PROCEDURE_NAME EQ PRM.RDB$PROCEDURE_NAME AND
						 PRM2.RDB$PARAMETER_NAME EQ PRM.RDB$PARAMETER_NAME*/
				{
                                if (!isc_210)
                                   isc_compile_request2 (NULL, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_210, (short) sizeof(isc_211), (char*) isc_211);
				isc_vtov ((const char*) isc_246.isc_250, (char*) isc_212.isc_213, 32);
				isc_vtov ((const char*) isc_246.isc_248, (char*) isc_212.isc_214, 32);
                                isc_start_and_send (NULL, (FB_API_HANDLE*) &isc_210, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 64, &isc_212, (short) 0);
				while (1)
				   {
                                   isc_receive (NULL, (FB_API_HANDLE*) &isc_210, (short) 1, (short) 70, &isc_215, (short) 0);
				   if (!isc_215.isc_218) break;

					if (!/*PRM2.RDB$RELATION_NAME.NULL*/
					     isc_215.isc_220)
					{
						strcpy(relationName, /*PRM2.RDB$RELATION_NAME*/
								     isc_215.isc_217);
						fb_utils::exact_name(relationName);
					}

					if (!/*PRM2.RDB$FIELD_NAME.NULL*/
					     isc_215.isc_219)
					{
						strcpy(relationField, /*PRM2.RDB$FIELD_NAME*/
								      isc_215.isc_216);
						fb_utils::exact_name(relationField);
					}

				/*END_FOR*/
				   }
				}
			}

			const bool basedOnColumn = relationName[0] && relationField[0];
			// Decide if this is a user-created domain
			if (!fb_utils::implicit_domain(/*FLD.RDB$FIELD_NAME*/
						       isc_246.isc_249) || /*FLD.RDB$SYSTEM_FLAG*/
     isc_246.isc_253 == 1 ||
				basedOnColumn)
			{
				isqlGlob.printf("(%s", (mechanism == prm_mech_type_of ? "TYPE OF " : ""));

				if (basedOnColumn)
					isqlGlob.printf("COLUMN %s.%s) ", relationName, relationField);
				else
				{
					fb_utils::exact_name(/*FLD.RDB$FIELD_NAME*/
							     isc_246.isc_249);
					isqlGlob.printf("%s) ", /*FLD.RDB$FIELD_NAME*/
								isc_246.isc_249);
				}
			}

			isqlGlob.printf("%s%s", type_name, lenstring);

			// Show international character sets and collations

			if (/*FLD.RDB$FIELD_TYPE*/
			    isc_246.isc_258 == T_CHAR ||
				/*FLD.RDB$FIELD_TYPE*/
				isc_246.isc_258 == VARCHAR  ||
				/*FLD.RDB$FIELD_TYPE*/
				isc_246.isc_258 == BLOB)
			{
				show_proc_charsets(/*PRM.RDB$PROCEDURE_NAME*/
						   isc_246.isc_248, /*PRM.RDB$PARAMETER_NAME*/
  isc_246.isc_250, true, true, false);
			}

			if (/*PRM.RDB$PARAMETER_TYPE*/
			    isc_246.isc_254 == 0) // input, try to show default and make Vlad happy.
			{
				if (!prm_default_source_null)
				{
					isqlGlob.printf(" ");
					SHOW_print_metadata_text_blob(isqlGlob.Out, &prm_default_source);
				}
				else if (fb_utils::implicit_domain(/*FLD.RDB$FIELD_NAME*/
								   isc_246.isc_249) && !/*FLD.RDB$DEFAULT_SOURCE.NULL*/
      isc_246.isc_252)
				{
					isqlGlob.printf(" ");
					SHOW_print_metadata_text_blob(isqlGlob.Out, &/*FLD.RDB$DEFAULT_SOURCE*/
										     isc_246.isc_247);
				}
			}

			isqlGlob.printf(NEWLINE);

		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg (isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}

	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR;*/
	   }
	}
	if (first)
		return (OBJECT_NOT_FOUND);
	return (SKIP);
}


static processing_state show_role(const SCHAR* object)
{
   struct isc_188_struct {
          char  isc_189 [32];	/* RDB$USER */
          char  isc_190 [32];	/* RDB$RELATION_NAME */
          short isc_191;	/* isc_utility */
   } isc_188;
   struct isc_184_struct {
          char  isc_185 [32];	/* RDB$RELATION_NAME */
          short isc_186;	/* RDB$USER_TYPE */
          short isc_187;	/* RDB$OBJECT_TYPE */
   } isc_184;
   struct isc_196_struct {
          char  isc_197 [32];	/* RDB$ROLE_NAME */
          short isc_198;	/* isc_utility */
   } isc_196;
   struct isc_194_struct {
          char  isc_195 [32];	/* RDB$ROLE_NAME */
   } isc_194;
   struct isc_203_struct {
          short isc_204;	/* isc_utility */
   } isc_203;
   struct isc_201_struct {
          char  isc_202 [32];	/* RDB$ROLE_NAME */
   } isc_201;
   struct isc_207_struct {
          char  isc_208 [32];	/* RDB$ROLE_NAME */
          short isc_209;	/* isc_utility */
   } isc_207;
	if (object == NULL)
	{
		// show role with no parameters, show all roles
		// **************************************
		// * Print the names of all roles from
		// * RDB$ROLES.  We use a dynamic query
		// * If there is any roles, then returns SKIP.
		// *	Otherwise returns OBJECT_NOT_FOUND.
		// **************************************/
		bool first = true;
		bool odd = true;

		/*FOR X IN RDB$ROLES WITH
			X.RDB$ROLE_NAME NOT MISSING
			SORTED BY X.RDB$ROLE_NAME*/
		{
                if (!isc_205)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_205, (short) sizeof(isc_206), (char*) isc_206);
		if (isc_205)
		   {
                   isc_start_request (isc_status, (FB_API_HANDLE*) &isc_205, (FB_API_HANDLE*) &gds_trans, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_205, (short) 0, (short) 34, &isc_207, (short) 0);
		   if (!isc_207.isc_209 || isc_status [1]) break;

			bool system_flag = false;
			if (isqlGlob.major_ods >= ODS_VERSION11)
			{
				/*FOR SF IN RDB$ROLES
					WITH SF.RDB$ROLE_NAME = X.RDB$ROLE_NAME
					 AND SF.RDB$SYSTEM_FLAG > 0*/
				{
                                if (!isc_199)
                                   isc_compile_request2 (NULL, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_199, (short) sizeof(isc_200), (char*) isc_200);
				isc_vtov ((const char*) isc_207.isc_208, (char*) isc_201.isc_202, 32);
                                isc_start_and_send (NULL, (FB_API_HANDLE*) &isc_199, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_201, (short) 0);
				while (1)
				   {
                                   isc_receive (NULL, (FB_API_HANDLE*) &isc_199, (short) 1, (short) 2, &isc_203, (short) 0);
				   if (!isc_203.isc_204) break;

					system_flag = true;

				/*END_FOR*/
				   }
				}
			}

			if (! system_flag)
			{
				first = false;
				isqlGlob.printf("%38s%s", /*X.RDB$ROLE_NAME*/
							  isc_207.isc_208, (odd ? " " : NEWLINE));
				odd = !odd;
			}

		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}

		if (!first)
		{
			isqlGlob.printf(NEWLINE);
			return SKIP;
		}

		return OBJECT_NOT_FOUND;
	}

	// show role with role supplied, display users granted this role
	SCHAR role_name[BUFFER_LENGTH128];
	bool first = true;

	/*FOR FIRST 1 R IN RDB$ROLES WITH R.RDB$ROLE_NAME EQ object*/
	{
        if (!isc_192)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_192, (short) sizeof(isc_193), (char*) isc_193);
	isc_vtov ((const char*) object, (char*) isc_194.isc_195, 32);
	if (isc_192)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_192, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_194, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_192, (short) 1, (short) 34, &isc_196, (short) 0);
	   if (!isc_196.isc_198 || isc_status [1]) break;

		/*FOR PRV IN RDB$USER_PRIVILEGES WITH
			PRV.RDB$OBJECT_TYPE   EQ obj_sql_role AND
			PRV.RDB$USER_TYPE     EQ obj_user     AND
			PRV.RDB$RELATION_NAME EQ object       AND
			PRV.RDB$PRIVILEGE     EQ 'M'
			SORTED BY  PRV.RDB$USER*/
		{
                if (!isc_182)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_182, (short) sizeof(isc_183), (char*) isc_183);
		isc_vtov ((const char*) object, (char*) isc_184.isc_185, 32);
		isc_184.isc_186 = obj_user;
		isc_184.isc_187 = obj_sql_role;
		if (isc_182)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_182, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 36, &isc_184, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_182, (short) 1, (short) 66, &isc_188, (short) 0);
		   if (!isc_188.isc_191 || isc_status [1]) break;

			if (first)
			{
				first = false;
				fb_utils::exact_name(/*PRV.RDB$RELATION_NAME*/
						     isc_188.isc_190);
				strcpy(role_name, /*PRV.RDB$RELATION_NAME*/
						  isc_188.isc_190);
				if (isqlGlob.db_SQL_dialect > SQL_DIALECT_V6_TRANSITION)
					ISQL_copy_SQL_id(role_name, SQL_identifier, DBL_QUOTE);
				else
					strcpy(SQL_identifier, role_name);

				isqlGlob.printf("Role %s is granted to:%s", SQL_identifier, NEWLINE);
			}

			fb_utils::exact_name(/*PRV.RDB$USER*/
					     isc_188.isc_189);
			isqlGlob.printf("%s%s", /*PRV.RDB$USER*/
						isc_188.isc_189, NEWLINE);

		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg (isc_status);
			return ps_ERR;
		/*END_ERROR*/
		   }
		}

		if (first)
		{
		    first = false;
			fb_utils::exact_name(/*R.RDB$ROLE_NAME*/
					     isc_196.isc_197);
			strcpy(role_name, /*R.RDB$ROLE_NAME*/
					  isc_196.isc_197);
			if (isqlGlob.db_SQL_dialect > SQL_DIALECT_V6_TRANSITION)
				ISQL_copy_SQL_id(role_name, SQL_identifier, DBL_QUOTE);
			else
				strcpy(SQL_identifier, role_name);

		    isqlGlob.printf("Role %s isn't granted to anyone.%s", SQL_identifier, NEWLINE);
		}

	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	if (first)
		return (OBJECT_NOT_FOUND);

	return (SKIP);
}


// ***********************
// s h o w _ s e c c l a s
// ***********************
// Show low-level, GDML security for an object. It may be table/view or procedure.
// Using SHOW SECCLASS <name> DET[AIL] will print the contents of the sec blob.
// Using SHOW SECCLASS * DET[AIL] will print the db-wide sec class in rdb$database.
static processing_state show_secclass(const char* object, const char* opt)
{
   struct isc_143_struct {
          ISC_QUAD isc_144;	/* RDB$ACL */
          char  isc_145 [32];	/* RDB$SECURITY_CLASS */
          short isc_146;	/* isc_utility */
   } isc_143;
   struct isc_141_struct {
          char  isc_142 [32];	/* RDB$PROCEDURE_NAME */
   } isc_141;
   struct isc_151_struct {
          ISC_QUAD isc_152;	/* RDB$ACL */
          char  isc_153 [32];	/* RDB$SECURITY_CLASS */
          char  isc_154 [32];	/* RDB$FIELD_NAME */
          short isc_155;	/* isc_utility */
   } isc_151;
   struct isc_149_struct {
          char  isc_150 [32];	/* RDB$RELATION_NAME */
   } isc_149;
   struct isc_160_struct {
          ISC_QUAD isc_161;	/* RDB$ACL */
          char  isc_162 [32];	/* RDB$SECURITY_CLASS */
          ISC_QUAD isc_163;	/* RDB$VIEW_BLR */
          short isc_164;	/* isc_utility */
          short isc_165;	/* gds__null_flag */
   } isc_160;
   struct isc_158_struct {
          char  isc_159 [32];	/* RDB$RELATION_NAME */
   } isc_158;
   struct isc_170_struct {
          ISC_QUAD isc_171;	/* RDB$ACL */
          char  isc_172 [32];	/* RDB$SECURITY_CLASS */
          ISC_QUAD isc_173;	/* RDB$VIEW_BLR */
          short isc_174;	/* isc_utility */
          short isc_175;	/* gds__null_flag */
   } isc_170;
   struct isc_168_struct {
          char  isc_169 [32];	/* RDB$RELATION_NAME */
   } isc_168;
   struct isc_178_struct {
          ISC_QUAD isc_179;	/* RDB$ACL */
          char  isc_180 [32];	/* RDB$SECURITY_CLASS */
          short isc_181;	/* isc_utility */
   } isc_178;
	if (!object || !*object)
		return ps_ERR;

	const bool detail = opt &&
		(fb_utils::stricmp(opt, "DETAIL") == 0 ||
		 fb_utils::stricmp(opt, "DET") == 0);
	XSQLVAR var; // To trick ISQL_print_item_blob()
	memset(&var, 0, sizeof(var));
	var.sqlsubtype = isc_blob_acl;

	int count = 0;

	if (strcmp(object, "*") == 0)
	{
		/*FOR D IN RDB$DATABASE
		CROSS SC IN RDB$SECURITY_CLASSES
		OVER RDB$SECURITY_CLASS*/
		{
                if (!isc_176)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_176, (short) sizeof(isc_177), (char*) isc_177);
		if (isc_176)
		   {
                   isc_start_request (isc_status, (FB_API_HANDLE*) &isc_176, (FB_API_HANDLE*) &gds_trans, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_176, (short) 0, (short) 42, &isc_178, (short) 0);
		   if (!isc_178.isc_181 || isc_status [1]) break;
			++count;
			isqlGlob.printf("Database-wide's sec class %s%s",
				fb_utils::exact_name(/*SC.RDB$SECURITY_CLASS*/
						     isc_178.isc_180), NEWLINE);
			if (detail)
			{
				var.sqldata = reinterpret_cast<char*>(&/*SC.RDB$ACL*/
								       isc_178.isc_179);
				ISQL_print_item_blob(isqlGlob.Out, &var, gds_trans, isc_blob_acl);
			}
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR*/
		   }
		}

		return count ? SKIP : OBJECT_NOT_FOUND;
	}

	/*FOR REL IN RDB$RELATIONS
	CROSS SC IN RDB$SECURITY_CLASSES
	OVER RDB$SECURITY_CLASS
	WITH REL.RDB$RELATION_NAME EQ object*/
	{
        if (!isc_166)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_166, (short) sizeof(isc_167), (char*) isc_167);
	isc_vtov ((const char*) object, (char*) isc_168.isc_169, 32);
	if (isc_166)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_166, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_168, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_166, (short) 1, (short) 52, &isc_170, (short) 0);
	   if (!isc_170.isc_174 || isc_status [1]) break;
		++count;
		isqlGlob.printf("%s's main sec class %s%s",
			/*REL.RDB$VIEW_BLR.NULL*/
			isc_170.isc_175 ? "Table" : "View",
			fb_utils::exact_name(/*SC.RDB$SECURITY_CLASS*/
					     isc_170.isc_172), NEWLINE);
		if (detail)
		{
			var.sqldata = reinterpret_cast<char*>(&/*SC.RDB$ACL*/
							       isc_170.isc_171);
			ISQL_print_item_blob(isqlGlob.Out, &var, gds_trans, isc_blob_acl);
		}
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	/*FOR REL2 IN RDB$RELATIONS
	CROSS SC IN RDB$SECURITY_CLASSES
	WITH REL2.RDB$RELATION_NAME EQ object
	AND REL2.RDB$DEFAULT_CLASS EQ SC.RDB$SECURITY_CLASS*/
	{
        if (!isc_156)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_156, (short) sizeof(isc_157), (char*) isc_157);
	isc_vtov ((const char*) object, (char*) isc_158.isc_159, 32);
	if (isc_156)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_156, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_158, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_156, (short) 1, (short) 52, &isc_160, (short) 0);
	   if (!isc_160.isc_164 || isc_status [1]) break;
		++count;
		isqlGlob.printf("%s's default sec class %s%s",
			/*REL2.RDB$VIEW_BLR.NULL*/
			isc_160.isc_165 ? "Table" : "View",
			fb_utils::exact_name(/*SC.RDB$SECURITY_CLASS*/
					     isc_160.isc_162), NEWLINE);
		if (detail)
		{
			var.sqldata = reinterpret_cast<char*>(&/*SC.RDB$ACL*/
							       isc_160.isc_161);
			ISQL_print_item_blob(isqlGlob.Out, &var, gds_trans, isc_blob_acl);
		}
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	/*FOR RF IN RDB$RELATION_FIELDS
	CROSS SC IN RDB$SECURITY_CLASSES
	OVER RDB$SECURITY_CLASS
	WITH RF.RDB$RELATION_NAME EQ object
	SORTED BY RF.RDB$FIELD_POSITION*/
	{
        if (!isc_147)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_147, (short) sizeof(isc_148), (char*) isc_148);
	isc_vtov ((const char*) object, (char*) isc_149.isc_150, 32);
	if (isc_147)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_147, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_149, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_147, (short) 1, (short) 74, &isc_151, (short) 0);
	   if (!isc_151.isc_155 || isc_status [1]) break;
		++count;
		isqlGlob.printf("   Field %s - sec class %s%s", fb_utils::exact_name(/*RF.RDB$FIELD_NAME*/
										     isc_151.isc_154),
			/*SC.RDB$SECURITY_CLASS*/
			isc_151.isc_153, NEWLINE);
		if (detail)
		{
			var.sqldata = reinterpret_cast<char*>(&/*SC.RDB$ACL*/
							       isc_151.isc_152);
			ISQL_print_item_blob(isqlGlob.Out, &var, gds_trans, isc_blob_acl);
		}
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	/*FOR PR IN RDB$PROCEDURES
	CROSS SC IN RDB$SECURITY_CLASSES
	OVER RDB$SECURITY_CLASS
	WITH PR.RDB$PROCEDURE_NAME EQ object*/
	{
        if (!isc_139)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_139, (short) sizeof(isc_140), (char*) isc_140);
	isc_vtov ((const char*) object, (char*) isc_141.isc_142, 32);
	if (isc_139)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_139, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_141, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_139, (short) 1, (short) 42, &isc_143, (short) 0);
	   if (!isc_143.isc_146 || isc_status [1]) break;
		++count;
		isqlGlob.printf("Procedure's sec class %s%s",
			fb_utils::exact_name(/*SC.RDB$SECURITY_CLASS*/
					     isc_143.isc_145), NEWLINE);
		if (detail)
		{
			var.sqldata = reinterpret_cast<char*>(&/*SC.RDB$ACL*/
							       isc_143.isc_144);
			ISQL_print_item_blob(isqlGlob.Out, &var, gds_trans, isc_blob_acl);
		}
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	return count ? SKIP : OBJECT_NOT_FOUND;
}


static processing_state show_table(const SCHAR* relation_name, bool isView)
{
   struct isc_48_struct {
          char  isc_49 [32];	/* RDB$TRIGGER_NAME */
          char  isc_50 [32];	/* RDB$CONSTRAINT_NAME */
          short isc_51;	/* isc_utility */
   } isc_48;
   struct isc_46_struct {
          char  isc_47 [32];	/* RDB$RELATION_NAME */
   } isc_46;
   struct isc_56_struct {
          char  isc_57 [32];	/* RDB$INDEX_NAME */
          short isc_58;	/* isc_utility */
          short isc_59;	/* gds__null_flag */
          short isc_60;	/* RDB$INDEX_TYPE */
   } isc_56;
   struct isc_54_struct {
          char  isc_55 [32];	/* RDB$INDEX_NAME */
   } isc_54;
   struct isc_65_struct {
          char  isc_66 [32];	/* RDB$RELATION_NAME */
          char  isc_67 [32];	/* RDB$INDEX_NAME */
          char  isc_68 [12];	/* RDB$DELETE_RULE */
          char  isc_69 [12];	/* RDB$UPDATE_RULE */
          short isc_70;	/* isc_utility */
          short isc_71;	/* gds__null_flag */
          short isc_72;	/* gds__null_flag */
   } isc_65;
   struct isc_63_struct {
          char  isc_64 [32];	/* RDB$CONSTRAINT_NAME */
   } isc_63;
   struct isc_77_struct {
          char  isc_78 [32];	/* RDB$INDEX_NAME */
          char  isc_79 [32];	/* RDB$CONSTRAINT_NAME */
          char  isc_80 [12];	/* RDB$CONSTRAINT_TYPE */
          short isc_81;	/* isc_utility */
   } isc_77;
   struct isc_75_struct {
          char  isc_76 [32];	/* RDB$RELATION_NAME */
   } isc_75;
   struct isc_86_struct {
          ISC_QUAD isc_87;	/* RDB$VIEW_SOURCE */
          short isc_88;	/* isc_utility */
          short isc_89;	/* gds__null_flag */
   } isc_86;
   struct isc_84_struct {
          char  isc_85 [32];	/* RDB$RELATION_NAME */
   } isc_84;
   struct isc_94_struct {
          short isc_95;	/* isc_utility */
          short isc_96;	/* RDB$FIELD_SCALE */
          short isc_97;	/* RDB$FIELD_SUB_TYPE */
          short isc_98;	/* gds__null_flag */
          short isc_99;	/* RDB$FIELD_PRECISION */
   } isc_94;
   struct isc_92_struct {
          char  isc_93 [32];	/* RDB$FIELD_NAME */
   } isc_92;
   struct isc_104_struct {
          ISC_QUAD isc_105;	/* RDB$VALIDATION_SOURCE */
          ISC_QUAD isc_106;	/* RDB$DEFAULT_SOURCE */
          ISC_QUAD isc_107;	/* RDB$DEFAULT_SOURCE */
          char  isc_108 [32];	/* RDB$BASE_FIELD */
          ISC_QUAD isc_109;	/* RDB$COMPUTED_SOURCE */
          ISC_QUAD isc_110;	/* RDB$COMPUTED_BLR */
          char  isc_111 [32];	/* RDB$FIELD_NAME */
          char  isc_112 [32];	/* RDB$FIELD_NAME */
          short isc_113;	/* isc_utility */
          short isc_114;	/* gds__null_flag */
          short isc_115;	/* gds__null_flag */
          short isc_116;	/* gds__null_flag */
          short isc_117;	/* gds__null_flag */
          short isc_118;	/* RDB$NULL_FLAG */
          short isc_119;	/* RDB$NULL_FLAG */
          short isc_120;	/* RDB$FIELD_SUB_TYPE */
          short isc_121;	/* RDB$SEGMENT_LENGTH */
          short isc_122;	/* RDB$FIELD_SCALE */
          short isc_123;	/* RDB$FIELD_TYPE */
          short isc_124;	/* gds__null_flag */
          short isc_125;	/* gds__null_flag */
          short isc_126;	/* gds__null_flag */
          short isc_127;	/* RDB$DIMENSIONS */
          short isc_128;	/* RDB$SYSTEM_FLAG */
   } isc_104;
   struct isc_102_struct {
          char  isc_103 [32];	/* RDB$RELATION_NAME */
   } isc_102;
   struct isc_133_struct {
          ISC_QUAD isc_134;	/* RDB$VIEW_BLR */
          char  isc_135 [256];	/* RDB$EXTERNAL_FILE */
          short isc_136;	/* isc_utility */
          short isc_137;	/* gds__null_flag */
          short isc_138;	/* gds__null_flag */
   } isc_133;
   struct isc_131_struct {
          char  isc_132 [32];	/* RDB$RELATION_NAME */
   } isc_131;
/**************************************
 *
 *	s h o w _ t a b l e
 *
 **************************************
 *
 * Functional description
 *	shows columns, types, info for a given table name
 *	and text of views.
 *	Use a SQL query to get the info and print it.
 *	This also shows integrity constraints and triggers
 *
 *	relation_name -- Name of table to investigate
 *
 **************************************/
	bool first = true;

// Query to obtain relation information
// REL.RDB$VIEW_BLR NOT MISSING

	/*FOR REL IN RDB$RELATIONS
		WITH REL.RDB$RELATION_NAME EQ relation_name*/
	{
        if (!isc_129)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_129, (short) sizeof(isc_130), (char*) isc_130);
	isc_vtov ((const char*) relation_name, (char*) isc_131.isc_132, 32);
	if (isc_129)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_129, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_131, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_129, (short) 1, (short) 270, &isc_133, (short) 0);
	   if (!isc_133.isc_136 || isc_status [1]) break;
		if (first)
		{
			if (!/*REL.RDB$EXTERNAL_FILE.NULL*/
			     isc_133.isc_138)
			{
				isqlGlob.printf("External file: %s%s", /*REL.RDB$EXTERNAL_FILE*/
								       isc_133.isc_135, NEWLINE);
			}
		}
		first = false;
		if (isView && /*REL.RDB$VIEW_BLR.NULL*/
			      isc_133.isc_137 || !isView && !/*REL.RDB$VIEW_BLR.NULL*/
		isc_133.isc_137)
			first = true;
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR;*/
	   }
	}

	if (first)
		return (OBJECT_NOT_FOUND);

/*
*FOR RFR IN RDB$RELATION_FIELDS CROSS
	REL IN RDB$RELATIONS CROSS
	FLD IN RDB$FIELDS WITH
	RFR.RDB$FIELD_SOURCE EQ FLD.RDB$FIELD_NAME AND
	RFR.RDB$RELATION_NAME EQ relation_name AND
	REL.RDB$RELATION_NAME EQ RFR.RDB$RELATION_NAME
	SORTED BY RFR.RDB$FIELD_POSITION, RFR.RDB$FIELD_NAME
*/

	/*FOR RFR IN RDB$RELATION_FIELDS CROSS
		FLD IN RDB$FIELDS WITH
		RFR.RDB$FIELD_SOURCE EQ FLD.RDB$FIELD_NAME AND
		RFR.RDB$RELATION_NAME EQ relation_name
		SORTED BY RFR.RDB$FIELD_POSITION, RFR.RDB$FIELD_NAME*/
	{
        if (!isc_100)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_100, (short) sizeof(isc_101), (char*) isc_101);
	isc_vtov ((const char*) relation_name, (char*) isc_102.isc_103, 32);
	if (isc_100)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_100, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_102, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_100, (short) 1, (short) 168, &isc_104, (short) 0);
	   if (!isc_104.isc_113 || isc_status [1]) break;

		// Get length of colname to align columns for printing

		fb_utils::exact_name(/*RFR.RDB$FIELD_NAME*/
				     isc_104.isc_112);

		// Print the column name in first column

		isqlGlob.printf("%-32s", /*RFR.RDB$FIELD_NAME*/
					 isc_104.isc_112);

		// Decide if this is a user-created domain
		if (!(fb_utils::implicit_domain(/*FLD.RDB$FIELD_NAME*/
						isc_104.isc_111) && /*FLD.RDB$SYSTEM_FLAG*/
     isc_104.isc_128 != 1))
		{
			fb_utils::exact_name(/*FLD.RDB$FIELD_NAME*/
					     isc_104.isc_111);
			isqlGlob.printf("(%s) ", /*FLD.RDB$FIELD_NAME*/
						 isc_104.isc_111);
		}

		// Detect the existence of arrays

		if (!/*FLD.RDB$DIMENSIONS.NULL*/
		     isc_104.isc_126)
		{
			isqlGlob.printf("ARRAY OF ");
			ISQL_array_dimensions (/*FLD.RDB$FIELD_NAME*/
					       isc_104.isc_111);
			isqlGlob.printf("%s                                ", NEWLINE);
		}

		// If a computed field, show the source and exit
		// Note that view columns which are computed are dealt with later.
		if (!/*FLD.RDB$COMPUTED_BLR.NULL*/
		     isc_104.isc_125 && !isView)
		{
			isqlGlob.printf("Computed by: ");
			if (!/*FLD.RDB$COMPUTED_SOURCE.NULL*/
			     isc_104.isc_124)
				SHOW_print_metadata_text_blob (isqlGlob.Out, &/*FLD.RDB$COMPUTED_SOURCE*/
									      isc_104.isc_109);
			isqlGlob.printf(NEWLINE);
			continue;
		}

		// Look through types array

		for (int i = 0; Column_types[i].type; i++)
		{
			if (/*FLD.RDB$FIELD_TYPE*/
			    isc_104.isc_123 == Column_types[i].type)
			{
				bool precision_known = false;

				if (isqlGlob.major_ods >= ODS_VERSION10)
				{
					// Handle Integral subtypes NUMERIC and DECIMAL
					if ((/*FLD.RDB$FIELD_TYPE*/
					     isc_104.isc_123 == SMALLINT) ||
						(/*FLD.RDB$FIELD_TYPE*/
						 isc_104.isc_123 == INTEGER) ||
						(/*FLD.RDB$FIELD_TYPE*/
						 isc_104.isc_123 == BIGINT))
					{
						/*FOR FLD1 IN RDB$FIELDS WITH
							FLD1.RDB$FIELD_NAME EQ FLD.RDB$FIELD_NAME*/
						{
                                                if (!isc_90)
                                                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_90, (short) sizeof(isc_91), (char*) isc_91);
						isc_vtov ((const char*) isc_104.isc_111, (char*) isc_92.isc_93, 32);
						if (isc_90)
						   {
                                                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_90, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_92, (short) 0);
						   }
						if (!isc_status [1]) {
						while (1)
						   {
                                                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_90, (short) 1, (short) 10, &isc_94, (short) 0);
						   if (!isc_94.isc_95 || isc_status [1]) break;

							/* We are ODS >= 10 and could be any Dialect */
							if (!/*FLD1.RDB$FIELD_PRECISION.NULL*/
							     isc_94.isc_98)
							{
								/* We are Dialect >=3 since FIELD_PRECISION is
								   non-NULL */
								if (/*FLD1.RDB$FIELD_SUB_TYPE*/
								    isc_94.isc_97 > 0 &&
									/*FLD1.RDB$FIELD_SUB_TYPE*/
									isc_94.isc_97 <= MAX_INTSUBTYPES)
								{
									sprintf (Print_buffer, "%s(%d, %d)",
											 Integral_subtypes[/*FLD1.RDB$FIELD_SUB_TYPE*/
													   isc_94.isc_97],
											 /*FLD1.RDB$FIELD_PRECISION*/
											 isc_94.isc_99,
											 -/*FLD1.RDB$FIELD_SCALE*/
											  isc_94.isc_96);
									precision_known = true;
								}
							}
						/*END_FOR*/
						   }
						   };
						/*ON_ERROR*/
						if (isc_status [1])
						   {
							ISQL_errmsg (isc_status);
							return ps_ERR;
						/*END_ERROR;*/
						   }
						}
					}
				}

				if (!precision_known)
				{
					// Take a stab at numerics and decimals
					if ((/*FLD.RDB$FIELD_TYPE*/
					     isc_104.isc_123 == SMALLINT) && (/*FLD.RDB$FIELD_SCALE*/
		  isc_104.isc_122 < 0)) {
						sprintf (Print_buffer, "NUMERIC(4, %d)", -/*FLD.RDB$FIELD_SCALE*/
											  isc_104.isc_122);
					}
					else if ((/*FLD.RDB$FIELD_TYPE*/
						  isc_104.isc_123 == INTEGER) && (/*FLD.RDB$FIELD_SCALE*/
		 isc_104.isc_122 < 0)) {
						sprintf (Print_buffer, "NUMERIC(9, %d)", -/*FLD.RDB$FIELD_SCALE*/
											  isc_104.isc_122);
					}
					else if ((/*FLD.RDB$FIELD_TYPE*/
						  isc_104.isc_123 == DOUBLE_PRECISION) &&
							 (/*FLD.RDB$FIELD_SCALE*/
							  isc_104.isc_122 < 0))
					{
						sprintf (Print_buffer, "NUMERIC(15, %d)", -/*FLD.RDB$FIELD_SCALE*/
											   isc_104.isc_122);
					}
					else {
						sprintf (Print_buffer, "%s", Column_types[i].type_name);
					}
				}
				isqlGlob.prints(Print_buffer);
				break;
			}
		}

		if ((/*FLD.RDB$FIELD_TYPE*/
		     isc_104.isc_123 == T_CHAR) || (/*FLD.RDB$FIELD_TYPE*/
		isc_104.isc_123 == VARCHAR)) {
			isqlGlob.printf("(%d)", ISQL_get_field_length(/*FLD.RDB$FIELD_NAME*/
								      isc_104.isc_111));

			// Show international character sets and collations
			show_charsets(relation_name, /*RFR.RDB$FIELD_NAME*/
						     isc_104.isc_112, true, false, false, false);
		}

		if (/*FLD.RDB$FIELD_TYPE*/
		    isc_104.isc_123 == BLOB)
		{
			isqlGlob.printf(" segment %u, subtype ", (USHORT) /*FLD.RDB$SEGMENT_LENGTH*/
									  isc_104.isc_121);
			const int subtype  = /*FLD.RDB$FIELD_SUB_TYPE*/
					     isc_104.isc_120;
			if (subtype >= 0 && subtype <= MAX_BLOBSUBTYPES)
			{
				isqlGlob.prints(Sub_types[subtype]);
			}
			else
			{
				isqlGlob.printf("%d", subtype);
			}

			// Show international character sets and collations

			show_charsets(relation_name, /*RFR.RDB$FIELD_NAME*/
						     isc_104.isc_112, true, false, false, false);
		}

		if (!/*FLD.RDB$COMPUTED_BLR.NULL*/
		     isc_104.isc_125)
		{
			// A view expression. Other computed fields will not reach this point.
			isqlGlob.printf(" Expression%s", NEWLINE);
			continue;
		}

		// The null flag is either 1 or null (for nullable)

		if (/*RFR.RDB$NULL_FLAG*/
		    isc_104.isc_119 == 1 || /*FLD.RDB$NULL_FLAG*/
	 isc_104.isc_118 == 1 ||
			(!/*RFR.RDB$BASE_FIELD.NULL*/
			  isc_104.isc_117 && !ISQL_get_null_flag (relation_name, /*RFR.RDB$FIELD_NAME*/
					isc_104.isc_112)))
		{
			isqlGlob.printf(" Not Null ");
		}
		else
		{
			isqlGlob.printf(" Nullable ");
		}

		// Handle defaults for columns

		if (!/*RFR.RDB$DEFAULT_SOURCE.NULL*/
		     isc_104.isc_116)
			SHOW_print_metadata_text_blob (isqlGlob.Out, &/*RFR.RDB$DEFAULT_SOURCE*/
								      isc_104.isc_107);
		else if (!/*FLD.RDB$DEFAULT_SOURCE.NULL*/
			  isc_104.isc_115)
			SHOW_print_metadata_text_blob (isqlGlob.Out, &/*FLD.RDB$DEFAULT_SOURCE*/
								      isc_104.isc_106);
		isqlGlob.printf(NEWLINE);

		// Validation clause for domains
		if (!/*FLD.RDB$VALIDATION_SOURCE.NULL*/
		     isc_104.isc_114)
		{
			isqlGlob.printf("                                ");
			SHOW_print_metadata_text_blob (isqlGlob.Out, &/*FLD.RDB$VALIDATION_SOURCE*/
								      isc_104.isc_105);
			isqlGlob.printf(NEWLINE);
		}

		// Handle collations
		if ((/*FLD.RDB$FIELD_TYPE*/
		     isc_104.isc_123 == T_CHAR) || (/*FLD.RDB$FIELD_TYPE*/
		isc_104.isc_123 == VARCHAR) ||
			(/*FLD.RDB$FIELD_TYPE*/
			 isc_104.isc_123 == BLOB))
		{
			show_charsets(relation_name, /*RFR.RDB$FIELD_NAME*/
						     isc_104.isc_112, false, true, true, true);
		}

	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR;*/
	   }
	}

	// If this is a view and there were columns, print the view text

	if (!first)
	{
		/*FOR REL IN RDB$RELATIONS WITH
			REL.RDB$RELATION_NAME EQ relation_name AND
			REL.RDB$VIEW_BLR NOT MISSING*/
		{
                if (!isc_82)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_82, (short) sizeof(isc_83), (char*) isc_83);
		isc_vtov ((const char*) relation_name, (char*) isc_84.isc_85, 32);
		if (isc_82)
		   {
                   isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_82, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_84, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_82, (short) 1, (short) 12, &isc_86, (short) 0);
		   if (!isc_86.isc_88 || isc_status [1]) break;

			isqlGlob.printf("View Source:%s==== ======%s", NEWLINE, NEWLINE);
			if (!/*REL.RDB$VIEW_SOURCE.NULL*/
			     isc_86.isc_89)
				SHOW_print_metadata_text_blob (isqlGlob.Out, &/*REL.RDB$VIEW_SOURCE*/
									      isc_86.isc_87);
			isqlGlob.printf(NEWLINE);
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}
	}

	// Handle any referential or primary constraint on this table

	SCHAR collist[BUFFER_LENGTH512];

	// Static queries for obtaining referential constraints

	/*FOR RELC1 IN RDB$RELATION_CONSTRAINTS WITH
		RELC1.RDB$RELATION_NAME EQ relation_name
		SORTED BY RELC1.RDB$CONSTRAINT_TYPE, RELC1.RDB$CONSTRAINT_NAME*/
	{
        if (!isc_73)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_73, (short) sizeof(isc_74), (char*) isc_74);
	isc_vtov ((const char*) relation_name, (char*) isc_75.isc_76, 32);
	if (isc_73)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_73, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_75, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_73, (short) 1, (short) 78, &isc_77, (short) 0);
	   if (!isc_77.isc_81 || isc_status [1]) break;

		fb_utils::exact_name(/*RELC1.RDB$CONSTRAINT_NAME*/
				     isc_77.isc_79);
		fb_utils::exact_name(/*RELC1.RDB$INDEX_NAME*/
				     isc_77.isc_78);
		ISQL_get_index_segments (collist, sizeof(collist), /*RELC1.RDB$INDEX_NAME*/
								   isc_77.isc_78, false);
		bool isPK = false;
		bool isUK = false;

		if (!strncmp (/*RELC1.RDB$CONSTRAINT_TYPE*/
			      isc_77.isc_80, "PRIMARY", 7))
		{
			isPK = true;
			isqlGlob.printf("CONSTRAINT %s:%s", /*RELC1.RDB$CONSTRAINT_NAME*/
							    isc_77.isc_79, NEWLINE);
			isqlGlob.printf("  Primary key (%s)", collist);
		}
		else if (!strncmp (/*RELC1.RDB$CONSTRAINT_TYPE*/
				   isc_77.isc_80, "UNIQUE", 6))
		{
			isUK = true;
			isqlGlob.printf("CONSTRAINT %s:%s", /*RELC1.RDB$CONSTRAINT_NAME*/
							    isc_77.isc_79, NEWLINE);
			isqlGlob.printf("  Unique key (%s)", collist);
		}
		else if (!strncmp (/*RELC1.RDB$CONSTRAINT_TYPE*/
				   isc_77.isc_80, "FOREIGN", 7))
		{
			isqlGlob.printf("CONSTRAINT %s:%s", /*RELC1.RDB$CONSTRAINT_NAME*/
							    isc_77.isc_79, NEWLINE);
			isqlGlob.printf("  Foreign key (%s)", collist);

			/*FOR RELC2 IN RDB$RELATION_CONSTRAINTS CROSS
				REFC IN RDB$REF_CONSTRAINTS WITH
				RELC2.RDB$CONSTRAINT_NAME EQ REFC.RDB$CONST_NAME_UQ AND
				REFC.RDB$CONSTRAINT_NAME EQ RELC1.RDB$CONSTRAINT_NAME*/
			{
                        if (!isc_61)
                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_61, (short) sizeof(isc_62), (char*) isc_62);
			isc_vtov ((const char*) isc_77.isc_79, (char*) isc_63.isc_64, 32);
			if (isc_61)
			   {
                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_61, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_63, (short) 0);
			   }
			if (!isc_status [1]) {
			while (1)
			   {
                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_61, (short) 1, (short) 94, &isc_65, (short) 0);
			   if (!isc_65.isc_70 || isc_status [1]) break;

				ISQL_get_index_segments (collist, sizeof(collist), /*RELC2.RDB$INDEX_NAME*/
										   isc_65.isc_67, false);
				fb_utils::exact_name(/*RELC2.RDB$RELATION_NAME*/
						     isc_65.isc_66);

				isqlGlob.printf("    References %s (%s)", /*RELC2.RDB$RELATION_NAME*/
									  isc_65.isc_66, collist);

				if (!/*REFC.RDB$UPDATE_RULE.NULL*/
				     isc_65.isc_72)
				{
					ISQL_truncate_term (/*REFC.RDB$UPDATE_RULE*/
							    isc_65.isc_69, sizeof(/*REFC.RDB$UPDATE_RULE*/
	 isc_65.isc_69));
					ISQL_ri_action_print (/*REFC.RDB$UPDATE_RULE*/
							      isc_65.isc_69, " On Update", false);
				}

				if (!/*REFC.RDB$DELETE_RULE.NULL*/
				     isc_65.isc_71)
				{
					ISQL_truncate_term (/*REFC.RDB$DELETE_RULE*/
							    isc_65.isc_68, sizeof(/*REFC.RDB$DELETE_RULE*/
	 isc_65.isc_68));
					ISQL_ri_action_print (/*REFC.RDB$DELETE_RULE*/
							      isc_65.isc_68, " On Delete", false);
				}

				isqlGlob.printf(NEWLINE);

			/*END_FOR*/
			   }
			   };
			/*ON_ERROR*/
			if (isc_status [1])
			   {
				ISQL_errmsg (isc_status);
				return ps_ERR;
			/*END_ERROR;*/
			   }
			}
		}

		if (isPK || isUK) // Special handling for PRIMARY KEY and UNIQUE constraints.
		{
			/*FOR IDX IN RDB$INDICES
			WITH IDX.RDB$INDEX_NAME = RELC1.RDB$INDEX_NAME*/
			{
                        if (!isc_52)
                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_52, (short) sizeof(isc_53), (char*) isc_53);
			isc_vtov ((const char*) isc_77.isc_78, (char*) isc_54.isc_55, 32);
			if (isc_52)
			   {
                           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_52, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_54, (short) 0);
			   }
			if (!isc_status [1]) {
			while (1)
			   {
                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_52, (short) 1, (short) 38, &isc_56, (short) 0);
			   if (!isc_56.isc_58 || isc_status [1]) break;
				// Yes, the same RDB$... naming convention is used for both domains and indices.
				const bool explicit_index =
					(isPK && !fb_utils::implicit_pk(/*IDX.RDB$INDEX_NAME*/
									isc_56.isc_57) ||
					isUK && !fb_utils::implicit_domain(/*RELC1.RDB$INDEX_NAME*/
									   isc_77.isc_78)) &&
				    strcmp(/*RELC1.RDB$CONSTRAINT_NAME*/
					   isc_77.isc_79, /*RELC1.RDB$INDEX_NAME*/
  isc_77.isc_78);
				const bool descending_index = !/*IDX.RDB$INDEX_TYPE.NULL*/
							       isc_56.isc_59 && /*IDX.RDB$INDEX_TYPE*/
    isc_56.isc_60 == 1;
				if (explicit_index || descending_index)
				{
					isqlGlob.printf(" uses explicit %s index",
									descending_index ? "descending" : "ascending");
				}
				if (explicit_index)
					isqlGlob.printf(" %s", /*RELC1.RDB$INDEX_NAME*/
							       isc_77.isc_78);

				isqlGlob.prints(NEWLINE);
			/*END_FOR*/
			   }
			   };
			/*ON_ERROR*/
			if (isc_status [1])
			   {
				ISQL_errmsg (isc_status);
				return ps_ERR;
			/*END_ERROR*/
			   }
			}
		}

	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR*/
	   }
	}

	/*FOR R_C IN RDB$RELATION_CONSTRAINTS CROSS
		C_C IN RDB$CHECK_CONSTRAINTS
		WITH R_C.RDB$RELATION_NAME   EQ relation_name
		AND R_C.RDB$CONSTRAINT_TYPE EQ 'NOT NULL'
		AND R_C.RDB$CONSTRAINT_NAME EQ C_C.RDB$CONSTRAINT_NAME*/
	{
        if (!isc_44)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_44, (short) sizeof(isc_45), (char*) isc_45);
	isc_vtov ((const char*) relation_name, (char*) isc_46.isc_47, 32);
	if (isc_44)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_44, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_46, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_44, (short) 1, (short) 66, &isc_48, (short) 0);
	   if (!isc_48.isc_51 || isc_status [1]) break;

		if (!fb_utils::implicit_integrity(/*R_C.RDB$CONSTRAINT_NAME*/
						  isc_48.isc_50))
		{
			fb_utils::exact_name(/*C_C.RDB$TRIGGER_NAME*/
					     isc_48.isc_49);
			fb_utils::exact_name(/*R_C.RDB$CONSTRAINT_NAME*/
					     isc_48.isc_50);
			isqlGlob.printf("CONSTRAINT %s:%s", /*R_C.RDB$CONSTRAINT_NAME*/
							    isc_48.isc_50, NEWLINE);
			isqlGlob.printf("  Not Null Column (%s)%s", /*C_C.RDB$TRIGGER_NAME*/
								    isc_48.isc_49, NEWLINE);
		}
	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR;*/
	   }
	}

	// Do check constraints

	show_check(relation_name);

	// Do triggers

	show_trigger(relation_name, false, false);

	if (first)
		return (OBJECT_NOT_FOUND);
	return SKIP;
}


static processing_state show_trigger(const SCHAR* object, bool show_source, bool isTriggerName)
{
   struct isc_5_struct {
          ISC_QUAD isc_6;	/* RDB$TRIGGER_SOURCE */
          char  isc_7 [32];	/* RDB$RELATION_NAME */
          char  isc_8 [32];	/* RDB$TRIGGER_NAME */
          short isc_9;	/* isc_utility */
          short isc_10;	/* gds__null_flag */
          short isc_11;	/* RDB$TRIGGER_INACTIVE */
          short isc_12;	/* RDB$TRIGGER_TYPE */
          short isc_13;	/* RDB$TRIGGER_SEQUENCE */
          short isc_14;	/* gds__null_flag */
   } isc_5;
   struct isc_2_struct {
          char  isc_3 [32];	/* RDB$TRIGGER_NAME */
          char  isc_4 [32];	/* RDB$RELATION_NAME */
   } isc_2;
   struct isc_19_struct {
          short isc_20;	/* isc_utility */
          short isc_21;	/* gds__null_flag */
          short isc_22;	/* RDB$VALID_BLR */
   } isc_19;
   struct isc_17_struct {
          char  isc_18 [32];	/* RDB$TRIGGER_NAME */
   } isc_17;
   struct isc_25_struct {
          char  isc_26 [32];	/* RDB$RELATION_NAME */
          char  isc_27 [32];	/* RDB$TRIGGER_NAME */
          short isc_28;	/* isc_utility */
          short isc_29;	/* RDB$SYSTEM_FLAG */
   } isc_25;
   struct isc_34_struct {
          short isc_35;	/* isc_utility */
          short isc_36;	/* gds__null_flag */
          short isc_37;	/* RDB$VALID_BLR */
   } isc_34;
   struct isc_32_struct {
          char  isc_33 [32];	/* RDB$TRIGGER_NAME */
   } isc_32;
   struct isc_40_struct {
          char  isc_41 [32];	/* RDB$TRIGGER_NAME */
          short isc_42;	/* isc_utility */
          short isc_43;	/* RDB$SYSTEM_FLAG */
   } isc_40;
/**************************************
 *
 *	s h o w _ t r i g g e r
 *
 **************************************
 *
 * Functional description
 *	Show triggers in general or for the named object or trigger
 *
 **************************************/
	bool first = true;

	// Show all triggers
	if (!*object)
	{
		bool has_dbtrig = false;

		if (ENCODE_ODS(isqlGlob.major_ods, isqlGlob.minor_ods) >= ODS_11_1)
		{
			/*FOR TRG IN RDB$TRIGGERS
				WITH (TRG.RDB$SYSTEM_FLAG EQ 0 OR TRG.RDB$SYSTEM_FLAG MISSING) AND
					 TRG.RDB$RELATION_NAME MISSING
				SORTED BY TRG.RDB$TRIGGER_NAME*/
			{
                        if (!isc_38)
                           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_38, (short) sizeof(isc_39), (char*) isc_39);
			if (isc_38)
			   {
                           isc_start_request (isc_status, (FB_API_HANDLE*) &isc_38, (FB_API_HANDLE*) &gds_trans, (short) 0);
			   }
			if (!isc_status [1]) {
			while (1)
			   {
                           isc_receive (isc_status, (FB_API_HANDLE*) &isc_38, (short) 0, (short) 36, &isc_40, (short) 0);
			   if (!isc_40.isc_42 || isc_status [1]) break;

				if (!has_dbtrig)
				{
					isqlGlob.printf("Trigger name                     Invalid%s", NEWLINE);
					isqlGlob.printf("================================ =======%s", NEWLINE);
					has_dbtrig = true;
				}

				const char* invalid = "        ";

				/*FOR TRG2 IN RDB$TRIGGERS
					WITH TRG2.RDB$TRIGGER_NAME EQ TRG.RDB$TRIGGER_NAME*/
				{
                                if (!isc_30)
                                   isc_compile_request2 (NULL, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_30, (short) sizeof(isc_31), (char*) isc_31);
				isc_vtov ((const char*) isc_40.isc_41, (char*) isc_32.isc_33, 32);
                                isc_start_and_send (NULL, (FB_API_HANDLE*) &isc_30, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_32, (short) 0);
				while (1)
				   {
                                   isc_receive (NULL, (FB_API_HANDLE*) &isc_30, (short) 1, (short) 6, &isc_34, (short) 0);
				   if (!isc_34.isc_35) break;
					if (!(/*TRG2.RDB$VALID_BLR.NULL*/
					      isc_34.isc_36 || /*TRG2.RDB$VALID_BLR*/
    isc_34.isc_37))
						invalid = "    *   ";
				/*END_FOR*/
				   }
				}

				fb_utils::exact_name(/*TRG.RDB$TRIGGER_NAME*/
						     isc_40.isc_41);
				isqlGlob.printf("%-32s%s%s%s",
						 /*TRG.RDB$TRIGGER_NAME*/
						 isc_40.isc_41,
						 invalid,
						 (/*TRG.RDB$SYSTEM_FLAG*/
						  isc_40.isc_43 == 1 ? "(system)" : ""),	// never used
						 NEWLINE);
			/*END_FOR*/
			   }
			   };
			/*ON_ERROR*/
			if (isc_status [1])
			   {
				ISQL_errmsg(isc_status);
				return ps_ERR;
			/*END_ERROR;*/
			   }
			}
		}

		/*FOR TRG IN RDB$TRIGGERS CROSS REL IN RDB$RELATIONS
			//WITH (REL.RDB$SYSTEM_FLAG NE 1 OR REL.RDB$SYSTEM_FLAG MISSING) AND
			//NOT (ANY CHK IN RDB$CHECK_CONSTRAINTS WITH
			//	 TRG.RDB$TRIGGER_NAME EQ CHK.RDB$TRIGGER_NAME)
			WITH (TRG.RDB$SYSTEM_FLAG EQ 0 OR TRG.RDB$SYSTEM_FLAG MISSING) AND
			TRG.RDB$RELATION_NAME = REL.RDB$RELATION_NAME
			SORTED BY TRG.RDB$RELATION_NAME, TRG.RDB$TRIGGER_NAME*/
		{
                if (!isc_23)
                   isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_23, (short) sizeof(isc_24), (char*) isc_24);
		if (isc_23)
		   {
                   isc_start_request (isc_status, (FB_API_HANDLE*) &isc_23, (FB_API_HANDLE*) &gds_trans, (short) 0);
		   }
		if (!isc_status [1]) {
		while (1)
		   {
                   isc_receive (isc_status, (FB_API_HANDLE*) &isc_23, (short) 0, (short) 68, &isc_25, (short) 0);
		   if (!isc_25.isc_28 || isc_status [1]) break;

			if (first)
			{
				if (has_dbtrig)
					isqlGlob.printf("%s", NEWLINE);

				isqlGlob.printf(
						 "Table name                       Trigger name                     Invalid%s", NEWLINE);
				isqlGlob.printf(
						 "================================ ================================ =======%s", NEWLINE);
				first = false;
			}

			const char* invalid = "        ";

			if (ENCODE_ODS(isqlGlob.major_ods, isqlGlob.minor_ods) >= ODS_11_1)
			{
				/*FOR TRG2 IN RDB$TRIGGERS
					WITH TRG2.RDB$TRIGGER_NAME EQ TRG.RDB$TRIGGER_NAME*/
				{
                                if (!isc_15)
                                   isc_compile_request2 (NULL, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_15, (short) sizeof(isc_16), (char*) isc_16);
				isc_vtov ((const char*) isc_25.isc_27, (char*) isc_17.isc_18, 32);
                                isc_start_and_send (NULL, (FB_API_HANDLE*) &isc_15, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 32, &isc_17, (short) 0);
				while (1)
				   {
                                   isc_receive (NULL, (FB_API_HANDLE*) &isc_15, (short) 1, (short) 6, &isc_19, (short) 0);
				   if (!isc_19.isc_20) break;
					if (!(/*TRG2.RDB$VALID_BLR.NULL*/
					      isc_19.isc_21 || /*TRG2.RDB$VALID_BLR*/
    isc_19.isc_22))
						invalid = "    *   ";
				/*END_FOR*/
				   }
				}
			}

			fb_utils::exact_name(/*TRG.RDB$TRIGGER_NAME*/
					     isc_25.isc_27);
			fb_utils::exact_name(/*TRG.RDB$RELATION_NAME*/
					     isc_25.isc_26);
			isqlGlob.printf("%-32s %-32s%s%s%s",
					 /*TRG.RDB$RELATION_NAME*/
					 isc_25.isc_26,
					 /*TRG.RDB$TRIGGER_NAME*/
					 isc_25.isc_27,
					 invalid,
					 (/*TRG.RDB$SYSTEM_FLAG*/
					  isc_25.isc_29 == 1 ? "(system)" : ""),	// never used
					 NEWLINE);
		/*END_FOR*/
		   }
		   };
		/*ON_ERROR*/
		if (isc_status [1])
		   {
			ISQL_errmsg(isc_status);
			return ps_ERR;
		/*END_ERROR;*/
		   }
		}

		if (first && !has_dbtrig)
			return OBJECT_NOT_FOUND;

		return (SKIP);
	}

	// Show triggers for the named object
	// and avoid check constraints
	/*BASED_ON RDB$TRIGGERS.RDB$TRIGGER_NAME triggerName;*/
	char
	   triggerName[32];

	/*BASED_ON RDB$TRIGGERS.RDB$RELATION_NAME relationName;*/
	char
	   relationName[32];


	if (isTriggerName)
	{
		sprintf(triggerName, "%s", object);
		relationName[0] = '\0';
	}
	else
	{
		sprintf(relationName, "%s", object);
		triggerName[0] = '\0';
	}

	/*FOR TRG IN RDB$TRIGGERS WITH
		(TRG.RDB$RELATION_NAME EQ relationName OR
			TRG.RDB$TRIGGER_NAME EQ triggerName) AND
		(TRG.RDB$SYSTEM_FLAG EQ 0 OR TRG.RDB$SYSTEM_FLAG MISSING)
		SORTED BY TRG.RDB$RELATION_NAME, TRG.RDB$TRIGGER_TYPE,
		TRG.RDB$TRIGGER_SEQUENCE, TRG.RDB$TRIGGER_NAME*/
	{
        if (!isc_0)
           isc_compile_request2 (isc_status, (FB_API_HANDLE*) &DB, (FB_API_HANDLE*) &isc_0, (short) sizeof(isc_1), (char*) isc_1);
	isc_vtov ((const char*) triggerName, (char*) isc_2.isc_3, 32);
	isc_vtov ((const char*) relationName, (char*) isc_2.isc_4, 32);
	if (isc_0)
	   {
           isc_start_and_send (isc_status, (FB_API_HANDLE*) &isc_0, (FB_API_HANDLE*) &gds_trans, (short) 0, (short) 64, &isc_2, (short) 0);
	   }
	if (!isc_status [1]) {
	while (1)
	   {
           isc_receive (isc_status, (FB_API_HANDLE*) &isc_0, (short) 1, (short) 84, &isc_5, (short) 0);
	   if (!isc_5.isc_9 || isc_status [1]) break;

		//bool skip = false;
		// Skip triggers for check constraints
		//FOR FIRST 1 CHK IN RDB$CHECK_CONSTRAINTS WITH
		//	TRG.RDB$TRIGGER_NAME EQ CHK.RDB$TRIGGER_NAME
		//	skip = true;
		//END_FOR
		//ON_ERROR
		//	ISQL_errmsg (isc_status);
		//	return ps_ERR;
		//END_ERROR;

		//if (skip)
		//	continue;
		fb_utils::exact_name(/*TRG.RDB$TRIGGER_NAME*/
				     isc_5.isc_8);

		if (first)
		{
			if (!/*TRG.RDB$RELATION_NAME.NULL*/
			     isc_5.isc_14)
			{
				fb_utils::exact_name(/*TRG.RDB$RELATION_NAME*/
						     isc_5.isc_7);

				isqlGlob.printf("%sTriggers on Table %s:%s", NEWLINE, /*TRG.RDB$RELATION_NAME*/
										      isc_5.isc_7, NEWLINE);
			}

			first = false;
		}

		isqlGlob.printf("%s, Sequence: %d, Type: %s, %s%s",
				 /*TRG.RDB$TRIGGER_NAME*/
				 isc_5.isc_8,
				 /*TRG.RDB$TRIGGER_SEQUENCE*/
				 isc_5.isc_13,
				 trigger_action (/*TRG.RDB$TRIGGER_TYPE*/
						 isc_5.isc_12),
				 (/*TRG.RDB$TRIGGER_INACTIVE*/
				  isc_5.isc_11 ? "Inactive" : "Active"),
				 NEWLINE);

		if (show_source)
		{
			// Use print_blob to print the blob

			if (!/*TRG.RDB$TRIGGER_SOURCE.NULL*/
			     isc_5.isc_10)
				SHOW_print_metadata_text_blob (isqlGlob.Out, &/*TRG.RDB$TRIGGER_SOURCE*/
									      isc_5.isc_6);
			isqlGlob.printf("%s+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++%s", NEWLINE, NEWLINE);
		}

	/*END_FOR*/
	   }
	   };
	/*ON_ERROR*/
	if (isc_status [1])
	   {
		ISQL_errmsg(isc_status);
		return ps_ERR;
	/*END_ERROR;*/
	   }
	}
	if (first)
		return OBJECT_NOT_FOUND;
	return SKIP;
}


static processing_state show_users()
{
/**************************************
 *
 *	s h o w _ u s e r s
 *
 **************************************
 *
 * Functional description
 *	Show users logged in the database (not users defined for this database).
 *
 **************************************/

	const SCHAR user_items[] =
	{
		isc_info_user_names,
		isc_info_end
	};

	TEXT msg[MSG_LENGTH]; // When messages can be translated.

	Firebird::VaryStr<MAX_SQL_IDENTIFIER_SIZE * 4> my_user;
	XSQLDA osqlda; // XSQLDA comes with one XSQLVAR inside.
	memset(&osqlda, 0, XSQLDA_LENGTH(1));
	osqlda.version = SQLDA_VERSION1;
	osqlda.sqln = 1;
	osqlda.sqld = 1;
	XSQLVAR& ovar = osqlda.sqlvar[0];
	ovar.sqlind = 0;
	ovar.sqldata = reinterpret_cast<char*>(&my_user);
	ovar.sqltype = SQL_VARYING;
	ovar.sqllen = sizeof(my_user) - 3;
	const char* getuser = isqlGlob.major_ods < ODS_VERSION10 ?
	    "select user from rdb$database" : "select current_user from rdb$database";

/*
#ifdef TRUSTED_AUTH
	//if (Trusted_auth)
	{
		if (isqlGlob.major_ods > ODS_VERSION11 ||
			isqlGlob.major_ods == ODS_VERSION11 && isqlGlob.minor_ods > 1)
		{
			getuser = "select system_user from rdb$database";
		}
	}
#endif
*/

	if (isc_dsql_exec_immed2(isc_status, &DB, &gds_trans, 0,
							 getuser,
							 isqlGlob.SQL_dialect, NULL, &osqlda))
	{
		ISQL_errmsg(isc_status);
		return OBJECT_NOT_FOUND;
	}
	my_user.vary_string[my_user.vary_length] = 0; // Just for the debugger.

	UCHAR buffer[BUFFER_LENGTH512];
	ISC_STATUS_ARRAY status_vector;
	if (isc_database_info(status_vector, &DB,
							sizeof(user_items), user_items,
							sizeof(buffer), reinterpret_cast<SCHAR*>(buffer)))
	{
		ISQL_errmsg(status_vector);
		return ps_ERR;
	}

	bool newline = false;
	processing_state rc = OBJECT_NOT_FOUND;
	for (const UCHAR* data = buffer; *data != isc_info_end;)
	{
		const UCHAR item = *data++;
		const int length = gds__vax_integer(data, 2);
		data += 2;

		switch (item)
		{
		case isc_info_end:
			break;

		case isc_info_user_names:
			{
				if (rc == OBJECT_NOT_FOUND)
				{
					// First time in the loop, print title.
					ISQL_msg_get(USERS_IN_DB, msg);
					isqlGlob.printf("%s\n", msg);
					rc = SKIP; // We found at least one user.
				}

				int len = *data;
				fb_assert(len == length - 1);
				const UCHAR* uname = data + 1;
				// Let's mark all attachments with our same user with a # prefix.
				if (len == my_user.vary_length && !memcmp(my_user.vary_string, uname, len))
					isqlGlob.printf("# %-37.*s", len, uname);
				else
					isqlGlob.printf("  %-37.*s", len, uname);

				if (newline)
					isqlGlob.printf("\n");

				newline = !newline;
			}
			break;

		case isc_info_truncated:
			if (newline)
				isqlGlob.printf("\n");

			ISQL_msg_get(OUTPUT_TRUNCATED, msg);
			isqlGlob.printf("%s\n", msg);
			return rc; // If we got some items, we are (partially) successful.
		}

		data += length;
		if (data >= buffer + sizeof(buffer))
			break;
	}

	if (newline) // Last line was without newline.
		isqlGlob.printf("\n");

	return rc;
}

