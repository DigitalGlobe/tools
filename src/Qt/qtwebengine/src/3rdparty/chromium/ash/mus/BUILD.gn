# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/ui.gni")
import("//mojo/public/mojo_application.gni")
import("//mojo/public/mojo_application_manifest.gni")
import("//mojo/public/tools/bindings/mojom.gni")
import("//tools/grit/repack.gni")

source_set("lib") {
  sources = [
    "accelerator_registrar_impl.cc",
    "accelerator_registrar_impl.h",
    "bridge/mus_layout_manager_adapter.cc",
    "bridge/mus_layout_manager_adapter.h",
    "bridge/wm_lookup_mus.cc",
    "bridge/wm_lookup_mus.h",
    "bridge/wm_root_window_controller_mus.cc",
    "bridge/wm_root_window_controller_mus.h",
    "bridge/wm_shelf_mus.cc",
    "bridge/wm_shelf_mus.h",
    "bridge/wm_shell_mus.cc",
    "bridge/wm_shell_mus.h",
    "bridge/wm_window_mus.cc",
    "bridge/wm_window_mus.h",
    "container_ids.cc",
    "container_ids.h",
    "disconnected_app_handler.cc",
    "disconnected_app_handler.h",
    "drag_window_resizer.cc",
    "drag_window_resizer.h",
    "frame/caption_buttons/caption_button_types.h",
    "frame/caption_buttons/frame_caption_button.cc",
    "frame/caption_buttons/frame_caption_button.h",
    "frame/caption_buttons/frame_caption_button_container_view.cc",
    "frame/caption_buttons/frame_caption_button_container_view.h",
    "frame/default_header_painter.cc",
    "frame/default_header_painter.h",
    "frame/frame_border_hit_test_controller.cc",
    "frame/frame_border_hit_test_controller.h",
    "frame/header_painter.h",
    "frame/header_painter_util.cc",
    "frame/header_painter_util.h",
    "frame/move_event_handler.cc",
    "frame/move_event_handler.h",
    "frame/non_client_frame_view_mash.cc",
    "frame/non_client_frame_view_mash.h",
    "layout_manager.cc",
    "layout_manager.h",
    "non_client_frame_controller.cc",
    "non_client_frame_controller.h",
    "property_util.cc",
    "property_util.h",
    "root_window_controller.cc",
    "root_window_controller.h",
    "screenlock_layout.cc",
    "screenlock_layout.h",
    "shadow.cc",
    "shadow.h",
    "shadow_controller.cc",
    "shadow_controller.h",
    "shelf_layout_impl.cc",
    "shelf_layout_impl.h",
    "shelf_layout_manager.cc",
    "shelf_layout_manager.h",
    "shelf_layout_manager_delegate.h",
    "status_layout_manager.cc",
    "status_layout_manager.h",
    "user_window_controller_impl.cc",
    "user_window_controller_impl.h",
    "window_manager.cc",
    "window_manager.h",
    "window_manager_application.cc",
    "window_manager_application.h",
    "window_manager_observer.h",
  ]

  deps = [
    "//components/user_manager",
  ]

  public_deps = [
    "//ash",
    "//ash/mus/resources",
    "//ash/public/interfaces",
    "//base",
    "//components/mus/common:mus_common",
    "//components/mus/public/cpp",
    "//components/mus/public/interfaces",
    "//mash/session/public/interfaces",
    "//mojo/common:common_base",
    "//services/shell/public/cpp",
    "//services/tracing/public/cpp",
    "//skia",
    "//ui/aura",
    "//ui/display/mojo",
    "//ui/events",
    "//ui/gfx",
    "//ui/gfx/geometry",
    "//ui/gfx/geometry/mojo",
    "//ui/resources",
    "//ui/strings",
    "//ui/views",
    "//ui/views/mus:for_mojo_application",
  ]
}

mojo_native_application("mus") {
  output_name = "ash"

  sources = [
    "main.cc",
  ]

  deps = [
    ":lib",
    ":resources",
    "//services/shell/public/cpp",
  ]

  # TODO(beng): This target relies on //mash/session, but there is a cycle so we
  #             can't state that dependency here.
  data_deps = [
    ":manifest",
    "//components/mus",
  ]

  resources = [ "$root_out_dir/ash_mus_resources.pak" ]
}

mojo_application_manifest("manifest") {
  application_name = "ash"
  source = "manifest.json"
}

repack("resources") {
  sources = [
    "$root_gen_dir/ash/mus/resources/ash_mus_resources_100_percent.pak",
    "$root_gen_dir/ash/resources/ash_resources_100_percent.pak",
    "$root_gen_dir/ui/resources/ui_resources_100_percent.pak",
    "$root_gen_dir/ui/strings/app_locale_settings_en-US.pak",
    "$root_gen_dir/ui/strings/ui_strings_en-US.pak",
    "$root_gen_dir/ui/views/resources/views_resources_100_percent.pak",
  ]
  output = "$root_out_dir/ash_mus_resources.pak"
  deps = [
    "//ash/mus/resources",
    "//ash/resources",
    "//ui/resources",
    "//ui/strings",
    "//ui/views/mus:resources",
    "//ui/views/resources",
  ]
}

source_set("unittests") {
  testonly = true

  sources = [
    "accelerator_registrar_unittest.cc",
    "app_launch_unittest.cc",
    "layout_manager_unittest.cc",
    "test/wm_test_base.cc",
    "test/wm_test_base.h",
    "test/wm_test_helper.cc",
    "test/wm_test_helper.h",
    "test/wm_test_screen.cc",
    "test/wm_test_screen.h",
    "window_manager_unittest.cc",
    "wm/mru_window_tracker_unittest.cc",
    "workspace/workspace_layout_manager_unittest.cc",
  ]

  deps = [
    ":lib",
    ":resources",
    "//ash",
    "//ash/public/interfaces",
    "//base",
    "//base/test:test_config",
    "//components/mus/common:mus_common",
    "//components/mus/public/cpp",
    "//components/mus/public/cpp/tests:test_support",
    "//components/mus/public/cpp/tests:unittest_support",
    "//components/mus/public/interfaces",
    "//mojo/public/cpp/system",
    "//services/shell/public/cpp:shell_test_support",
    "//skia",
    "//testing/gtest",
    "//ui/aura",
    "//ui/base",
    "//ui/display",
    "//ui/events",
    "//ui/gfx:test_support",
    "//ui/gfx/geometry",
    "//ui/gfx/geometry/mojo",
    "//ui/views/mus",
  ]

  data_deps = [
    ":mus",
    "//mash/quick_launch",
  ]
}
