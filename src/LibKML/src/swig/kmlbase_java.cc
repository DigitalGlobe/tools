/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "kml/base/attributes.h"
#include "kml/base/color32.h"
#include "kml/base/date_time.h"
#include "kml/base/vec3.h"
#include "kml/base/version.h"
#include "kml/base/xml_file.h"


#include <inttypes.h>


#include <stdint.h>		// Use the C99 official header


#include <string>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_imaxdiv_1t_1quot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->quot = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_imaxdiv_1t_1quot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  result = (long long) ((arg1)->quot);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_imaxdiv_1t_1rem_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->rem = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_imaxdiv_1t_1rem_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  result = (long long) ((arg1)->rem);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_new_1imaxdiv_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imaxdiv_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imaxdiv_t *)new imaxdiv_t();
  *(imaxdiv_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_delete_1imaxdiv_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imaxdiv_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_imaxabs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  intmax_t arg1 ;
  intmax_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (intmax_t)jarg1; 
  result = (intmax_t)imaxabs(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_imaxdiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  intmax_t arg1 ;
  intmax_t arg2 ;
  imaxdiv_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (intmax_t)jarg1; 
  arg2 = (intmax_t)jarg2; 
  result = imaxdiv(arg1,arg2);
  *(imaxdiv_t **)&jresult = new imaxdiv_t((const imaxdiv_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_strtoimax(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  intmax_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  result = (intmax_t)strtoimax((char const *)arg1,arg2,arg3);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_googlecode_libkml_kmlbaseJNI_strtoumax(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jobject jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  uintmax_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  result = (uintmax_t)strtoumax((char const *)arg1,arg2,arg3);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Attributes_1FindValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  kmlbase::Attributes *arg1 = (kmlbase::Attributes *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = (std::string *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Attributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3; 
  result = (bool)((kmlbase::Attributes const *)arg1)->FindValue((std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Attributes_1FindKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  kmlbase::Attributes *arg1 = (kmlbase::Attributes *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = (std::string *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Attributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3; 
  result = (bool)((kmlbase::Attributes const *)arg1)->FindKey((std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Attributes_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmlbase::Attributes *arg1 = (kmlbase::Attributes *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Attributes **)&jarg1; 
  result = ((kmlbase::Attributes const *)arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Attributes_1SetString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  kmlbase::Attributes *arg1 = (kmlbase::Attributes *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Attributes **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->SetString((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_new_1Attributes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kmlbase::Attributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kmlbase::Attributes *)new kmlbase::Attributes();
  *(kmlbase::Attributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_delete_1Attributes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmlbase::Attributes *arg1 = (kmlbase::Attributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kmlbase::Attributes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_new_1Color32_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kmlbase::Color32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kmlbase::Color32 *)new kmlbase::Color32();
  *(kmlbase::Color32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_new_1Color32_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  kmlbase::Color32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  result = (kmlbase::Color32 *)new kmlbase::Color32(arg1);
  *(kmlbase::Color32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_new_1Color32_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jshort jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  kmlbase::Color32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (kmlbase::Color32 *)new kmlbase::Color32(arg1,arg2,arg3,arg4);
  *(kmlbase::Color32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_new_1Color32_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  kmlbase::Color32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (kmlbase::Color32 *)new kmlbase::Color32((std::string const &)*arg1);
  *(kmlbase::Color32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1get_1red(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  result = (uint32_t)((kmlbase::Color32 const *)arg1)->get_red();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1set_1red(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->set_red(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1get_1green(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  result = (uint32_t)((kmlbase::Color32 const *)arg1)->get_green();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1set_1green(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->set_green(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1get_1blue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  result = (uint32_t)((kmlbase::Color32 const *)arg1)->get_blue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1set_1blue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->set_blue(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1get_1alpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  result = (uint32_t)((kmlbase::Color32 const *)arg1)->get_alpha();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1set_1alpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->set_alpha(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1get_1color_1abgr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  result = (uint32_t)((kmlbase::Color32 const *)arg1)->get_color_abgr();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1get_1color_1argb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  result = (uint32_t)((kmlbase::Color32 const *)arg1)->get_color_argb();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1to_1string_1abgr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  result = ((kmlbase::Color32 const *)arg1)->to_string_abgr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1to_1string_1argb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  result = ((kmlbase::Color32 const *)arg1)->to_string_argb();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1set_1color_1abgr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->set_color_abgr(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1set_1color_1abgr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_color_abgr((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1set_1color_1abgr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3, jshort jarg4, jshort jarg5) {
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  arg5 = (unsigned char)jarg5; 
  (arg1)->set_color_abgr(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Color32_1set_1color_1argb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->set_color_argb(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_delete_1Color32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmlbase::Color32 *arg1 = (kmlbase::Color32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kmlbase::Color32 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_DateTime_1Create(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  kmlbase::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (kmlbase::DateTime *)kmlbase::DateTime::Create((std::string const &)*arg1);
  *(kmlbase::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmlbaseJNI_DateTime_1ToTimeT(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (time_t)kmlbase::DateTime::ToTimeT((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmlbaseJNI_DateTime_1GetTimeT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmlbase::DateTime *arg1 = (kmlbase::DateTime *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::DateTime **)&jarg1; 
  result = (time_t)(arg1)->GetTimeT();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmlbaseJNI_DateTime_1GetXsdTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmlbase::DateTime *arg1 = (kmlbase::DateTime *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::DateTime **)&jarg1; 
  result = ((kmlbase::DateTime const *)arg1)->GetXsdTime();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmlbaseJNI_DateTime_1GetXsdDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmlbase::DateTime *arg1 = (kmlbase::DateTime *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::DateTime **)&jarg1; 
  result = ((kmlbase::DateTime const *)arg1)->GetXsdDate();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmlbaseJNI_DateTime_1GetXsdDateTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmlbase::DateTime *arg1 = (kmlbase::DateTime *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::DateTime **)&jarg1; 
  result = ((kmlbase::DateTime const *)arg1)->GetXsdDateTime();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_delete_1DateTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmlbase::DateTime *arg1 = (kmlbase::DateTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kmlbase::DateTime **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_new_1Vec3_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  kmlbase::Vec3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (kmlbase::Vec3 *)new kmlbase::Vec3(arg1,arg2);
  *(kmlbase::Vec3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmlbaseJNI_new_1Vec3_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  kmlbase::Vec3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (kmlbase::Vec3 *)new kmlbase::Vec3(arg1,arg2,arg3);
  *(kmlbase::Vec3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Vec3_1get_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmlbase::Vec3 *arg1 = (kmlbase::Vec3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Vec3 **)&jarg1; 
  result = (double)((kmlbase::Vec3 const *)arg1)->get_longitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Vec3_1get_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmlbase::Vec3 *arg1 = (kmlbase::Vec3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Vec3 **)&jarg1; 
  result = (double)((kmlbase::Vec3 const *)arg1)->get_latitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Vec3_1has_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmlbase::Vec3 *arg1 = (kmlbase::Vec3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Vec3 **)&jarg1; 
  result = (bool)((kmlbase::Vec3 const *)arg1)->has_altitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Vec3_1get_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmlbase::Vec3 *arg1 = (kmlbase::Vec3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::Vec3 **)&jarg1; 
  result = (double)((kmlbase::Vec3 const *)arg1)->get_altitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_delete_1Vec3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmlbase::Vec3 *arg1 = (kmlbase::Vec3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kmlbase::Vec3 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmlbaseJNI_Version_1GetString(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = kmlbase::Version::GetString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_delete_1Version(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmlbase::Version *arg1 = (kmlbase::Version *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kmlbase::Version **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmlbaseJNI_XmlFile_1get_1url(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmlbase::XmlFile *arg1 = (kmlbase::XmlFile *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlbase::XmlFile **)&jarg1; 
  result = (std::string *) &((kmlbase::XmlFile const *)arg1)->get_url();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmlbaseJNI_delete_1XmlFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmlbase::XmlFile *arg1 = (kmlbase::XmlFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kmlbase::XmlFile **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

