/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "kml/dom.h"

SWIGINTERN boost::intrusive_ptr< kmlbase::Referent > kmlbase_XmlElement_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmlbase::XmlElement > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmlbase::XmlElement > kmldom_Element_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Element > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_Coordinates_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Coordinates > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_Vec2_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Vec2 > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_Object_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Object > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_SubStyle_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::SubStyle > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::SubStyle > kmldom_ColorStyle_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::ColorStyle > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_SnippetCommon_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::SnippetCommon > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::SnippetCommon > kmldom_Snippet_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Snippet > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::SnippetCommon > kmldom_LinkSnippet_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::LinkSnippet > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_AbstractView_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::AbstractView > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_TimePrimitive_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::TimePrimitive > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_StyleSelector_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::StyleSelector > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_AbstractLatLonBox_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::AbstractLatLonBox > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::AbstractLatLonBox > kmldom_LatLonAltBox_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::LatLonAltBox > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_Lod_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Lod > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_Region_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Region > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_ExtendedData_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::ExtendedData > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_Feature_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Feature > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Feature > kmldom_Container_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Container > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_Geometry_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Geometry > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_BasicLink_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::BasicLink > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::BasicLink > kmldom_Icon_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Icon > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::BasicLink > kmldom_IconStyleIcon_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::IconStyleIcon > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Feature > kmldom_Overlay_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Overlay > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::SubStyle > kmldom_BalloonStyle_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::BalloonStyle > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::AbstractView > kmldom_Camera_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Camera > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_UpdateOperation_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::UpdateOperation > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::UpdateOperation > kmldom_Change_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Change > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::UpdateOperation > kmldom_Create_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Create > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_Data_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Data > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::UpdateOperation > kmldom_Delete_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Delete > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_SimpleField_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::SimpleField > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_Schema_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Schema > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Container > kmldom_Document_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Document > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Container > kmldom_Folder_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Folder > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::AbstractLatLonBox > kmldom_LatLonBox_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::LatLonBox > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_GxLatLonQuad_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::GxLatLonQuad > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Overlay > kmldom_GroundOverlay_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::GroundOverlay > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Vec2 > kmldom_HotSpot_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::HotSpot > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::ColorStyle > kmldom_IconStyle_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::IconStyle > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_ImagePyramid_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::ImagePyramid > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_ItemIcon_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::ItemIcon > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::ColorStyle > kmldom_LabelStyle_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::LabelStyle > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Geometry > kmldom_LineString_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::LineString > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::ColorStyle > kmldom_LineStyle_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::LineStyle > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Geometry > kmldom_LinearRing_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::LinearRing > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::BasicLink > kmldom_Link_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Link > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::SubStyle > kmldom_ListStyle_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::ListStyle > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_Location_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Location > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::AbstractView > kmldom_LookAt_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::LookAt > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_Orientation_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Orientation > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_Scale_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Scale > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_Alias_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Alias > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_ResourceMap_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::ResourceMap > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Geometry > kmldom_Model_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Model > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Geometry > kmldom_MultiGeometry_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::MultiGeometry > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Feature > kmldom_NetworkLink_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::NetworkLink > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_Update_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Update > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_NetworkLinkControl_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::NetworkLinkControl > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_Pair_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Pair > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_ViewVolume_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::ViewVolume > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Geometry > kmldom_Point_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Point > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Overlay > kmldom_PhotoOverlay_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::PhotoOverlay > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Feature > kmldom_Placemark_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Placemark > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::ColorStyle > kmldom_PolyStyle_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::PolyStyle > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_OuterBoundaryIs_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::OuterBoundaryIs > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_InnerBoundaryIs_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::InnerBoundaryIs > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Geometry > kmldom_Polygon_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Polygon > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_SimpleData_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::SimpleData > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_SchemaData_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::SchemaData > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Vec2 > kmldom_OverlayXY_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::OverlayXY > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Vec2 > kmldom_ScreenXY_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::ScreenXY > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Vec2 > kmldom_RotationXY_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::RotationXY > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Vec2 > kmldom_Size_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Size > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Overlay > kmldom_ScreenOverlay_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::ScreenOverlay > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::StyleSelector > kmldom_Style_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Style > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::StyleSelector > kmldom_StyleMap_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::StyleMap > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::TimePrimitive > kmldom_TimeSpan_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::TimeSpan > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::TimeSpan > kmldom_GxTimeSpan_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::GxTimeSpan > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::TimePrimitive > kmldom_TimeStamp_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::TimeStamp > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::TimeStamp > kmldom_GxTimeStamp_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::GxTimeStamp > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_Kml_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::Kml > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_AtomAuthor_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::AtomAuthor > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Element > kmldom_AtomLink_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::AtomLink > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_GxTourPrimitive_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::GxTourPrimitive > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Object > kmldom_GxPlaylist_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::GxPlaylist > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::Feature > kmldom_GxTour_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::GxTour > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::GxTourPrimitive > kmldom_GxAnimatedUpdate_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::GxAnimatedUpdate > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::GxTourPrimitive > kmldom_GxFlyTo_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::GxFlyTo > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::GxTourPrimitive > kmldom_GxWait_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::GxWait > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::GxTourPrimitive > kmldom_GxSoundCue_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::GxSoundCue > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }
SWIGINTERN boost::intrusive_ptr< kmldom::GxTourPrimitive > kmldom_GxTourControl_SWIGSharedPtrUpcast(boost::intrusive_ptr< kmldom::GxTourControl > swigSharedPtrUpcast){
    return swigSharedPtrUpcast;
  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_ALTITUDEMODE_1CLAMPTOGROUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  kmldom::AltitudeModeEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::AltitudeModeEnum)kmldom::ALTITUDEMODE_CLAMPTOGROUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_COLORMODE_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  kmldom::ColorModeEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::ColorModeEnum)kmldom::COLORMODE_NORMAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_DISPLAYMODE_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  kmldom::DisplayModeEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::DisplayModeEnum)kmldom::DISPLAYMODE_DEFAULT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_GRIDORIGIN_1LOWERLEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  kmldom::GridOriginEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::GridOriginEnum)kmldom::GRIDORIGIN_LOWERLEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_ITEMICONSTATE_1OPEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  kmldom::ItemIconStateEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::ItemIconStateEnum)kmldom::ITEMICONSTATE_OPEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_LISTITEMTYPE_1CHECK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  kmldom::ListItemTypeEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::ListItemTypeEnum)kmldom::LISTITEMTYPE_CHECK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_REFRESHMODE_1ONCHANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  kmldom::RefreshModeEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::RefreshModeEnum)kmldom::REFRESHMODE_ONCHANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_SHAPE_1RECTANGLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  kmldom::ShapeEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::ShapeEnum)kmldom::SHAPE_RECTANGLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_STYLESTATE_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  kmldom::StyleStateEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::StyleStateEnum)kmldom::STYLESTATE_NORMAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_UNITS_1FRACTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  kmldom::UnitsEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::UnitsEnum)kmldom::UNITS_FRACTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_VIEWREFRESHMODE_1NEVER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  kmldom::ViewRefreshModeEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::ViewRefreshModeEnum)kmldom::VIEWREFRESHMODE_NEVER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_GX_1ALTITUDEMODE_1CLAMPTOSEAFLOOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  kmldom::GxAltitudeModeEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::GxAltitudeModeEnum)kmldom::GX_ALTITUDEMODE_CLAMPTOSEAFLOOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_GX_1FLYTOMODE_1BOUNCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  kmldom::GxFlyToModeEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::GxFlyToModeEnum)kmldom::GX_FLYTOMODE_BOUNCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_GX_1PLAYMODE_1PAUSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  kmldom::GxPlayModeEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::GxPlayModeEnum)kmldom::GX_PLAYMODE_PAUSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Referent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmlbase::Referent *arg1 = (kmlbase::Referent *) 0 ;
  boost::intrusive_ptr< kmlbase::Referent > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmlbase::Referent > **)&jarg1;
  arg1 = (kmlbase::Referent *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_XmlElement_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmlbase::XmlElement > arg1 ;
  boost::intrusive_ptr< kmlbase::XmlElement > *argp1 ;
  boost::intrusive_ptr< kmlbase::Referent > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmlbase::XmlElement > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmlbase_XmlElement_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmlbase::Referent > **)&jresult = result ? new boost::intrusive_ptr< kmlbase::Referent >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1XmlElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmlbase::XmlElement *arg1 = (kmlbase::XmlElement *) 0 ;
  boost::intrusive_ptr< kmlbase::XmlElement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmlbase::XmlElement > **)&jarg1;
  arg1 = (kmlbase::XmlElement *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Element_1Type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Element *arg1 = (kmldom::Element *) 0 ;
  boost::intrusive_ptr< kmldom::Element > *smartarg1 = 0 ;
  kmldom::KmlDomType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Element > **)&jarg1;
  arg1 = (kmldom::Element *)(smartarg1 ? smartarg1->get() : 0); 
  result = (kmldom::KmlDomType)(arg1)->Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Element_1IsA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  kmldom::Element *arg1 = (kmldom::Element *) 0 ;
  kmldom::KmlDomType arg2 ;
  boost::intrusive_ptr< kmldom::Element > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Element > **)&jarg1;
  arg1 = (kmldom::Element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (kmldom::KmlDomType)jarg2; 
  result = (bool)(arg1)->IsA(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Element_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Element > arg1 ;
  boost::intrusive_ptr< kmldom::Element > *argp1 ;
  boost::intrusive_ptr< kmlbase::XmlElement > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Element > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Element_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmlbase::XmlElement > **)&jresult = result ? new boost::intrusive_ptr< kmlbase::XmlElement >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Element(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Element *arg1 = (kmldom::Element *) 0 ;
  boost::intrusive_ptr< kmldom::Element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Element > **)&jarg1;
  arg1 = (kmldom::Element *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Coordinates_1add_1latlng(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  kmldom::Coordinates *arg1 = (kmldom::Coordinates *) 0 ;
  double arg2 ;
  double arg3 ;
  boost::intrusive_ptr< kmldom::Coordinates > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Coordinates > **)&jarg1;
  arg1 = (kmldom::Coordinates *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->add_latlng(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Coordinates_1add_1latlngalt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  kmldom::Coordinates *arg1 = (kmldom::Coordinates *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  boost::intrusive_ptr< kmldom::Coordinates > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Coordinates > **)&jarg1;
  arg1 = (kmldom::Coordinates *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->add_latlngalt(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Coordinates_1get_1coordinates_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Coordinates *arg1 = (kmldom::Coordinates *) 0 ;
  boost::intrusive_ptr< kmldom::Coordinates > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Coordinates > **)&jarg1;
  arg1 = (kmldom::Coordinates *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_coordinates_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Coordinates_1get_1coordinates_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::Coordinates *arg1 = (kmldom::Coordinates *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::Coordinates > *smartarg1 = 0 ;
  SwigValueWrapper< kmlbase::Vec3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Coordinates > **)&jarg1;
  arg1 = (kmldom::Coordinates *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_coordinates_array_at(arg2);
  *(kmlbase::Vec3 **)&jresult = new kmlbase::Vec3((const kmlbase::Vec3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Coordinates_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Coordinates > arg1 ;
  boost::intrusive_ptr< kmldom::Coordinates > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Coordinates > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Coordinates_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Coordinates *arg1 = (kmldom::Coordinates *) 0 ;
  boost::intrusive_ptr< kmldom::Coordinates > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Coordinates > **)&jarg1;
  arg1 = (kmldom::Coordinates *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1get_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1set_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_x(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1has_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_x();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1clear_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_x();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1get_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1set_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_y(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1has_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_y();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1clear_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_y();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1get_1xunits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_xunits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1set_1xunits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_xunits(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1has_1xunits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_xunits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1clear_1xunits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_xunits();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1get_1yunits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_yunits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1set_1yunits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_yunits(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1has_1yunits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_yunits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1clear_1yunits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_yunits();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Vec2_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Vec2 > arg1 ;
  boost::intrusive_ptr< kmldom::Vec2 > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Vec2 > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Vec2_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Vec2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Vec2 *arg1 = (kmldom::Vec2 *) 0 ;
  boost::intrusive_ptr< kmldom::Vec2 > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Vec2 > **)&jarg1;
  arg1 = (kmldom::Vec2 *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Object_1get_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Object *arg1 = (kmldom::Object *) 0 ;
  boost::intrusive_ptr< kmldom::Object > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Object > **)&jarg1;
  arg1 = (kmldom::Object *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_id();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Object_1set_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Object *arg1 = (kmldom::Object *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Object > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Object > **)&jarg1;
  arg1 = (kmldom::Object *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_id((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Object_1has_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Object *arg1 = (kmldom::Object *) 0 ;
  boost::intrusive_ptr< kmldom::Object > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Object > **)&jarg1;
  arg1 = (kmldom::Object *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_id();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Object_1clear_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Object *arg1 = (kmldom::Object *) 0 ;
  boost::intrusive_ptr< kmldom::Object > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Object > **)&jarg1;
  arg1 = (kmldom::Object *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_id();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Object_1get_1targetid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Object *arg1 = (kmldom::Object *) 0 ;
  boost::intrusive_ptr< kmldom::Object > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Object > **)&jarg1;
  arg1 = (kmldom::Object *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_targetid();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Object_1set_1targetid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Object *arg1 = (kmldom::Object *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Object > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Object > **)&jarg1;
  arg1 = (kmldom::Object *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_targetid((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Object_1has_1targetid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Object *arg1 = (kmldom::Object *) 0 ;
  boost::intrusive_ptr< kmldom::Object > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Object > **)&jarg1;
  arg1 = (kmldom::Object *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_targetid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Object_1clear_1targetid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Object *arg1 = (kmldom::Object *) 0 ;
  boost::intrusive_ptr< kmldom::Object > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Object > **)&jarg1;
  arg1 = (kmldom::Object *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_targetid();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Object_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Object > arg1 ;
  boost::intrusive_ptr< kmldom::Object > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Object > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Object_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Object(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Object *arg1 = (kmldom::Object *) 0 ;
  boost::intrusive_ptr< kmldom::Object > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Object > **)&jarg1;
  arg1 = (kmldom::Object *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SubStyle_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::SubStyle > arg1 ;
  boost::intrusive_ptr< kmldom::SubStyle > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::SubStyle > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_SubStyle_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1SubStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::SubStyle *arg1 = (kmldom::SubStyle *) 0 ;
  boost::intrusive_ptr< kmldom::SubStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SubStyle > **)&jarg1;
  arg1 = (kmldom::SubStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ColorStyle_1get_1color(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ColorStyle *arg1 = (kmldom::ColorStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ColorStyle > *smartarg1 = 0 ;
  kmlbase::Color32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ColorStyle > **)&jarg1;
  arg1 = (kmldom::ColorStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (kmlbase::Color32 *) &(arg1)->get_color();
  *(kmlbase::Color32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ColorStyle_1set_1color(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::ColorStyle *arg1 = (kmldom::ColorStyle *) 0 ;
  kmlbase::Color32 *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::ColorStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ColorStyle > **)&jarg1;
  arg1 = (kmldom::ColorStyle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(kmlbase::Color32 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kmlbase::Color32 const & reference is null");
    return ;
  } 
  (arg1)->set_color((kmlbase::Color32 const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ColorStyle_1has_1color(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ColorStyle *arg1 = (kmldom::ColorStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ColorStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ColorStyle > **)&jarg1;
  arg1 = (kmldom::ColorStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_color();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ColorStyle_1clear_1color(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ColorStyle *arg1 = (kmldom::ColorStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ColorStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ColorStyle > **)&jarg1;
  arg1 = (kmldom::ColorStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_color();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_ColorStyle_1get_1colormode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::ColorStyle *arg1 = (kmldom::ColorStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ColorStyle > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ColorStyle > **)&jarg1;
  arg1 = (kmldom::ColorStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_colormode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ColorStyle_1set_1colormode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::ColorStyle *arg1 = (kmldom::ColorStyle *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::ColorStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ColorStyle > **)&jarg1;
  arg1 = (kmldom::ColorStyle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_colormode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ColorStyle_1has_1colormode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ColorStyle *arg1 = (kmldom::ColorStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ColorStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ColorStyle > **)&jarg1;
  arg1 = (kmldom::ColorStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_colormode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ColorStyle_1clear_1colormode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ColorStyle *arg1 = (kmldom::ColorStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ColorStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ColorStyle > **)&jarg1;
  arg1 = (kmldom::ColorStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_colormode();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ColorStyle_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::ColorStyle > arg1 ;
  boost::intrusive_ptr< kmldom::ColorStyle > *argp1 ;
  boost::intrusive_ptr< kmldom::SubStyle > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::ColorStyle > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_ColorStyle_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::SubStyle > **)&jresult = result ? new boost::intrusive_ptr< kmldom::SubStyle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1ColorStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::ColorStyle *arg1 = (kmldom::ColorStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ColorStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ColorStyle > **)&jarg1;
  arg1 = (kmldom::ColorStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_SnippetCommon_1get_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::SnippetCommon *arg1 = (kmldom::SnippetCommon *) 0 ;
  boost::intrusive_ptr< kmldom::SnippetCommon > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SnippetCommon > **)&jarg1;
  arg1 = (kmldom::SnippetCommon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_text();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SnippetCommon_1set_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::SnippetCommon *arg1 = (kmldom::SnippetCommon *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::SnippetCommon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SnippetCommon > **)&jarg1;
  arg1 = (kmldom::SnippetCommon *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_text((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_SnippetCommon_1has_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::SnippetCommon *arg1 = (kmldom::SnippetCommon *) 0 ;
  boost::intrusive_ptr< kmldom::SnippetCommon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SnippetCommon > **)&jarg1;
  arg1 = (kmldom::SnippetCommon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_text();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SnippetCommon_1clear_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::SnippetCommon *arg1 = (kmldom::SnippetCommon *) 0 ;
  boost::intrusive_ptr< kmldom::SnippetCommon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SnippetCommon > **)&jarg1;
  arg1 = (kmldom::SnippetCommon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_text();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_SnippetCommon_1get_1maxlines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::SnippetCommon *arg1 = (kmldom::SnippetCommon *) 0 ;
  boost::intrusive_ptr< kmldom::SnippetCommon > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SnippetCommon > **)&jarg1;
  arg1 = (kmldom::SnippetCommon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_maxlines();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SnippetCommon_1set_1maxlines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::SnippetCommon *arg1 = (kmldom::SnippetCommon *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::SnippetCommon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SnippetCommon > **)&jarg1;
  arg1 = (kmldom::SnippetCommon *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_maxlines(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_SnippetCommon_1has_1maxlines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::SnippetCommon *arg1 = (kmldom::SnippetCommon *) 0 ;
  boost::intrusive_ptr< kmldom::SnippetCommon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SnippetCommon > **)&jarg1;
  arg1 = (kmldom::SnippetCommon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_maxlines();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SnippetCommon_1clear_1maxlines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::SnippetCommon *arg1 = (kmldom::SnippetCommon *) 0 ;
  boost::intrusive_ptr< kmldom::SnippetCommon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SnippetCommon > **)&jarg1;
  arg1 = (kmldom::SnippetCommon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_maxlines();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SnippetCommon_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::SnippetCommon > arg1 ;
  boost::intrusive_ptr< kmldom::SnippetCommon > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::SnippetCommon > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_SnippetCommon_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1SnippetCommon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::SnippetCommon *arg1 = (kmldom::SnippetCommon *) 0 ;
  boost::intrusive_ptr< kmldom::SnippetCommon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SnippetCommon > **)&jarg1;
  arg1 = (kmldom::SnippetCommon *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Snippet_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Snippet > arg1 ;
  boost::intrusive_ptr< kmldom::Snippet > *argp1 ;
  boost::intrusive_ptr< kmldom::SnippetCommon > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Snippet > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Snippet_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::SnippetCommon > **)&jresult = result ? new boost::intrusive_ptr< kmldom::SnippetCommon >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Snippet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Snippet *arg1 = (kmldom::Snippet *) 0 ;
  boost::intrusive_ptr< kmldom::Snippet > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Snippet > **)&jarg1;
  arg1 = (kmldom::Snippet *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_LinkSnippet_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::LinkSnippet > arg1 ;
  boost::intrusive_ptr< kmldom::LinkSnippet > *argp1 ;
  boost::intrusive_ptr< kmldom::SnippetCommon > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::LinkSnippet > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_LinkSnippet_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::SnippetCommon > **)&jresult = result ? new boost::intrusive_ptr< kmldom::SnippetCommon >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1LinkSnippet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::LinkSnippet *arg1 = (kmldom::LinkSnippet *) 0 ;
  boost::intrusive_ptr< kmldom::LinkSnippet > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinkSnippet > **)&jarg1;
  arg1 = (kmldom::LinkSnippet *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractView_1get_1gx_1timeprimitive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::AbstractView *arg1 = (kmldom::AbstractView *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractView > *smartarg1 = 0 ;
  kmldom::TimePrimitivePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractView > **)&jarg1;
  arg1 = (kmldom::AbstractView *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_gx_timeprimitive();
  *(kmldom::TimePrimitivePtr **)&jresult = result ? new kmldom::TimePrimitivePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractView_1has_1gx_1timeprimitive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::AbstractView *arg1 = (kmldom::AbstractView *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractView > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractView > **)&jarg1;
  arg1 = (kmldom::AbstractView *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_timeprimitive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractView_1set_1gx_1timeprimitive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::AbstractView *arg1 = (kmldom::AbstractView *) 0 ;
  kmldom::TimePrimitivePtr *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::AbstractView > *smartarg1 = 0 ;
  kmldom::TimePrimitivePtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractView > **)&jarg1;
  arg1 = (kmldom::AbstractView *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(kmldom::TimePrimitivePtr **)&jarg2 : &tempnull2; 
  (arg1)->set_gx_timeprimitive((kmldom::TimePrimitivePtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractView_1clear_1gx_1timeprimitive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::AbstractView *arg1 = (kmldom::AbstractView *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractView > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractView > **)&jarg1;
  arg1 = (kmldom::AbstractView *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_timeprimitive();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractView_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::AbstractView > arg1 ;
  boost::intrusive_ptr< kmldom::AbstractView > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::AbstractView > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_AbstractView_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1AbstractView(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::AbstractView *arg1 = (kmldom::AbstractView *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractView > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractView > **)&jarg1;
  arg1 = (kmldom::AbstractView *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_TimePrimitive_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::TimePrimitive > arg1 ;
  boost::intrusive_ptr< kmldom::TimePrimitive > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::TimePrimitive > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_TimePrimitive_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1TimePrimitive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::TimePrimitive *arg1 = (kmldom::TimePrimitive *) 0 ;
  boost::intrusive_ptr< kmldom::TimePrimitive > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimePrimitive > **)&jarg1;
  arg1 = (kmldom::TimePrimitive *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_StyleSelector_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::StyleSelector > arg1 ;
  boost::intrusive_ptr< kmldom::StyleSelector > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::StyleSelector > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_StyleSelector_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1StyleSelector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::StyleSelector *arg1 = (kmldom::StyleSelector *) 0 ;
  boost::intrusive_ptr< kmldom::StyleSelector > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::StyleSelector > **)&jarg1;
  arg1 = (kmldom::StyleSelector *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1get_1north(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_north();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1has_1north(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_north();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1set_1north(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_north(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1clear_1north(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_north();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1get_1south(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_south();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1has_1south(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_south();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1set_1south(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_south(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1clear_1south(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_south();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1get_1east(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_east();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1has_1east(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_east();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1set_1east(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_east(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1clear_1east(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_east();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1get_1west(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_west();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1has_1west(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_west();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1set_1west(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_west(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1clear_1west(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_west();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AbstractLatLonBox_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > arg1 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::AbstractLatLonBox > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_AbstractLatLonBox_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1AbstractLatLonBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::AbstractLatLonBox *arg1 = (kmldom::AbstractLatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AbstractLatLonBox > **)&jarg1;
  arg1 = (kmldom::AbstractLatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1get_1minaltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_minaltitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1set_1minaltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_minaltitude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1has_1minaltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_minaltitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1clear_1minaltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_minaltitude();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1get_1maxaltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_maxaltitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1set_1maxaltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_maxaltitude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1has_1maxaltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_maxaltitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1clear_1maxaltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_maxaltitude();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1get_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1set_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_altitudemode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1has_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1clear_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_altitudemode();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1get_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_gx_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1has_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1set_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_gx_altitudemode(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1clear_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_altitudemode();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonAltBox_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > arg1 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *argp1 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::LatLonAltBox > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_LatLonAltBox_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::AbstractLatLonBox > **)&jresult = result ? new boost::intrusive_ptr< kmldom::AbstractLatLonBox >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1LatLonAltBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::LatLonAltBox *arg1 = (kmldom::LatLonAltBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonAltBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonAltBox > **)&jarg1;
  arg1 = (kmldom::LatLonAltBox *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1get_1minlodpixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_minlodpixels();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1set_1minlodpixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_minlodpixels(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1has_1minlodpixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_minlodpixels();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1clear_1minlodpixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_minlodpixels();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1get_1maxlodpixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_maxlodpixels();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1set_1maxlodpixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_maxlodpixels(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1has_1maxlodpixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_maxlodpixels();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1clear_1maxlodpixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_maxlodpixels();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1get_1minfadeextent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_minfadeextent();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1set_1minfadeextent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_minfadeextent(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1has_1minfadeextent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_minfadeextent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1clear_1minfadeextent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_minfadeextent();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1get_1maxfadeextent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_maxfadeextent();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1set_1maxfadeextent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_maxfadeextent(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1has_1maxfadeextent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_maxfadeextent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1clear_1maxfadeextent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_maxfadeextent();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Lod_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Lod > arg1 ;
  boost::intrusive_ptr< kmldom::Lod > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Lod > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Lod_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Lod(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Lod *arg1 = (kmldom::Lod *) 0 ;
  boost::intrusive_ptr< kmldom::Lod > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Lod > **)&jarg1;
  arg1 = (kmldom::Lod *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Region_1get_1latlonaltbox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Region *arg1 = (kmldom::Region *) 0 ;
  boost::intrusive_ptr< kmldom::Region > *smartarg1 = 0 ;
  kmldom::LatLonAltBoxPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Region > **)&jarg1;
  arg1 = (kmldom::Region *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_latlonaltbox();
  *(kmldom::LatLonAltBoxPtr **)&jresult = result ? new kmldom::LatLonAltBoxPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Region_1set_1latlonaltbox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Region *arg1 = (kmldom::Region *) 0 ;
  kmldom::LatLonAltBoxPtr arg2 ;
  boost::intrusive_ptr< kmldom::Region > *smartarg1 = 0 ;
  kmldom::LatLonAltBoxPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Region > **)&jarg1;
  arg1 = (kmldom::Region *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::LatLonAltBoxPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_latlonaltbox(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Region_1has_1latlonaltbox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Region *arg1 = (kmldom::Region *) 0 ;
  boost::intrusive_ptr< kmldom::Region > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Region > **)&jarg1;
  arg1 = (kmldom::Region *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_latlonaltbox();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Region_1clear_1latlonaltbox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Region *arg1 = (kmldom::Region *) 0 ;
  boost::intrusive_ptr< kmldom::Region > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Region > **)&jarg1;
  arg1 = (kmldom::Region *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_latlonaltbox();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Region_1get_1lod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Region *arg1 = (kmldom::Region *) 0 ;
  boost::intrusive_ptr< kmldom::Region > *smartarg1 = 0 ;
  kmldom::LodPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Region > **)&jarg1;
  arg1 = (kmldom::Region *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_lod();
  *(kmldom::LodPtr **)&jresult = result ? new kmldom::LodPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Region_1set_1lod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Region *arg1 = (kmldom::Region *) 0 ;
  kmldom::LodPtr arg2 ;
  boost::intrusive_ptr< kmldom::Region > *smartarg1 = 0 ;
  kmldom::LodPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Region > **)&jarg1;
  arg1 = (kmldom::Region *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::LodPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_lod(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Region_1has_1lod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Region *arg1 = (kmldom::Region *) 0 ;
  boost::intrusive_ptr< kmldom::Region > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Region > **)&jarg1;
  arg1 = (kmldom::Region *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_lod();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Region_1clear_1lod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Region *arg1 = (kmldom::Region *) 0 ;
  boost::intrusive_ptr< kmldom::Region > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Region > **)&jarg1;
  arg1 = (kmldom::Region *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_lod();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Region_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Region > arg1 ;
  boost::intrusive_ptr< kmldom::Region > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Region > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Region_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Region(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Region *arg1 = (kmldom::Region *) 0 ;
  boost::intrusive_ptr< kmldom::Region > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Region > **)&jarg1;
  arg1 = (kmldom::Region *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ExtendedData_1add_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::ExtendedData *arg1 = (kmldom::ExtendedData *) 0 ;
  kmldom::DataPtr arg2 ;
  boost::intrusive_ptr< kmldom::ExtendedData > *smartarg1 = 0 ;
  kmldom::DataPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ExtendedData > **)&jarg1;
  arg1 = (kmldom::ExtendedData *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::DataPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_data(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ExtendedData_1get_1data_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ExtendedData *arg1 = (kmldom::ExtendedData *) 0 ;
  boost::intrusive_ptr< kmldom::ExtendedData > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ExtendedData > **)&jarg1;
  arg1 = (kmldom::ExtendedData *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_data_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ExtendedData_1get_1data_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::ExtendedData *arg1 = (kmldom::ExtendedData *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::ExtendedData > *smartarg1 = 0 ;
  kmldom::DataPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ExtendedData > **)&jarg1;
  arg1 = (kmldom::ExtendedData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_data_array_at(arg2);
  *(kmldom::DataPtr **)&jresult = result ? new kmldom::DataPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ExtendedData_1add_1schemadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::ExtendedData *arg1 = (kmldom::ExtendedData *) 0 ;
  kmldom::SchemaDataPtr arg2 ;
  boost::intrusive_ptr< kmldom::ExtendedData > *smartarg1 = 0 ;
  kmldom::SchemaDataPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ExtendedData > **)&jarg1;
  arg1 = (kmldom::ExtendedData *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::SchemaDataPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_schemadata(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ExtendedData_1get_1schemadata_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ExtendedData *arg1 = (kmldom::ExtendedData *) 0 ;
  boost::intrusive_ptr< kmldom::ExtendedData > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ExtendedData > **)&jarg1;
  arg1 = (kmldom::ExtendedData *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_schemadata_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ExtendedData_1get_1schemadata_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::ExtendedData *arg1 = (kmldom::ExtendedData *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::ExtendedData > *smartarg1 = 0 ;
  kmldom::SchemaDataPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ExtendedData > **)&jarg1;
  arg1 = (kmldom::ExtendedData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_schemadata_array_at(arg2);
  *(kmldom::SchemaDataPtr **)&jresult = result ? new kmldom::SchemaDataPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ExtendedData_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::ExtendedData > arg1 ;
  boost::intrusive_ptr< kmldom::ExtendedData > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::ExtendedData > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_ExtendedData_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1ExtendedData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::ExtendedData *arg1 = (kmldom::ExtendedData *) 0 ;
  boost::intrusive_ptr< kmldom::ExtendedData > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ExtendedData > **)&jarg1;
  arg1 = (kmldom::ExtendedData *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_name((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_name();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_name();
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1visibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->get_visibility();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1visibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_visibility(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1visibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_visibility();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1visibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_visibility();
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->get_open();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_open(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_open();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_open();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1atomauthor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::AtomAuthorPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_atomauthor();
  *(kmldom::AtomAuthorPtr **)&jresult = result ? new kmldom::AtomAuthorPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1atomauthor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_atomauthor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1atomauthor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  kmldom::AtomAuthorPtr arg2 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::AtomAuthorPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::AtomAuthorPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_atomauthor(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1atomauthor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_atomauthor();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1atomlink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::AtomLinkPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_atomlink();
  *(kmldom::AtomLinkPtr **)&jresult = result ? new kmldom::AtomLinkPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1atomlink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_atomlink();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1atomlink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  kmldom::AtomLinkPtr arg2 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::AtomLinkPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::AtomLinkPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_atomlink(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1atomlink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_atomlink();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_address();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_address((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_address();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_address();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1phonenumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_phonenumber();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1phonenumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_phonenumber((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1phonenumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_phonenumber();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1phonenumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_phonenumber();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1snippet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::SnippetPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_snippet();
  *(kmldom::SnippetPtr **)&jresult = result ? new kmldom::SnippetPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1snippet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  kmldom::SnippetPtr arg2 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::SnippetPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::SnippetPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_snippet(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1snippet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_snippet();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1snippet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_snippet();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_description();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_description((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_description();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_description();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1abstractview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::AbstractViewPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_abstractview();
  *(kmldom::AbstractViewPtr **)&jresult = result ? new kmldom::AbstractViewPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1abstractview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  kmldom::AbstractViewPtr arg2 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::AbstractViewPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::AbstractViewPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_abstractview(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1abstractview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_abstractview();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1abstractview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_abstractview();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1timeprimitive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::TimePrimitivePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_timeprimitive();
  *(kmldom::TimePrimitivePtr **)&jresult = result ? new kmldom::TimePrimitivePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1timeprimitive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  kmldom::TimePrimitivePtr arg2 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::TimePrimitivePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::TimePrimitivePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_timeprimitive(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1timeprimitive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_timeprimitive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1timeprimitive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_timeprimitive();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1styleurl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_styleurl();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1styleurl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_styleurl((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1styleurl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_styleurl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1styleurl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_styleurl();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1styleselector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::StyleSelectorPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_styleselector();
  *(kmldom::StyleSelectorPtr **)&jresult = result ? new kmldom::StyleSelectorPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1styleselector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  kmldom::StyleSelectorPtr arg2 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::StyleSelectorPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::StyleSelectorPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_styleselector(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1styleselector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_styleselector();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1styleselector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_styleselector();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1region(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::RegionPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_region();
  *(kmldom::RegionPtr **)&jresult = result ? new kmldom::RegionPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1region(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  kmldom::RegionPtr arg2 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::RegionPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::RegionPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_region(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1region(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_region();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1region(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_region();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1extendeddata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::ExtendedDataPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_extendeddata();
  *(kmldom::ExtendedDataPtr **)&jresult = result ? new kmldom::ExtendedDataPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1extendeddata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  kmldom::ExtendedDataPtr arg2 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  kmldom::ExtendedDataPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::ExtendedDataPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_extendeddata(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1extendeddata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_extendeddata();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1extendeddata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_extendeddata();
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1get_1gx_1balloonvisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->get_gx_balloonvisibility();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1set_1gx_1balloonvisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_gx_balloonvisibility(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1has_1gx_1balloonvisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_balloonvisibility();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1clear_1gx_1balloonvisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_balloonvisibility();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Feature_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Feature > arg1 ;
  boost::intrusive_ptr< kmldom::Feature > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Feature > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Feature_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Feature(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Feature *arg1 = (kmldom::Feature *) 0 ;
  boost::intrusive_ptr< kmldom::Feature > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Feature > **)&jarg1;
  arg1 = (kmldom::Feature *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Container_1add_1feature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Container *arg1 = (kmldom::Container *) 0 ;
  kmldom::FeaturePtr arg2 ;
  boost::intrusive_ptr< kmldom::Container > *smartarg1 = 0 ;
  kmldom::FeaturePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Container > **)&jarg1;
  arg1 = (kmldom::Container *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::FeaturePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_feature(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Container_1get_1feature_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Container *arg1 = (kmldom::Container *) 0 ;
  boost::intrusive_ptr< kmldom::Container > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Container > **)&jarg1;
  arg1 = (kmldom::Container *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_feature_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Container_1get_1feature_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::Container *arg1 = (kmldom::Container *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::Container > *smartarg1 = 0 ;
  kmldom::FeaturePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Container > **)&jarg1;
  arg1 = (kmldom::Container *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_feature_array_at(arg2);
  *(kmldom::FeaturePtr **)&jresult = result ? new kmldom::FeaturePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Container_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Container > arg1 ;
  boost::intrusive_ptr< kmldom::Container > *argp1 ;
  boost::intrusive_ptr< kmldom::Feature > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Container > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Container_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Feature > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Feature >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Container(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Container *arg1 = (kmldom::Container *) 0 ;
  boost::intrusive_ptr< kmldom::Container > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Container > **)&jarg1;
  arg1 = (kmldom::Container *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Geometry_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Geometry > arg1 ;
  boost::intrusive_ptr< kmldom::Geometry > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Geometry > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Geometry_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Geometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Geometry *arg1 = (kmldom::Geometry *) 0 ;
  boost::intrusive_ptr< kmldom::Geometry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Geometry > **)&jarg1;
  arg1 = (kmldom::Geometry *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_BasicLink_1get_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::BasicLink *arg1 = (kmldom::BasicLink *) 0 ;
  boost::intrusive_ptr< kmldom::BasicLink > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BasicLink > **)&jarg1;
  arg1 = (kmldom::BasicLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_href();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_BasicLink_1has_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::BasicLink *arg1 = (kmldom::BasicLink *) 0 ;
  boost::intrusive_ptr< kmldom::BasicLink > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BasicLink > **)&jarg1;
  arg1 = (kmldom::BasicLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_href();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_BasicLink_1set_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::BasicLink *arg1 = (kmldom::BasicLink *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::BasicLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BasicLink > **)&jarg1;
  arg1 = (kmldom::BasicLink *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_href((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_BasicLink_1clear_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::BasicLink *arg1 = (kmldom::BasicLink *) 0 ;
  boost::intrusive_ptr< kmldom::BasicLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BasicLink > **)&jarg1;
  arg1 = (kmldom::BasicLink *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_href();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_BasicLink_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::BasicLink > arg1 ;
  boost::intrusive_ptr< kmldom::BasicLink > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::BasicLink > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_BasicLink_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1BasicLink(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::BasicLink *arg1 = (kmldom::BasicLink *) 0 ;
  boost::intrusive_ptr< kmldom::BasicLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BasicLink > **)&jarg1;
  arg1 = (kmldom::BasicLink *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1get_1refreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_refreshmode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1set_1refreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_refreshmode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1has_1refreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_refreshmode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1clear_1refreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_refreshmode();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1get_1refreshinterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_refreshinterval();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1set_1refreshinterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_refreshinterval(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1has_1refreshinterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_refreshinterval();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1clear_1refreshinterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_refreshinterval();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1get_1viewrefreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_viewrefreshmode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1set_1viewrefreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_viewrefreshmode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1has_1viewrefreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_viewrefreshmode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1clear_1viewrefreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_viewrefreshmode();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1get_1viewrefreshtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_viewrefreshtime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1set_1viewrefreshtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_viewrefreshtime(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1has_1viewrefreshtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_viewrefreshtime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1clear_1viewrefreshtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_viewrefreshtime();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1get_1viewboundscale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_viewboundscale();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1set_1viewboundscale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_viewboundscale(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1has_1viewboundscale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_viewboundscale();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1clear_1viewboundscale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_viewboundscale();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1get_1viewformat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_viewformat();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1set_1viewformat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_viewformat((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1has_1viewformat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_viewformat();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1clear_1viewformat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_viewformat();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1get_1httpquery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_httpquery();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1set_1httpquery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_httpquery((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1has_1httpquery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_httpquery();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1clear_1httpquery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_httpquery();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Icon_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Icon > arg1 ;
  boost::intrusive_ptr< kmldom::Icon > *argp1 ;
  boost::intrusive_ptr< kmldom::BasicLink > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Icon > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Icon_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::BasicLink > **)&jresult = result ? new boost::intrusive_ptr< kmldom::BasicLink >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Icon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Icon *arg1 = (kmldom::Icon *) 0 ;
  boost::intrusive_ptr< kmldom::Icon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Icon > **)&jarg1;
  arg1 = (kmldom::Icon *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyleIcon_1get_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::IconStyleIcon *arg1 = (kmldom::IconStyleIcon *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyleIcon > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyleIcon > **)&jarg1;
  arg1 = (kmldom::IconStyleIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_href();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyleIcon_1has_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::IconStyleIcon *arg1 = (kmldom::IconStyleIcon *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyleIcon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyleIcon > **)&jarg1;
  arg1 = (kmldom::IconStyleIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_href();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyleIcon_1set_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::IconStyleIcon *arg1 = (kmldom::IconStyleIcon *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::IconStyleIcon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyleIcon > **)&jarg1;
  arg1 = (kmldom::IconStyleIcon *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_href((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyleIcon_1clear_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::IconStyleIcon *arg1 = (kmldom::IconStyleIcon *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyleIcon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyleIcon > **)&jarg1;
  arg1 = (kmldom::IconStyleIcon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_href();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyleIcon_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::IconStyleIcon > arg1 ;
  boost::intrusive_ptr< kmldom::IconStyleIcon > *argp1 ;
  boost::intrusive_ptr< kmldom::BasicLink > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::IconStyleIcon > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_IconStyleIcon_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::BasicLink > **)&jresult = result ? new boost::intrusive_ptr< kmldom::BasicLink >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1IconStyleIcon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::IconStyleIcon *arg1 = (kmldom::IconStyleIcon *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyleIcon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyleIcon > **)&jarg1;
  arg1 = (kmldom::IconStyleIcon *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Overlay_1get_1color(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Overlay *arg1 = (kmldom::Overlay *) 0 ;
  boost::intrusive_ptr< kmldom::Overlay > *smartarg1 = 0 ;
  kmlbase::Color32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Overlay > **)&jarg1;
  arg1 = (kmldom::Overlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (kmlbase::Color32 *) &(arg1)->get_color();
  *(kmlbase::Color32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Overlay_1set_1color(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Overlay *arg1 = (kmldom::Overlay *) 0 ;
  kmlbase::Color32 *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Overlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Overlay > **)&jarg1;
  arg1 = (kmldom::Overlay *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(kmlbase::Color32 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kmlbase::Color32 const & reference is null");
    return ;
  } 
  (arg1)->set_color((kmlbase::Color32 const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Overlay_1has_1color(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Overlay *arg1 = (kmldom::Overlay *) 0 ;
  boost::intrusive_ptr< kmldom::Overlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Overlay > **)&jarg1;
  arg1 = (kmldom::Overlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_color();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Overlay_1clear_1color(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Overlay *arg1 = (kmldom::Overlay *) 0 ;
  boost::intrusive_ptr< kmldom::Overlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Overlay > **)&jarg1;
  arg1 = (kmldom::Overlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_color();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Overlay_1get_1draworder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Overlay *arg1 = (kmldom::Overlay *) 0 ;
  boost::intrusive_ptr< kmldom::Overlay > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Overlay > **)&jarg1;
  arg1 = (kmldom::Overlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_draworder();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Overlay_1set_1draworder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Overlay *arg1 = (kmldom::Overlay *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Overlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Overlay > **)&jarg1;
  arg1 = (kmldom::Overlay *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_draworder(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Overlay_1has_1draworder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Overlay *arg1 = (kmldom::Overlay *) 0 ;
  boost::intrusive_ptr< kmldom::Overlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Overlay > **)&jarg1;
  arg1 = (kmldom::Overlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_draworder();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Overlay_1clear_1draworder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Overlay *arg1 = (kmldom::Overlay *) 0 ;
  boost::intrusive_ptr< kmldom::Overlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Overlay > **)&jarg1;
  arg1 = (kmldom::Overlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_draworder();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Overlay_1get_1icon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Overlay *arg1 = (kmldom::Overlay *) 0 ;
  boost::intrusive_ptr< kmldom::Overlay > *smartarg1 = 0 ;
  kmldom::IconPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Overlay > **)&jarg1;
  arg1 = (kmldom::Overlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_icon();
  *(kmldom::IconPtr **)&jresult = result ? new kmldom::IconPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Overlay_1set_1icon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Overlay *arg1 = (kmldom::Overlay *) 0 ;
  kmldom::IconPtr arg2 ;
  boost::intrusive_ptr< kmldom::Overlay > *smartarg1 = 0 ;
  kmldom::IconPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Overlay > **)&jarg1;
  arg1 = (kmldom::Overlay *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::IconPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_icon(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Overlay_1has_1icon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Overlay *arg1 = (kmldom::Overlay *) 0 ;
  boost::intrusive_ptr< kmldom::Overlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Overlay > **)&jarg1;
  arg1 = (kmldom::Overlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_icon();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Overlay_1clear_1icon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Overlay *arg1 = (kmldom::Overlay *) 0 ;
  boost::intrusive_ptr< kmldom::Overlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Overlay > **)&jarg1;
  arg1 = (kmldom::Overlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_icon();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Overlay_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Overlay > arg1 ;
  boost::intrusive_ptr< kmldom::Overlay > *argp1 ;
  boost::intrusive_ptr< kmldom::Feature > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Overlay > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Overlay_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Feature > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Feature >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Overlay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Overlay *arg1 = (kmldom::Overlay *) 0 ;
  boost::intrusive_ptr< kmldom::Overlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Overlay > **)&jarg1;
  arg1 = (kmldom::Overlay *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1get_1bgcolor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  kmlbase::Color32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (kmlbase::Color32 *) &(arg1)->get_bgcolor();
  *(kmlbase::Color32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1set_1bgcolor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  kmlbase::Color32 *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(kmlbase::Color32 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kmlbase::Color32 const & reference is null");
    return ;
  } 
  (arg1)->set_bgcolor((kmlbase::Color32 const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1has_1bgcolor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_bgcolor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1clear_1bgcolor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_bgcolor();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1get_1textcolor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  kmlbase::Color32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (kmlbase::Color32 *) &(arg1)->get_textcolor();
  *(kmlbase::Color32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1set_1textcolor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  kmlbase::Color32 *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(kmlbase::Color32 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kmlbase::Color32 const & reference is null");
    return ;
  } 
  (arg1)->set_textcolor((kmlbase::Color32 const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1has_1textcolor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_textcolor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1clear_1textcolor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_textcolor();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1get_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_text();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1set_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_text((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1has_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_text();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1clear_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_text();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1get_1displaymode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_displaymode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1set_1displaymode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_displaymode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1has_1displaymode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_displaymode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1clear_1displaymode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_displaymode();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_BalloonStyle_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > arg1 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *argp1 ;
  boost::intrusive_ptr< kmldom::SubStyle > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::BalloonStyle > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_BalloonStyle_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::SubStyle > **)&jresult = result ? new boost::intrusive_ptr< kmldom::SubStyle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1BalloonStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::BalloonStyle *arg1 = (kmldom::BalloonStyle *) 0 ;
  boost::intrusive_ptr< kmldom::BalloonStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::BalloonStyle > **)&jarg1;
  arg1 = (kmldom::BalloonStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1get_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_longitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1set_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_longitude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1has_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_longitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1clear_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_longitude();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1get_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_latitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1set_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_latitude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1has_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_latitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1clear_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_latitude();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1get_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_altitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1set_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_altitude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1has_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_altitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1clear_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_altitude();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1get_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_heading();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1set_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_heading(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1has_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_heading();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1clear_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_heading();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1get_1tilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_tilt();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1set_1tilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_tilt(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1has_1tilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_tilt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1clear_1tilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_tilt();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1get_1roll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_roll();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1set_1roll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_roll(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1has_1roll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_roll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1clear_1roll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_roll();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1get_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1set_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_altitudemode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1has_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1clear_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_altitudemode();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1get_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_gx_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1has_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1set_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_gx_altitudemode(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1clear_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_altitudemode();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Camera_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Camera > arg1 ;
  boost::intrusive_ptr< kmldom::Camera > *argp1 ;
  boost::intrusive_ptr< kmldom::AbstractView > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Camera > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Camera_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::AbstractView > **)&jresult = result ? new boost::intrusive_ptr< kmldom::AbstractView >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Camera(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Camera *arg1 = (kmldom::Camera *) 0 ;
  boost::intrusive_ptr< kmldom::Camera > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Camera > **)&jarg1;
  arg1 = (kmldom::Camera *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_UpdateOperation_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::UpdateOperation > arg1 ;
  boost::intrusive_ptr< kmldom::UpdateOperation > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::UpdateOperation > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_UpdateOperation_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1UpdateOperation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::UpdateOperation *arg1 = (kmldom::UpdateOperation *) 0 ;
  boost::intrusive_ptr< kmldom::UpdateOperation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::UpdateOperation > **)&jarg1;
  arg1 = (kmldom::UpdateOperation *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Change_1add_1object(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Change *arg1 = (kmldom::Change *) 0 ;
  kmldom::ObjectPtr arg2 ;
  boost::intrusive_ptr< kmldom::Change > *smartarg1 = 0 ;
  kmldom::ObjectPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Change > **)&jarg1;
  arg1 = (kmldom::Change *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::ObjectPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_object(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Change_1get_1object_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Change *arg1 = (kmldom::Change *) 0 ;
  boost::intrusive_ptr< kmldom::Change > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Change > **)&jarg1;
  arg1 = (kmldom::Change *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_object_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Change_1get_1object_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::Change *arg1 = (kmldom::Change *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::Change > *smartarg1 = 0 ;
  kmldom::ObjectPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Change > **)&jarg1;
  arg1 = (kmldom::Change *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_object_array_at(arg2);
  *(kmldom::ObjectPtr **)&jresult = result ? new kmldom::ObjectPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Change_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Change > arg1 ;
  boost::intrusive_ptr< kmldom::Change > *argp1 ;
  boost::intrusive_ptr< kmldom::UpdateOperation > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Change > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Change_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::UpdateOperation > **)&jresult = result ? new boost::intrusive_ptr< kmldom::UpdateOperation >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Change(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Change *arg1 = (kmldom::Change *) 0 ;
  boost::intrusive_ptr< kmldom::Change > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Change > **)&jarg1;
  arg1 = (kmldom::Change *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Create_1add_1container(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Create *arg1 = (kmldom::Create *) 0 ;
  kmldom::ContainerPtr arg2 ;
  boost::intrusive_ptr< kmldom::Create > *smartarg1 = 0 ;
  kmldom::ContainerPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Create > **)&jarg1;
  arg1 = (kmldom::Create *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::ContainerPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_container(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Create_1get_1container_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Create *arg1 = (kmldom::Create *) 0 ;
  boost::intrusive_ptr< kmldom::Create > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Create > **)&jarg1;
  arg1 = (kmldom::Create *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_container_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Create_1get_1container_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::Create *arg1 = (kmldom::Create *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::Create > *smartarg1 = 0 ;
  kmldom::ContainerPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Create > **)&jarg1;
  arg1 = (kmldom::Create *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_container_array_at(arg2);
  *(kmldom::ContainerPtr **)&jresult = result ? new kmldom::ContainerPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Create_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Create > arg1 ;
  boost::intrusive_ptr< kmldom::Create > *argp1 ;
  boost::intrusive_ptr< kmldom::UpdateOperation > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Create > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Create_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::UpdateOperation > **)&jresult = result ? new boost::intrusive_ptr< kmldom::UpdateOperation >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Create(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Create *arg1 = (kmldom::Create *) 0 ;
  boost::intrusive_ptr< kmldom::Create > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Create > **)&jarg1;
  arg1 = (kmldom::Create *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Data_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Data *arg1 = (kmldom::Data *) 0 ;
  boost::intrusive_ptr< kmldom::Data > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Data > **)&jarg1;
  arg1 = (kmldom::Data *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Data_1has_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Data *arg1 = (kmldom::Data *) 0 ;
  boost::intrusive_ptr< kmldom::Data > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Data > **)&jarg1;
  arg1 = (kmldom::Data *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_name();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Data_1set_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Data *arg1 = (kmldom::Data *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Data > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Data > **)&jarg1;
  arg1 = (kmldom::Data *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_name((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Data_1clear_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Data *arg1 = (kmldom::Data *) 0 ;
  boost::intrusive_ptr< kmldom::Data > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Data > **)&jarg1;
  arg1 = (kmldom::Data *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_name();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Data_1get_1displayname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Data *arg1 = (kmldom::Data *) 0 ;
  boost::intrusive_ptr< kmldom::Data > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Data > **)&jarg1;
  arg1 = (kmldom::Data *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_displayname();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Data_1has_1displayname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Data *arg1 = (kmldom::Data *) 0 ;
  boost::intrusive_ptr< kmldom::Data > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Data > **)&jarg1;
  arg1 = (kmldom::Data *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_displayname();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Data_1set_1displayname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Data *arg1 = (kmldom::Data *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Data > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Data > **)&jarg1;
  arg1 = (kmldom::Data *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_displayname((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Data_1clear_1displayname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Data *arg1 = (kmldom::Data *) 0 ;
  boost::intrusive_ptr< kmldom::Data > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Data > **)&jarg1;
  arg1 = (kmldom::Data *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_displayname();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Data_1get_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Data *arg1 = (kmldom::Data *) 0 ;
  boost::intrusive_ptr< kmldom::Data > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Data > **)&jarg1;
  arg1 = (kmldom::Data *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_value();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Data_1has_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Data *arg1 = (kmldom::Data *) 0 ;
  boost::intrusive_ptr< kmldom::Data > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Data > **)&jarg1;
  arg1 = (kmldom::Data *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_value();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Data_1set_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Data *arg1 = (kmldom::Data *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Data > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Data > **)&jarg1;
  arg1 = (kmldom::Data *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_value((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Data_1clear_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Data *arg1 = (kmldom::Data *) 0 ;
  boost::intrusive_ptr< kmldom::Data > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Data > **)&jarg1;
  arg1 = (kmldom::Data *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_value();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Data_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Data > arg1 ;
  boost::intrusive_ptr< kmldom::Data > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Data > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Data_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Data *arg1 = (kmldom::Data *) 0 ;
  boost::intrusive_ptr< kmldom::Data > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Data > **)&jarg1;
  arg1 = (kmldom::Data *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Delete_1add_1feature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Delete *arg1 = (kmldom::Delete *) 0 ;
  kmldom::FeaturePtr arg2 ;
  boost::intrusive_ptr< kmldom::Delete > *smartarg1 = 0 ;
  kmldom::FeaturePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Delete > **)&jarg1;
  arg1 = (kmldom::Delete *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::FeaturePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_feature(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Delete_1get_1feature_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Delete *arg1 = (kmldom::Delete *) 0 ;
  boost::intrusive_ptr< kmldom::Delete > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Delete > **)&jarg1;
  arg1 = (kmldom::Delete *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_feature_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Delete_1get_1feature_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::Delete *arg1 = (kmldom::Delete *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::Delete > *smartarg1 = 0 ;
  kmldom::FeaturePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Delete > **)&jarg1;
  arg1 = (kmldom::Delete *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_feature_array_at(arg2);
  *(kmldom::FeaturePtr **)&jresult = result ? new kmldom::FeaturePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Delete_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Delete > arg1 ;
  boost::intrusive_ptr< kmldom::Delete > *argp1 ;
  boost::intrusive_ptr< kmldom::UpdateOperation > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Delete > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Delete_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::UpdateOperation > **)&jresult = result ? new boost::intrusive_ptr< kmldom::UpdateOperation >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Delete(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Delete *arg1 = (kmldom::Delete *) 0 ;
  boost::intrusive_ptr< kmldom::Delete > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Delete > **)&jarg1;
  arg1 = (kmldom::Delete *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleField_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::SimpleField *arg1 = (kmldom::SimpleField *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleField > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleField > **)&jarg1;
  arg1 = (kmldom::SimpleField *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_type();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleField_1has_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::SimpleField *arg1 = (kmldom::SimpleField *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleField > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleField > **)&jarg1;
  arg1 = (kmldom::SimpleField *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_type();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleField_1set_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::SimpleField *arg1 = (kmldom::SimpleField *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::SimpleField > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleField > **)&jarg1;
  arg1 = (kmldom::SimpleField *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_type((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleField_1clear_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::SimpleField *arg1 = (kmldom::SimpleField *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleField > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleField > **)&jarg1;
  arg1 = (kmldom::SimpleField *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_type();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleField_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::SimpleField *arg1 = (kmldom::SimpleField *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleField > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleField > **)&jarg1;
  arg1 = (kmldom::SimpleField *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleField_1has_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::SimpleField *arg1 = (kmldom::SimpleField *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleField > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleField > **)&jarg1;
  arg1 = (kmldom::SimpleField *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_name();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleField_1set_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::SimpleField *arg1 = (kmldom::SimpleField *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::SimpleField > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleField > **)&jarg1;
  arg1 = (kmldom::SimpleField *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_name((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleField_1clear_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::SimpleField *arg1 = (kmldom::SimpleField *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleField > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleField > **)&jarg1;
  arg1 = (kmldom::SimpleField *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_name();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleField_1get_1displayname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::SimpleField *arg1 = (kmldom::SimpleField *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleField > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleField > **)&jarg1;
  arg1 = (kmldom::SimpleField *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_displayname();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleField_1set_1displayname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::SimpleField *arg1 = (kmldom::SimpleField *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::SimpleField > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleField > **)&jarg1;
  arg1 = (kmldom::SimpleField *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_displayname((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleField_1has_1displayname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::SimpleField *arg1 = (kmldom::SimpleField *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleField > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleField > **)&jarg1;
  arg1 = (kmldom::SimpleField *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_displayname();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleField_1clear_1displayname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::SimpleField *arg1 = (kmldom::SimpleField *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleField > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleField > **)&jarg1;
  arg1 = (kmldom::SimpleField *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_displayname();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleField_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::SimpleField > arg1 ;
  boost::intrusive_ptr< kmldom::SimpleField > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::SimpleField > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_SimpleField_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1SimpleField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::SimpleField *arg1 = (kmldom::SimpleField *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleField > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleField > **)&jarg1;
  arg1 = (kmldom::SimpleField *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Schema_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Schema *arg1 = (kmldom::Schema *) 0 ;
  boost::intrusive_ptr< kmldom::Schema > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Schema > **)&jarg1;
  arg1 = (kmldom::Schema *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Schema_1has_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Schema *arg1 = (kmldom::Schema *) 0 ;
  boost::intrusive_ptr< kmldom::Schema > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Schema > **)&jarg1;
  arg1 = (kmldom::Schema *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_name();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Schema_1set_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Schema *arg1 = (kmldom::Schema *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Schema > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Schema > **)&jarg1;
  arg1 = (kmldom::Schema *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_name((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Schema_1clear_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Schema *arg1 = (kmldom::Schema *) 0 ;
  boost::intrusive_ptr< kmldom::Schema > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Schema > **)&jarg1;
  arg1 = (kmldom::Schema *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_name();
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Schema_1add_1simplefield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Schema *arg1 = (kmldom::Schema *) 0 ;
  kmldom::SimpleFieldPtr arg2 ;
  boost::intrusive_ptr< kmldom::Schema > *smartarg1 = 0 ;
  kmldom::SimpleFieldPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Schema > **)&jarg1;
  arg1 = (kmldom::Schema *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::SimpleFieldPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_simplefield(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Schema_1get_1simplefield_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Schema *arg1 = (kmldom::Schema *) 0 ;
  boost::intrusive_ptr< kmldom::Schema > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Schema > **)&jarg1;
  arg1 = (kmldom::Schema *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_simplefield_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Schema_1get_1simplefield_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::Schema *arg1 = (kmldom::Schema *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::Schema > *smartarg1 = 0 ;
  kmldom::SimpleFieldPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Schema > **)&jarg1;
  arg1 = (kmldom::Schema *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_simplefield_array_at(arg2);
  *(kmldom::SimpleFieldPtr **)&jresult = result ? new kmldom::SimpleFieldPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Schema_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Schema > arg1 ;
  boost::intrusive_ptr< kmldom::Schema > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Schema > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Schema_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Schema(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Schema *arg1 = (kmldom::Schema *) 0 ;
  boost::intrusive_ptr< kmldom::Schema > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Schema > **)&jarg1;
  arg1 = (kmldom::Schema *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Document_1add_1schema(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Document *arg1 = (kmldom::Document *) 0 ;
  kmldom::SchemaPtr arg2 ;
  boost::intrusive_ptr< kmldom::Document > *smartarg1 = 0 ;
  kmldom::SchemaPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Document > **)&jarg1;
  arg1 = (kmldom::Document *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::SchemaPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_schema(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Document_1get_1schema_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Document *arg1 = (kmldom::Document *) 0 ;
  boost::intrusive_ptr< kmldom::Document > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Document > **)&jarg1;
  arg1 = (kmldom::Document *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_schema_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Document_1get_1schema_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::Document *arg1 = (kmldom::Document *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::Document > *smartarg1 = 0 ;
  kmldom::SchemaPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Document > **)&jarg1;
  arg1 = (kmldom::Document *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_schema_array_at(arg2);
  *(kmldom::SchemaPtr **)&jresult = result ? new kmldom::SchemaPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Document_1add_1styleselector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Document *arg1 = (kmldom::Document *) 0 ;
  kmldom::StyleSelectorPtr arg2 ;
  boost::intrusive_ptr< kmldom::Document > *smartarg1 = 0 ;
  kmldom::StyleSelectorPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Document > **)&jarg1;
  arg1 = (kmldom::Document *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::StyleSelectorPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_styleselector(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Document_1get_1styleselector_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Document *arg1 = (kmldom::Document *) 0 ;
  boost::intrusive_ptr< kmldom::Document > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Document > **)&jarg1;
  arg1 = (kmldom::Document *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_styleselector_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Document_1get_1styleselector_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::Document *arg1 = (kmldom::Document *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::Document > *smartarg1 = 0 ;
  kmldom::StyleSelectorPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Document > **)&jarg1;
  arg1 = (kmldom::Document *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_styleselector_array_at(arg2);
  *(kmldom::StyleSelectorPtr **)&jresult = result ? new kmldom::StyleSelectorPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Document_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Document > arg1 ;
  boost::intrusive_ptr< kmldom::Document > *argp1 ;
  boost::intrusive_ptr< kmldom::Container > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Document > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Document_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Container > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Container >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Document(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Document *arg1 = (kmldom::Document *) 0 ;
  boost::intrusive_ptr< kmldom::Document > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Document > **)&jarg1;
  arg1 = (kmldom::Document *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Folder_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Folder > arg1 ;
  boost::intrusive_ptr< kmldom::Folder > *argp1 ;
  boost::intrusive_ptr< kmldom::Container > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Folder > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Folder_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Container > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Container >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Folder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Folder *arg1 = (kmldom::Folder *) 0 ;
  boost::intrusive_ptr< kmldom::Folder > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Folder > **)&jarg1;
  arg1 = (kmldom::Folder *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonBox_1get_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::LatLonBox *arg1 = (kmldom::LatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonBox > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonBox > **)&jarg1;
  arg1 = (kmldom::LatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_rotation();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonBox_1set_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::LatLonBox *arg1 = (kmldom::LatLonBox *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::LatLonBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonBox > **)&jarg1;
  arg1 = (kmldom::LatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_rotation(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonBox_1has_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LatLonBox *arg1 = (kmldom::LatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonBox > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonBox > **)&jarg1;
  arg1 = (kmldom::LatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_rotation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonBox_1clear_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LatLonBox *arg1 = (kmldom::LatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonBox > **)&jarg1;
  arg1 = (kmldom::LatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_rotation();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_LatLonBox_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::LatLonBox > arg1 ;
  boost::intrusive_ptr< kmldom::LatLonBox > *argp1 ;
  boost::intrusive_ptr< kmldom::AbstractLatLonBox > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::LatLonBox > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_LatLonBox_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::AbstractLatLonBox > **)&jresult = result ? new boost::intrusive_ptr< kmldom::AbstractLatLonBox >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1LatLonBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::LatLonBox *arg1 = (kmldom::LatLonBox *) 0 ;
  boost::intrusive_ptr< kmldom::LatLonBox > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LatLonBox > **)&jarg1;
  arg1 = (kmldom::LatLonBox *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxLatLonQuad_1get_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::GxLatLonQuad *arg1 = (kmldom::GxLatLonQuad *) 0 ;
  boost::intrusive_ptr< kmldom::GxLatLonQuad > *smartarg1 = 0 ;
  kmldom::CoordinatesPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxLatLonQuad > **)&jarg1;
  arg1 = (kmldom::GxLatLonQuad *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_coordinates();
  *(kmldom::CoordinatesPtr **)&jresult = result ? new kmldom::CoordinatesPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GxLatLonQuad_1has_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GxLatLonQuad *arg1 = (kmldom::GxLatLonQuad *) 0 ;
  boost::intrusive_ptr< kmldom::GxLatLonQuad > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxLatLonQuad > **)&jarg1;
  arg1 = (kmldom::GxLatLonQuad *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_coordinates();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxLatLonQuad_1set_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::GxLatLonQuad *arg1 = (kmldom::GxLatLonQuad *) 0 ;
  kmldom::CoordinatesPtr *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::GxLatLonQuad > *smartarg1 = 0 ;
  kmldom::CoordinatesPtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxLatLonQuad > **)&jarg1;
  arg1 = (kmldom::GxLatLonQuad *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(kmldom::CoordinatesPtr **)&jarg2 : &tempnull2; 
  (arg1)->set_coordinates((kmldom::CoordinatesPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxLatLonQuad_1clear_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GxLatLonQuad *arg1 = (kmldom::GxLatLonQuad *) 0 ;
  boost::intrusive_ptr< kmldom::GxLatLonQuad > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxLatLonQuad > **)&jarg1;
  arg1 = (kmldom::GxLatLonQuad *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_coordinates();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxLatLonQuad_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::GxLatLonQuad > arg1 ;
  boost::intrusive_ptr< kmldom::GxLatLonQuad > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::GxLatLonQuad > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_GxLatLonQuad_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1GxLatLonQuad(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::GxLatLonQuad *arg1 = (kmldom::GxLatLonQuad *) 0 ;
  boost::intrusive_ptr< kmldom::GxLatLonQuad > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxLatLonQuad > **)&jarg1;
  arg1 = (kmldom::GxLatLonQuad *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1get_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_altitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1set_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_altitude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1has_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_altitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1clear_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_altitude();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1get_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1set_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_altitudemode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1has_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1clear_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_altitudemode();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1get_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_gx_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1has_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1set_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_gx_altitudemode(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1clear_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_altitudemode();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1get_1latlonbox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  kmldom::LatLonBoxPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_latlonbox();
  *(kmldom::LatLonBoxPtr **)&jresult = result ? new kmldom::LatLonBoxPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1set_1latlonbox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  kmldom::LatLonBoxPtr arg2 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  kmldom::LatLonBoxPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::LatLonBoxPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_latlonbox(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1has_1latlonbox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_latlonbox();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1clear_1latlonbox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_latlonbox();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1get_1gx_1latlonquad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  kmldom::GxLatLonQuadPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_gx_latlonquad();
  *(kmldom::GxLatLonQuadPtr **)&jresult = result ? new kmldom::GxLatLonQuadPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1has_1gx_1latlonquad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_latlonquad();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1set_1gx_1latlonquad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  kmldom::GxLatLonQuadPtr arg2 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  kmldom::GxLatLonQuadPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::GxLatLonQuadPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_gx_latlonquad(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1clear_1gx_1latlonquad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_latlonquad();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GroundOverlay_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > arg1 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *argp1 ;
  boost::intrusive_ptr< kmldom::Overlay > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::GroundOverlay > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_GroundOverlay_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Overlay > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Overlay >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1GroundOverlay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::GroundOverlay *arg1 = (kmldom::GroundOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::GroundOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GroundOverlay > **)&jarg1;
  arg1 = (kmldom::GroundOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_HotSpot_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::HotSpot > arg1 ;
  boost::intrusive_ptr< kmldom::HotSpot > *argp1 ;
  boost::intrusive_ptr< kmldom::Vec2 > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::HotSpot > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_HotSpot_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Vec2 > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Vec2 >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1HotSpot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::HotSpot *arg1 = (kmldom::HotSpot *) 0 ;
  boost::intrusive_ptr< kmldom::HotSpot > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::HotSpot > **)&jarg1;
  arg1 = (kmldom::HotSpot *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1get_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_scale();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1set_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_scale(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1has_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_scale();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1clear_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_scale();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1get_1icon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  kmldom::IconStyleIconPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_icon();
  *(kmldom::IconStyleIconPtr **)&jresult = result ? new kmldom::IconStyleIconPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1set_1icon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  kmldom::IconStyleIconPtr arg2 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  kmldom::IconStyleIconPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::IconStyleIconPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_icon(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1has_1icon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_icon();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1clear_1icon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_icon();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1get_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_heading();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1set_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_heading(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1has_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_heading();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1clear_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_heading();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1get_1hotspot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  kmldom::HotSpotPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_hotspot();
  *(kmldom::HotSpotPtr **)&jresult = result ? new kmldom::HotSpotPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1set_1hotspot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  kmldom::HotSpotPtr arg2 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  kmldom::HotSpotPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::HotSpotPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_hotspot(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1has_1hotspot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_hotspot();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1clear_1hotspot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_hotspot();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_IconStyle_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::IconStyle > arg1 ;
  boost::intrusive_ptr< kmldom::IconStyle > *argp1 ;
  boost::intrusive_ptr< kmldom::ColorStyle > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::IconStyle > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_IconStyle_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::ColorStyle > **)&jresult = result ? new boost::intrusive_ptr< kmldom::ColorStyle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1IconStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::IconStyle *arg1 = (kmldom::IconStyle *) 0 ;
  boost::intrusive_ptr< kmldom::IconStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::IconStyle > **)&jarg1;
  arg1 = (kmldom::IconStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1get_1tilesize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_tilesize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1set_1tilesize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_tilesize(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1has_1tilesize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_tilesize();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1clear_1tilesize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_tilesize();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1get_1maxwidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_maxwidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1set_1maxwidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_maxwidth(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1has_1maxwidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_maxwidth();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1clear_1maxwidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_maxwidth();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1get_1maxheight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_maxheight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1set_1maxheight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_maxheight(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1has_1maxheight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_maxheight();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1clear_1maxheight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_maxheight();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1get_1gridorigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_gridorigin();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1set_1gridorigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_gridorigin(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1has_1gridorigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gridorigin();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1clear_1gridorigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gridorigin();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ImagePyramid_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > arg1 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::ImagePyramid > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_ImagePyramid_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1ImagePyramid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::ImagePyramid *arg1 = (kmldom::ImagePyramid *) 0 ;
  boost::intrusive_ptr< kmldom::ImagePyramid > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ImagePyramid > **)&jarg1;
  arg1 = (kmldom::ImagePyramid *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_ItemIcon_1get_1state_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  kmldom::ItemIcon *arg1 = (kmldom::ItemIcon *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::ItemIcon > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ItemIcon > **)&jarg1;
  arg1 = (kmldom::ItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->get_state_array_at(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ItemIcon_1get_1state_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ItemIcon *arg1 = (kmldom::ItemIcon *) 0 ;
  boost::intrusive_ptr< kmldom::ItemIcon > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ItemIcon > **)&jarg1;
  arg1 = (kmldom::ItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_state_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ItemIcon_1has_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ItemIcon *arg1 = (kmldom::ItemIcon *) 0 ;
  boost::intrusive_ptr< kmldom::ItemIcon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ItemIcon > **)&jarg1;
  arg1 = (kmldom::ItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_state();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ItemIcon_1add_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::ItemIcon *arg1 = (kmldom::ItemIcon *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::ItemIcon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ItemIcon > **)&jarg1;
  arg1 = (kmldom::ItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->add_state(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ItemIcon_1clear_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ItemIcon *arg1 = (kmldom::ItemIcon *) 0 ;
  boost::intrusive_ptr< kmldom::ItemIcon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ItemIcon > **)&jarg1;
  arg1 = (kmldom::ItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_state();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_ItemIcon_1get_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::ItemIcon *arg1 = (kmldom::ItemIcon *) 0 ;
  boost::intrusive_ptr< kmldom::ItemIcon > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ItemIcon > **)&jarg1;
  arg1 = (kmldom::ItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_href();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ItemIcon_1set_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::ItemIcon *arg1 = (kmldom::ItemIcon *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::ItemIcon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ItemIcon > **)&jarg1;
  arg1 = (kmldom::ItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_href((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ItemIcon_1has_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ItemIcon *arg1 = (kmldom::ItemIcon *) 0 ;
  boost::intrusive_ptr< kmldom::ItemIcon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ItemIcon > **)&jarg1;
  arg1 = (kmldom::ItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_href();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ItemIcon_1clear_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ItemIcon *arg1 = (kmldom::ItemIcon *) 0 ;
  boost::intrusive_ptr< kmldom::ItemIcon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ItemIcon > **)&jarg1;
  arg1 = (kmldom::ItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_href();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ItemIcon_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::ItemIcon > arg1 ;
  boost::intrusive_ptr< kmldom::ItemIcon > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::ItemIcon > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_ItemIcon_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1ItemIcon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::ItemIcon *arg1 = (kmldom::ItemIcon *) 0 ;
  boost::intrusive_ptr< kmldom::ItemIcon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ItemIcon > **)&jarg1;
  arg1 = (kmldom::ItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_LabelStyle_1get_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::LabelStyle *arg1 = (kmldom::LabelStyle *) 0 ;
  boost::intrusive_ptr< kmldom::LabelStyle > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LabelStyle > **)&jarg1;
  arg1 = (kmldom::LabelStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_scale();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LabelStyle_1set_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::LabelStyle *arg1 = (kmldom::LabelStyle *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::LabelStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LabelStyle > **)&jarg1;
  arg1 = (kmldom::LabelStyle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_scale(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LabelStyle_1has_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LabelStyle *arg1 = (kmldom::LabelStyle *) 0 ;
  boost::intrusive_ptr< kmldom::LabelStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LabelStyle > **)&jarg1;
  arg1 = (kmldom::LabelStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_scale();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LabelStyle_1clear_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LabelStyle *arg1 = (kmldom::LabelStyle *) 0 ;
  boost::intrusive_ptr< kmldom::LabelStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LabelStyle > **)&jarg1;
  arg1 = (kmldom::LabelStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_scale();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_LabelStyle_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::LabelStyle > arg1 ;
  boost::intrusive_ptr< kmldom::LabelStyle > *argp1 ;
  boost::intrusive_ptr< kmldom::ColorStyle > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::LabelStyle > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_LabelStyle_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::ColorStyle > **)&jresult = result ? new boost::intrusive_ptr< kmldom::ColorStyle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1LabelStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::LabelStyle *arg1 = (kmldom::LabelStyle *) 0 ;
  boost::intrusive_ptr< kmldom::LabelStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LabelStyle > **)&jarg1;
  arg1 = (kmldom::LabelStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1get_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->get_extrude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1set_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_extrude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1has_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_extrude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1clear_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_extrude();
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1get_1tessellate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->get_tessellate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1set_1tessellate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_tessellate(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1has_1tessellate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_tessellate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1clear_1tessellate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_tessellate();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1get_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1set_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_altitudemode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1has_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1clear_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_altitudemode();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1get_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_gx_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1has_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1set_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_gx_altitudemode(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1clear_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_altitudemode();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1get_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  kmldom::CoordinatesPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_coordinates();
  *(kmldom::CoordinatesPtr **)&jresult = result ? new kmldom::CoordinatesPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1set_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  kmldom::CoordinatesPtr arg2 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  kmldom::CoordinatesPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::CoordinatesPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_coordinates(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1has_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_coordinates();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1clear_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_coordinates();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_LineString_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::LineString > arg1 ;
  boost::intrusive_ptr< kmldom::LineString > *argp1 ;
  boost::intrusive_ptr< kmldom::Geometry > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::LineString > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_LineString_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Geometry > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Geometry >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1LineString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::LineString *arg1 = (kmldom::LineString *) 0 ;
  boost::intrusive_ptr< kmldom::LineString > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineString > **)&jarg1;
  arg1 = (kmldom::LineString *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_LineStyle_1get_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::LineStyle *arg1 = (kmldom::LineStyle *) 0 ;
  boost::intrusive_ptr< kmldom::LineStyle > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineStyle > **)&jarg1;
  arg1 = (kmldom::LineStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_width();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LineStyle_1set_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::LineStyle *arg1 = (kmldom::LineStyle *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::LineStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineStyle > **)&jarg1;
  arg1 = (kmldom::LineStyle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_width(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LineStyle_1has_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LineStyle *arg1 = (kmldom::LineStyle *) 0 ;
  boost::intrusive_ptr< kmldom::LineStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineStyle > **)&jarg1;
  arg1 = (kmldom::LineStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_width();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LineStyle_1clear_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LineStyle *arg1 = (kmldom::LineStyle *) 0 ;
  boost::intrusive_ptr< kmldom::LineStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineStyle > **)&jarg1;
  arg1 = (kmldom::LineStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_width();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_LineStyle_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::LineStyle > arg1 ;
  boost::intrusive_ptr< kmldom::LineStyle > *argp1 ;
  boost::intrusive_ptr< kmldom::ColorStyle > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::LineStyle > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_LineStyle_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::ColorStyle > **)&jresult = result ? new boost::intrusive_ptr< kmldom::ColorStyle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1LineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::LineStyle *arg1 = (kmldom::LineStyle *) 0 ;
  boost::intrusive_ptr< kmldom::LineStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LineStyle > **)&jarg1;
  arg1 = (kmldom::LineStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1get_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->get_extrude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1set_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_extrude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1has_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_extrude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1clear_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_extrude();
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1get_1tessellate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->get_tessellate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1set_1tessellate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_tessellate(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1has_1tessellate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_tessellate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1clear_1tessellate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_tessellate();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1get_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1set_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_altitudemode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1has_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1clear_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_altitudemode();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1get_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_gx_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1has_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1set_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_gx_altitudemode(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1clear_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_altitudemode();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1get_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  kmldom::CoordinatesPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_coordinates();
  *(kmldom::CoordinatesPtr **)&jresult = result ? new kmldom::CoordinatesPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1set_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  kmldom::CoordinatesPtr arg2 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  kmldom::CoordinatesPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::CoordinatesPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_coordinates(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1has_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_coordinates();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1clear_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_coordinates();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_LinearRing_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > arg1 ;
  boost::intrusive_ptr< kmldom::LinearRing > *argp1 ;
  boost::intrusive_ptr< kmldom::Geometry > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::LinearRing > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_LinearRing_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Geometry > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Geometry >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1LinearRing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::LinearRing *arg1 = (kmldom::LinearRing *) 0 ;
  boost::intrusive_ptr< kmldom::LinearRing > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LinearRing > **)&jarg1;
  arg1 = (kmldom::LinearRing *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1get_1refreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_refreshmode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1set_1refreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_refreshmode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1has_1refreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_refreshmode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1clear_1refreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_refreshmode();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1get_1refreshinterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_refreshinterval();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1set_1refreshinterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_refreshinterval(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1has_1refreshinterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_refreshinterval();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1clear_1refreshinterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_refreshinterval();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1get_1viewrefreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_viewrefreshmode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1set_1viewrefreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_viewrefreshmode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1has_1viewrefreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_viewrefreshmode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1clear_1viewrefreshmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_viewrefreshmode();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1get_1viewrefreshtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_viewrefreshtime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1set_1viewrefreshtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_viewrefreshtime(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1has_1viewrefreshtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_viewrefreshtime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1clear_1viewrefreshtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_viewrefreshtime();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1get_1viewboundscale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_viewboundscale();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1set_1viewboundscale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_viewboundscale(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1has_1viewboundscale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_viewboundscale();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1clear_1viewboundscale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_viewboundscale();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1get_1viewformat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_viewformat();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1set_1viewformat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_viewformat((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1has_1viewformat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_viewformat();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1clear_1viewformat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_viewformat();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1get_1httpquery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_httpquery();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1set_1httpquery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_httpquery((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1has_1httpquery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_httpquery();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1clear_1httpquery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_httpquery();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Link_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Link > arg1 ;
  boost::intrusive_ptr< kmldom::Link > *argp1 ;
  boost::intrusive_ptr< kmldom::BasicLink > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Link > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Link_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::BasicLink > **)&jresult = result ? new boost::intrusive_ptr< kmldom::BasicLink >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Link(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Link *arg1 = (kmldom::Link *) 0 ;
  boost::intrusive_ptr< kmldom::Link > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Link > **)&jarg1;
  arg1 = (kmldom::Link *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_ListStyle_1get_1listitemtype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::ListStyle *arg1 = (kmldom::ListStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ListStyle > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ListStyle > **)&jarg1;
  arg1 = (kmldom::ListStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_listitemtype();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ListStyle_1set_1listitemtype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::ListStyle *arg1 = (kmldom::ListStyle *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::ListStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ListStyle > **)&jarg1;
  arg1 = (kmldom::ListStyle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_listitemtype(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ListStyle_1has_1listitemtype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ListStyle *arg1 = (kmldom::ListStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ListStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ListStyle > **)&jarg1;
  arg1 = (kmldom::ListStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_listitemtype();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ListStyle_1clear_1listitemtype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ListStyle *arg1 = (kmldom::ListStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ListStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ListStyle > **)&jarg1;
  arg1 = (kmldom::ListStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_listitemtype();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ListStyle_1get_1bgcolor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ListStyle *arg1 = (kmldom::ListStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ListStyle > *smartarg1 = 0 ;
  kmlbase::Color32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ListStyle > **)&jarg1;
  arg1 = (kmldom::ListStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (kmlbase::Color32 *) &(arg1)->get_bgcolor();
  *(kmlbase::Color32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ListStyle_1set_1bgcolor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::ListStyle *arg1 = (kmldom::ListStyle *) 0 ;
  kmlbase::Color32 *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::ListStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ListStyle > **)&jarg1;
  arg1 = (kmldom::ListStyle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(kmlbase::Color32 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kmlbase::Color32 const & reference is null");
    return ;
  } 
  (arg1)->set_bgcolor((kmlbase::Color32 const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ListStyle_1has_1bgcolor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ListStyle *arg1 = (kmldom::ListStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ListStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ListStyle > **)&jarg1;
  arg1 = (kmldom::ListStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_bgcolor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ListStyle_1clear_1bgcolor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ListStyle *arg1 = (kmldom::ListStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ListStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ListStyle > **)&jarg1;
  arg1 = (kmldom::ListStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_bgcolor();
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ListStyle_1add_1itemicon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::ListStyle *arg1 = (kmldom::ListStyle *) 0 ;
  kmldom::ItemIconPtr arg2 ;
  boost::intrusive_ptr< kmldom::ListStyle > *smartarg1 = 0 ;
  kmldom::ItemIconPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ListStyle > **)&jarg1;
  arg1 = (kmldom::ListStyle *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::ItemIconPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_itemicon(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ListStyle_1get_1itemicon_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ListStyle *arg1 = (kmldom::ListStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ListStyle > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ListStyle > **)&jarg1;
  arg1 = (kmldom::ListStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_itemicon_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ListStyle_1get_1itemicon_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::ListStyle *arg1 = (kmldom::ListStyle *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::ListStyle > *smartarg1 = 0 ;
  kmldom::ItemIconPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ListStyle > **)&jarg1;
  arg1 = (kmldom::ListStyle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_itemicon_array_at(arg2);
  *(kmldom::ItemIconPtr **)&jresult = result ? new kmldom::ItemIconPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ListStyle_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::ListStyle > arg1 ;
  boost::intrusive_ptr< kmldom::ListStyle > *argp1 ;
  boost::intrusive_ptr< kmldom::SubStyle > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::ListStyle > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_ListStyle_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::SubStyle > **)&jresult = result ? new boost::intrusive_ptr< kmldom::SubStyle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1ListStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::ListStyle *arg1 = (kmldom::ListStyle *) 0 ;
  boost::intrusive_ptr< kmldom::ListStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ListStyle > **)&jarg1;
  arg1 = (kmldom::ListStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Location_1get_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Location *arg1 = (kmldom::Location *) 0 ;
  boost::intrusive_ptr< kmldom::Location > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Location > **)&jarg1;
  arg1 = (kmldom::Location *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_longitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Location_1set_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Location *arg1 = (kmldom::Location *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Location > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Location > **)&jarg1;
  arg1 = (kmldom::Location *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_longitude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Location_1has_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Location *arg1 = (kmldom::Location *) 0 ;
  boost::intrusive_ptr< kmldom::Location > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Location > **)&jarg1;
  arg1 = (kmldom::Location *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_longitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Location_1clear_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Location *arg1 = (kmldom::Location *) 0 ;
  boost::intrusive_ptr< kmldom::Location > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Location > **)&jarg1;
  arg1 = (kmldom::Location *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_longitude();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Location_1get_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Location *arg1 = (kmldom::Location *) 0 ;
  boost::intrusive_ptr< kmldom::Location > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Location > **)&jarg1;
  arg1 = (kmldom::Location *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_latitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Location_1set_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Location *arg1 = (kmldom::Location *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Location > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Location > **)&jarg1;
  arg1 = (kmldom::Location *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_latitude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Location_1has_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Location *arg1 = (kmldom::Location *) 0 ;
  boost::intrusive_ptr< kmldom::Location > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Location > **)&jarg1;
  arg1 = (kmldom::Location *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_latitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Location_1clear_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Location *arg1 = (kmldom::Location *) 0 ;
  boost::intrusive_ptr< kmldom::Location > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Location > **)&jarg1;
  arg1 = (kmldom::Location *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_latitude();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Location_1get_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Location *arg1 = (kmldom::Location *) 0 ;
  boost::intrusive_ptr< kmldom::Location > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Location > **)&jarg1;
  arg1 = (kmldom::Location *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_altitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Location_1set_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Location *arg1 = (kmldom::Location *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Location > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Location > **)&jarg1;
  arg1 = (kmldom::Location *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_altitude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Location_1has_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Location *arg1 = (kmldom::Location *) 0 ;
  boost::intrusive_ptr< kmldom::Location > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Location > **)&jarg1;
  arg1 = (kmldom::Location *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_altitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Location_1clear_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Location *arg1 = (kmldom::Location *) 0 ;
  boost::intrusive_ptr< kmldom::Location > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Location > **)&jarg1;
  arg1 = (kmldom::Location *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_altitude();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Location_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Location > arg1 ;
  boost::intrusive_ptr< kmldom::Location > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Location > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Location_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Location(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Location *arg1 = (kmldom::Location *) 0 ;
  boost::intrusive_ptr< kmldom::Location > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Location > **)&jarg1;
  arg1 = (kmldom::Location *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1get_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_longitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1set_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_longitude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1has_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_longitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1clear_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_longitude();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1get_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_latitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1set_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_latitude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1has_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_latitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1clear_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_latitude();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1get_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_altitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1set_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_altitude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1has_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_altitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1clear_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_altitude();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1get_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_heading();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1set_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_heading(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1has_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_heading();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1clear_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_heading();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1get_1tilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_tilt();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1set_1tilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_tilt(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1has_1tilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_tilt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1clear_1tilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_tilt();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1get_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_range();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1set_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_range(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1has_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_range();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1clear_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_range();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1get_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1set_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_altitudemode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1has_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1clear_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_altitudemode();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1get_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_gx_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1has_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1set_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_gx_altitudemode(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1clear_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_altitudemode();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_LookAt_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::LookAt > arg1 ;
  boost::intrusive_ptr< kmldom::LookAt > *argp1 ;
  boost::intrusive_ptr< kmldom::AbstractView > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::LookAt > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_LookAt_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::AbstractView > **)&jresult = result ? new boost::intrusive_ptr< kmldom::AbstractView >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1LookAt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::LookAt *arg1 = (kmldom::LookAt *) 0 ;
  boost::intrusive_ptr< kmldom::LookAt > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::LookAt > **)&jarg1;
  arg1 = (kmldom::LookAt *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Orientation_1get_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Orientation *arg1 = (kmldom::Orientation *) 0 ;
  boost::intrusive_ptr< kmldom::Orientation > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Orientation > **)&jarg1;
  arg1 = (kmldom::Orientation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_heading();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Orientation_1set_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Orientation *arg1 = (kmldom::Orientation *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Orientation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Orientation > **)&jarg1;
  arg1 = (kmldom::Orientation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_heading(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Orientation_1has_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Orientation *arg1 = (kmldom::Orientation *) 0 ;
  boost::intrusive_ptr< kmldom::Orientation > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Orientation > **)&jarg1;
  arg1 = (kmldom::Orientation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_heading();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Orientation_1clear_1heading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Orientation *arg1 = (kmldom::Orientation *) 0 ;
  boost::intrusive_ptr< kmldom::Orientation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Orientation > **)&jarg1;
  arg1 = (kmldom::Orientation *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_heading();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Orientation_1get_1tilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Orientation *arg1 = (kmldom::Orientation *) 0 ;
  boost::intrusive_ptr< kmldom::Orientation > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Orientation > **)&jarg1;
  arg1 = (kmldom::Orientation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_tilt();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Orientation_1set_1tilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Orientation *arg1 = (kmldom::Orientation *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Orientation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Orientation > **)&jarg1;
  arg1 = (kmldom::Orientation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_tilt(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Orientation_1has_1tilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Orientation *arg1 = (kmldom::Orientation *) 0 ;
  boost::intrusive_ptr< kmldom::Orientation > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Orientation > **)&jarg1;
  arg1 = (kmldom::Orientation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_tilt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Orientation_1clear_1tilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Orientation *arg1 = (kmldom::Orientation *) 0 ;
  boost::intrusive_ptr< kmldom::Orientation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Orientation > **)&jarg1;
  arg1 = (kmldom::Orientation *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_tilt();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Orientation_1get_1roll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Orientation *arg1 = (kmldom::Orientation *) 0 ;
  boost::intrusive_ptr< kmldom::Orientation > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Orientation > **)&jarg1;
  arg1 = (kmldom::Orientation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_roll();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Orientation_1set_1roll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Orientation *arg1 = (kmldom::Orientation *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Orientation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Orientation > **)&jarg1;
  arg1 = (kmldom::Orientation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_roll(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Orientation_1has_1roll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Orientation *arg1 = (kmldom::Orientation *) 0 ;
  boost::intrusive_ptr< kmldom::Orientation > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Orientation > **)&jarg1;
  arg1 = (kmldom::Orientation *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_roll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Orientation_1clear_1roll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Orientation *arg1 = (kmldom::Orientation *) 0 ;
  boost::intrusive_ptr< kmldom::Orientation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Orientation > **)&jarg1;
  arg1 = (kmldom::Orientation *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_roll();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Orientation_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Orientation > arg1 ;
  boost::intrusive_ptr< kmldom::Orientation > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Orientation > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Orientation_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Orientation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Orientation *arg1 = (kmldom::Orientation *) 0 ;
  boost::intrusive_ptr< kmldom::Orientation > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Orientation > **)&jarg1;
  arg1 = (kmldom::Orientation *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Scale_1get_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Scale *arg1 = (kmldom::Scale *) 0 ;
  boost::intrusive_ptr< kmldom::Scale > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Scale > **)&jarg1;
  arg1 = (kmldom::Scale *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Scale_1set_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Scale *arg1 = (kmldom::Scale *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Scale > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Scale > **)&jarg1;
  arg1 = (kmldom::Scale *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_x(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Scale_1has_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Scale *arg1 = (kmldom::Scale *) 0 ;
  boost::intrusive_ptr< kmldom::Scale > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Scale > **)&jarg1;
  arg1 = (kmldom::Scale *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_x();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Scale_1clear_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Scale *arg1 = (kmldom::Scale *) 0 ;
  boost::intrusive_ptr< kmldom::Scale > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Scale > **)&jarg1;
  arg1 = (kmldom::Scale *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_x();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Scale_1get_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Scale *arg1 = (kmldom::Scale *) 0 ;
  boost::intrusive_ptr< kmldom::Scale > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Scale > **)&jarg1;
  arg1 = (kmldom::Scale *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Scale_1set_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Scale *arg1 = (kmldom::Scale *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Scale > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Scale > **)&jarg1;
  arg1 = (kmldom::Scale *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_y(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Scale_1has_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Scale *arg1 = (kmldom::Scale *) 0 ;
  boost::intrusive_ptr< kmldom::Scale > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Scale > **)&jarg1;
  arg1 = (kmldom::Scale *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_y();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Scale_1clear_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Scale *arg1 = (kmldom::Scale *) 0 ;
  boost::intrusive_ptr< kmldom::Scale > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Scale > **)&jarg1;
  arg1 = (kmldom::Scale *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_y();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_Scale_1get_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::Scale *arg1 = (kmldom::Scale *) 0 ;
  boost::intrusive_ptr< kmldom::Scale > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Scale > **)&jarg1;
  arg1 = (kmldom::Scale *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Scale_1set_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::Scale *arg1 = (kmldom::Scale *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::Scale > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Scale > **)&jarg1;
  arg1 = (kmldom::Scale *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_z(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Scale_1has_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Scale *arg1 = (kmldom::Scale *) 0 ;
  boost::intrusive_ptr< kmldom::Scale > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Scale > **)&jarg1;
  arg1 = (kmldom::Scale *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_z();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Scale_1clear_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Scale *arg1 = (kmldom::Scale *) 0 ;
  boost::intrusive_ptr< kmldom::Scale > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Scale > **)&jarg1;
  arg1 = (kmldom::Scale *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_z();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Scale_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Scale > arg1 ;
  boost::intrusive_ptr< kmldom::Scale > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Scale > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Scale_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Scale(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Scale *arg1 = (kmldom::Scale *) 0 ;
  boost::intrusive_ptr< kmldom::Scale > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Scale > **)&jarg1;
  arg1 = (kmldom::Scale *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Alias_1get_1targethref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Alias *arg1 = (kmldom::Alias *) 0 ;
  boost::intrusive_ptr< kmldom::Alias > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Alias > **)&jarg1;
  arg1 = (kmldom::Alias *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_targethref();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Alias_1set_1targethref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Alias *arg1 = (kmldom::Alias *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Alias > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Alias > **)&jarg1;
  arg1 = (kmldom::Alias *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_targethref((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Alias_1has_1targethref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Alias *arg1 = (kmldom::Alias *) 0 ;
  boost::intrusive_ptr< kmldom::Alias > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Alias > **)&jarg1;
  arg1 = (kmldom::Alias *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_targethref();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Alias_1clear_1targethref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Alias *arg1 = (kmldom::Alias *) 0 ;
  boost::intrusive_ptr< kmldom::Alias > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Alias > **)&jarg1;
  arg1 = (kmldom::Alias *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_targethref();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Alias_1get_1sourcehref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Alias *arg1 = (kmldom::Alias *) 0 ;
  boost::intrusive_ptr< kmldom::Alias > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Alias > **)&jarg1;
  arg1 = (kmldom::Alias *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_sourcehref();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Alias_1set_1sourcehref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Alias *arg1 = (kmldom::Alias *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Alias > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Alias > **)&jarg1;
  arg1 = (kmldom::Alias *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_sourcehref((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Alias_1has_1sourcehref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Alias *arg1 = (kmldom::Alias *) 0 ;
  boost::intrusive_ptr< kmldom::Alias > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Alias > **)&jarg1;
  arg1 = (kmldom::Alias *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_sourcehref();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Alias_1clear_1sourcehref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Alias *arg1 = (kmldom::Alias *) 0 ;
  boost::intrusive_ptr< kmldom::Alias > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Alias > **)&jarg1;
  arg1 = (kmldom::Alias *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_sourcehref();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Alias_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Alias > arg1 ;
  boost::intrusive_ptr< kmldom::Alias > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Alias > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Alias_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Alias(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Alias *arg1 = (kmldom::Alias *) 0 ;
  boost::intrusive_ptr< kmldom::Alias > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Alias > **)&jarg1;
  arg1 = (kmldom::Alias *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ResourceMap_1add_1alias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::ResourceMap *arg1 = (kmldom::ResourceMap *) 0 ;
  kmldom::AliasPtr arg2 ;
  boost::intrusive_ptr< kmldom::ResourceMap > *smartarg1 = 0 ;
  kmldom::AliasPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ResourceMap > **)&jarg1;
  arg1 = (kmldom::ResourceMap *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::AliasPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_alias(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ResourceMap_1get_1alias_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ResourceMap *arg1 = (kmldom::ResourceMap *) 0 ;
  boost::intrusive_ptr< kmldom::ResourceMap > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ResourceMap > **)&jarg1;
  arg1 = (kmldom::ResourceMap *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_alias_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ResourceMap_1get_1alias_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::ResourceMap *arg1 = (kmldom::ResourceMap *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::ResourceMap > *smartarg1 = 0 ;
  kmldom::AliasPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ResourceMap > **)&jarg1;
  arg1 = (kmldom::ResourceMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_alias_array_at(arg2);
  *(kmldom::AliasPtr **)&jresult = result ? new kmldom::AliasPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ResourceMap_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::ResourceMap > arg1 ;
  boost::intrusive_ptr< kmldom::ResourceMap > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::ResourceMap > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_ResourceMap_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1ResourceMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::ResourceMap *arg1 = (kmldom::ResourceMap *) 0 ;
  boost::intrusive_ptr< kmldom::ResourceMap > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ResourceMap > **)&jarg1;
  arg1 = (kmldom::ResourceMap *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1get_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1set_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_altitudemode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1has_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1clear_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_altitudemode();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1get_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_gx_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1has_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1set_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_gx_altitudemode(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1clear_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_altitudemode();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1get_1location(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  kmldom::LocationPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_location();
  *(kmldom::LocationPtr **)&jresult = result ? new kmldom::LocationPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1set_1location(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  kmldom::LocationPtr arg2 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  kmldom::LocationPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::LocationPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_location(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1has_1location(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_location();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1clear_1location(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_location();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1get_1orientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  kmldom::OrientationPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_orientation();
  *(kmldom::OrientationPtr **)&jresult = result ? new kmldom::OrientationPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1set_1orientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  kmldom::OrientationPtr arg2 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  kmldom::OrientationPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::OrientationPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_orientation(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1has_1orientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_orientation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1clear_1orientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_orientation();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1get_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  kmldom::ScalePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_scale();
  *(kmldom::ScalePtr **)&jresult = result ? new kmldom::ScalePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1set_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  kmldom::ScalePtr arg2 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  kmldom::ScalePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::ScalePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_scale(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1has_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_scale();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1clear_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_scale();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1get_1link(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  kmldom::LinkPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_link();
  *(kmldom::LinkPtr **)&jresult = result ? new kmldom::LinkPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1set_1link(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  kmldom::LinkPtr arg2 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  kmldom::LinkPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::LinkPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_link(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1has_1link(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_link();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1clear_1link(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_link();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1get_1resourcemap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  kmldom::ResourceMapPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_resourcemap();
  *(kmldom::ResourceMapPtr **)&jresult = result ? new kmldom::ResourceMapPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1set_1resourcemap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  kmldom::ResourceMapPtr arg2 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  kmldom::ResourceMapPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::ResourceMapPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_resourcemap(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1has_1resourcemap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_resourcemap();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1clear_1resourcemap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_resourcemap();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Model_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Model > arg1 ;
  boost::intrusive_ptr< kmldom::Model > *argp1 ;
  boost::intrusive_ptr< kmldom::Geometry > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Model > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Model_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Geometry > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Geometry >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Model(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Model *arg1 = (kmldom::Model *) 0 ;
  boost::intrusive_ptr< kmldom::Model > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Model > **)&jarg1;
  arg1 = (kmldom::Model *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_MultiGeometry_1add_1geometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::MultiGeometry *arg1 = (kmldom::MultiGeometry *) 0 ;
  kmldom::GeometryPtr arg2 ;
  boost::intrusive_ptr< kmldom::MultiGeometry > *smartarg1 = 0 ;
  kmldom::GeometryPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::MultiGeometry > **)&jarg1;
  arg1 = (kmldom::MultiGeometry *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::GeometryPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_geometry(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_MultiGeometry_1get_1geometry_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::MultiGeometry *arg1 = (kmldom::MultiGeometry *) 0 ;
  boost::intrusive_ptr< kmldom::MultiGeometry > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::MultiGeometry > **)&jarg1;
  arg1 = (kmldom::MultiGeometry *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_geometry_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_MultiGeometry_1get_1geometry_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::MultiGeometry *arg1 = (kmldom::MultiGeometry *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::MultiGeometry > *smartarg1 = 0 ;
  kmldom::GeometryPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::MultiGeometry > **)&jarg1;
  arg1 = (kmldom::MultiGeometry *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_geometry_array_at(arg2);
  *(kmldom::GeometryPtr **)&jresult = result ? new kmldom::GeometryPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_MultiGeometry_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::MultiGeometry > arg1 ;
  boost::intrusive_ptr< kmldom::MultiGeometry > *argp1 ;
  boost::intrusive_ptr< kmldom::Geometry > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::MultiGeometry > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_MultiGeometry_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Geometry > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Geometry >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1MultiGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::MultiGeometry *arg1 = (kmldom::MultiGeometry *) 0 ;
  boost::intrusive_ptr< kmldom::MultiGeometry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::MultiGeometry > **)&jarg1;
  arg1 = (kmldom::MultiGeometry *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLink_1get_1refreshvisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLink *arg1 = (kmldom::NetworkLink *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLink > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLink > **)&jarg1;
  arg1 = (kmldom::NetworkLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->get_refreshvisibility();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLink_1set_1refreshvisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kmldom::NetworkLink *arg1 = (kmldom::NetworkLink *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr< kmldom::NetworkLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLink > **)&jarg1;
  arg1 = (kmldom::NetworkLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_refreshvisibility(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLink_1has_1refreshvisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLink *arg1 = (kmldom::NetworkLink *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLink > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLink > **)&jarg1;
  arg1 = (kmldom::NetworkLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_refreshvisibility();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLink_1clear_1refreshvisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::NetworkLink *arg1 = (kmldom::NetworkLink *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLink > **)&jarg1;
  arg1 = (kmldom::NetworkLink *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_refreshvisibility();
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLink_1get_1flytoview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLink *arg1 = (kmldom::NetworkLink *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLink > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLink > **)&jarg1;
  arg1 = (kmldom::NetworkLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->get_flytoview();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLink_1set_1flytoview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kmldom::NetworkLink *arg1 = (kmldom::NetworkLink *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr< kmldom::NetworkLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLink > **)&jarg1;
  arg1 = (kmldom::NetworkLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_flytoview(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLink_1has_1flytoview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLink *arg1 = (kmldom::NetworkLink *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLink > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLink > **)&jarg1;
  arg1 = (kmldom::NetworkLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_flytoview();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLink_1clear_1flytoview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::NetworkLink *arg1 = (kmldom::NetworkLink *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLink > **)&jarg1;
  arg1 = (kmldom::NetworkLink *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_flytoview();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLink_1get_1link(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::NetworkLink *arg1 = (kmldom::NetworkLink *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLink > *smartarg1 = 0 ;
  kmldom::LinkPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLink > **)&jarg1;
  arg1 = (kmldom::NetworkLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_link();
  *(kmldom::LinkPtr **)&jresult = result ? new kmldom::LinkPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLink_1set_1link(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::NetworkLink *arg1 = (kmldom::NetworkLink *) 0 ;
  kmldom::LinkPtr arg2 ;
  boost::intrusive_ptr< kmldom::NetworkLink > *smartarg1 = 0 ;
  kmldom::LinkPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLink > **)&jarg1;
  arg1 = (kmldom::NetworkLink *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::LinkPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_link(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLink_1has_1link(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLink *arg1 = (kmldom::NetworkLink *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLink > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLink > **)&jarg1;
  arg1 = (kmldom::NetworkLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_link();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLink_1clear_1link(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::NetworkLink *arg1 = (kmldom::NetworkLink *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLink > **)&jarg1;
  arg1 = (kmldom::NetworkLink *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_link();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLink_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::NetworkLink > arg1 ;
  boost::intrusive_ptr< kmldom::NetworkLink > *argp1 ;
  boost::intrusive_ptr< kmldom::Feature > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::NetworkLink > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_NetworkLink_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Feature > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Feature >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1NetworkLink(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::NetworkLink *arg1 = (kmldom::NetworkLink *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLink > **)&jarg1;
  arg1 = (kmldom::NetworkLink *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Update_1get_1targethref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Update *arg1 = (kmldom::Update *) 0 ;
  boost::intrusive_ptr< kmldom::Update > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Update > **)&jarg1;
  arg1 = (kmldom::Update *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_targethref();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Update_1has_1targethref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Update *arg1 = (kmldom::Update *) 0 ;
  boost::intrusive_ptr< kmldom::Update > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Update > **)&jarg1;
  arg1 = (kmldom::Update *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_targethref();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Update_1set_1targethref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Update *arg1 = (kmldom::Update *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Update > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Update > **)&jarg1;
  arg1 = (kmldom::Update *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_targethref((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Update_1clear_1targethref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Update *arg1 = (kmldom::Update *) 0 ;
  boost::intrusive_ptr< kmldom::Update > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Update > **)&jarg1;
  arg1 = (kmldom::Update *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_targethref();
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Update_1add_1updateoperation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Update *arg1 = (kmldom::Update *) 0 ;
  kmldom::UpdateOperationPtr arg2 ;
  boost::intrusive_ptr< kmldom::Update > *smartarg1 = 0 ;
  kmldom::UpdateOperationPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Update > **)&jarg1;
  arg1 = (kmldom::Update *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::UpdateOperationPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_updateoperation(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Update_1get_1updateoperation_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Update *arg1 = (kmldom::Update *) 0 ;
  boost::intrusive_ptr< kmldom::Update > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Update > **)&jarg1;
  arg1 = (kmldom::Update *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_updateoperation_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Update_1get_1updateoperation_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::Update *arg1 = (kmldom::Update *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::Update > *smartarg1 = 0 ;
  kmldom::UpdateOperationPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Update > **)&jarg1;
  arg1 = (kmldom::Update *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_updateoperation_array_at(arg2);
  *(kmldom::UpdateOperationPtr **)&jresult = result ? new kmldom::UpdateOperationPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Update_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Update > arg1 ;
  boost::intrusive_ptr< kmldom::Update > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Update > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Update_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Update(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Update *arg1 = (kmldom::Update *) 0 ;
  boost::intrusive_ptr< kmldom::Update > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Update > **)&jarg1;
  arg1 = (kmldom::Update *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1get_1minrefreshperiod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_minrefreshperiod();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1set_1minrefreshperiod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_minrefreshperiod(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1has_1minrefreshperiod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_minrefreshperiod();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1clear_1minrefreshperiod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_minrefreshperiod();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1get_1maxsessionlength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_maxsessionlength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1set_1maxsessionlength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_maxsessionlength(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1has_1maxsessionlength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_maxsessionlength();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1clear_1maxsessionlength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_maxsessionlength();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1get_1cookie(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_cookie();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1set_1cookie(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_cookie((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1has_1cookie(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_cookie();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1clear_1cookie(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_cookie();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1get_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_message();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1set_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_message((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1has_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_message();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1clear_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_message();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1get_1linkname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_linkname();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1set_1linkname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_linkname((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1has_1linkname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_linkname();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1clear_1linkname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_linkname();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1get_1linkdescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_linkdescription();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1set_1linkdescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_linkdescription((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1has_1linkdescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_linkdescription();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1clear_1linkdescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_linkdescription();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1get_1linksnippet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  kmldom::LinkSnippetPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_linksnippet();
  *(kmldom::LinkSnippetPtr **)&jresult = result ? new kmldom::LinkSnippetPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1set_1linksnippet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  kmldom::LinkSnippetPtr arg2 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  kmldom::LinkSnippetPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::LinkSnippetPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_linksnippet(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1has_1linksnippet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_linksnippet();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1clear_1linksnippet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_linksnippet();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1get_1expires(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_expires();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1set_1expires(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_expires((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1has_1expires(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_expires();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1clear_1expires(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_expires();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1get_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  kmldom::UpdatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_update();
  *(kmldom::UpdatePtr **)&jresult = result ? new kmldom::UpdatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1set_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  kmldom::UpdatePtr arg2 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  kmldom::UpdatePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::UpdatePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_update(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1has_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_update();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1clear_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_update();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1get_1abstractview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  kmldom::AbstractViewPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_abstractview();
  *(kmldom::AbstractViewPtr **)&jresult = result ? new kmldom::AbstractViewPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1set_1abstractview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  kmldom::AbstractViewPtr arg2 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  kmldom::AbstractViewPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::AbstractViewPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_abstractview(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1has_1abstractview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_abstractview();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1clear_1abstractview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_abstractview();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_NetworkLinkControl_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > arg1 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::NetworkLinkControl > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_NetworkLinkControl_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1NetworkLinkControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::NetworkLinkControl *arg1 = (kmldom::NetworkLinkControl *) 0 ;
  boost::intrusive_ptr< kmldom::NetworkLinkControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::NetworkLinkControl > **)&jarg1;
  arg1 = (kmldom::NetworkLinkControl *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Pair_1get_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Pair *arg1 = (kmldom::Pair *) 0 ;
  boost::intrusive_ptr< kmldom::Pair > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Pair > **)&jarg1;
  arg1 = (kmldom::Pair *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_key();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Pair_1set_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Pair *arg1 = (kmldom::Pair *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Pair > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Pair > **)&jarg1;
  arg1 = (kmldom::Pair *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_key(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Pair_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Pair *arg1 = (kmldom::Pair *) 0 ;
  boost::intrusive_ptr< kmldom::Pair > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Pair > **)&jarg1;
  arg1 = (kmldom::Pair *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_key();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Pair_1clear_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Pair *arg1 = (kmldom::Pair *) 0 ;
  boost::intrusive_ptr< kmldom::Pair > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Pair > **)&jarg1;
  arg1 = (kmldom::Pair *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_key();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Pair_1get_1styleurl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Pair *arg1 = (kmldom::Pair *) 0 ;
  boost::intrusive_ptr< kmldom::Pair > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Pair > **)&jarg1;
  arg1 = (kmldom::Pair *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_styleurl();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Pair_1set_1styleurl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Pair *arg1 = (kmldom::Pair *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Pair > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Pair > **)&jarg1;
  arg1 = (kmldom::Pair *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_styleurl((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Pair_1has_1styleurl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Pair *arg1 = (kmldom::Pair *) 0 ;
  boost::intrusive_ptr< kmldom::Pair > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Pair > **)&jarg1;
  arg1 = (kmldom::Pair *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_styleurl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Pair_1clear_1styleurl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Pair *arg1 = (kmldom::Pair *) 0 ;
  boost::intrusive_ptr< kmldom::Pair > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Pair > **)&jarg1;
  arg1 = (kmldom::Pair *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_styleurl();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Pair_1get_1styleselector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Pair *arg1 = (kmldom::Pair *) 0 ;
  boost::intrusive_ptr< kmldom::Pair > *smartarg1 = 0 ;
  kmldom::StyleSelectorPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Pair > **)&jarg1;
  arg1 = (kmldom::Pair *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_styleselector();
  *(kmldom::StyleSelectorPtr **)&jresult = result ? new kmldom::StyleSelectorPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Pair_1set_1styleselector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Pair *arg1 = (kmldom::Pair *) 0 ;
  kmldom::StyleSelectorPtr arg2 ;
  boost::intrusive_ptr< kmldom::Pair > *smartarg1 = 0 ;
  kmldom::StyleSelectorPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Pair > **)&jarg1;
  arg1 = (kmldom::Pair *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::StyleSelectorPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_styleselector(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Pair_1has_1styleselector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Pair *arg1 = (kmldom::Pair *) 0 ;
  boost::intrusive_ptr< kmldom::Pair > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Pair > **)&jarg1;
  arg1 = (kmldom::Pair *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_styleselector();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Pair_1clear_1styleselector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Pair *arg1 = (kmldom::Pair *) 0 ;
  boost::intrusive_ptr< kmldom::Pair > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Pair > **)&jarg1;
  arg1 = (kmldom::Pair *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_styleselector();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Pair_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Pair > arg1 ;
  boost::intrusive_ptr< kmldom::Pair > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Pair > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Pair_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Pair *arg1 = (kmldom::Pair *) 0 ;
  boost::intrusive_ptr< kmldom::Pair > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Pair > **)&jarg1;
  arg1 = (kmldom::Pair *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1get_1leftfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_leftfov();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1set_1leftfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_leftfov(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1has_1leftfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_leftfov();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1clear_1leftfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_leftfov();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1get_1rightfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_rightfov();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1set_1rightfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_rightfov(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1has_1rightfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_rightfov();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1clear_1rightfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_rightfov();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1get_1bottomfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_bottomfov();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1set_1bottomfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_bottomfov(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1has_1bottomfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_bottomfov();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1clear_1bottomfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_bottomfov();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1get_1topfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_topfov();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1set_1topfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_topfov(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1has_1topfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_topfov();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1clear_1topfov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_topfov();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1get_1near(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_near();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1set_1near(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_near(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1has_1near(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_near();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1clear_1near(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_near();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ViewVolume_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > arg1 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::ViewVolume > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_ViewVolume_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1ViewVolume(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::ViewVolume *arg1 = (kmldom::ViewVolume *) 0 ;
  boost::intrusive_ptr< kmldom::ViewVolume > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ViewVolume > **)&jarg1;
  arg1 = (kmldom::ViewVolume *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1get_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->get_extrude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1set_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_extrude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1has_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_extrude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1clear_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_extrude();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1get_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1set_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_altitudemode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1has_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1clear_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_altitudemode();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1get_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_gx_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1has_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1set_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_gx_altitudemode(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1clear_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_altitudemode();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1get_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  kmldom::CoordinatesPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_coordinates();
  *(kmldom::CoordinatesPtr **)&jresult = result ? new kmldom::CoordinatesPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1set_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  kmldom::CoordinatesPtr arg2 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  kmldom::CoordinatesPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::CoordinatesPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_coordinates(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1has_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_coordinates();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1clear_1coordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_coordinates();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Point_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Point > arg1 ;
  boost::intrusive_ptr< kmldom::Point > *argp1 ;
  boost::intrusive_ptr< kmldom::Geometry > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Point > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Point_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Geometry > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Geometry >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Point(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Point *arg1 = (kmldom::Point *) 0 ;
  boost::intrusive_ptr< kmldom::Point > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Point > **)&jarg1;
  arg1 = (kmldom::Point *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1get_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_rotation();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1set_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_rotation(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1has_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_rotation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1clear_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_rotation();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1get_1viewvolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  kmldom::ViewVolumePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_viewvolume();
  *(kmldom::ViewVolumePtr **)&jresult = result ? new kmldom::ViewVolumePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1set_1viewvolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  kmldom::ViewVolumePtr arg2 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  kmldom::ViewVolumePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::ViewVolumePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_viewvolume(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1has_1viewvolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_viewvolume();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1clear_1viewvolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_viewvolume();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1get_1imagepyramid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  kmldom::ImagePyramidPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_imagepyramid();
  *(kmldom::ImagePyramidPtr **)&jresult = result ? new kmldom::ImagePyramidPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1set_1imagepyramid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  kmldom::ImagePyramidPtr arg2 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  kmldom::ImagePyramidPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::ImagePyramidPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_imagepyramid(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1has_1imagepyramid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_imagepyramid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1clear_1imagepyramid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_imagepyramid();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1get_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  kmldom::PointPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_point();
  *(kmldom::PointPtr **)&jresult = result ? new kmldom::PointPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1set_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  kmldom::PointPtr arg2 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  kmldom::PointPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::PointPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_point(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1has_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_point();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1clear_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_point();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1get_1shape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_shape();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1has_1shape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_shape();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1set_1shape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_shape(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1clear_1shape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_shape();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_PhotoOverlay_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > arg1 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *argp1 ;
  boost::intrusive_ptr< kmldom::Overlay > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::PhotoOverlay > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_PhotoOverlay_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Overlay > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Overlay >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1PhotoOverlay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::PhotoOverlay *arg1 = (kmldom::PhotoOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::PhotoOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PhotoOverlay > **)&jarg1;
  arg1 = (kmldom::PhotoOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Placemark_1get_1geometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Placemark *arg1 = (kmldom::Placemark *) 0 ;
  boost::intrusive_ptr< kmldom::Placemark > *smartarg1 = 0 ;
  kmldom::GeometryPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Placemark > **)&jarg1;
  arg1 = (kmldom::Placemark *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_geometry();
  *(kmldom::GeometryPtr **)&jresult = result ? new kmldom::GeometryPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Placemark_1set_1geometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Placemark *arg1 = (kmldom::Placemark *) 0 ;
  kmldom::GeometryPtr arg2 ;
  boost::intrusive_ptr< kmldom::Placemark > *smartarg1 = 0 ;
  kmldom::GeometryPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Placemark > **)&jarg1;
  arg1 = (kmldom::Placemark *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::GeometryPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_geometry(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Placemark_1has_1geometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Placemark *arg1 = (kmldom::Placemark *) 0 ;
  boost::intrusive_ptr< kmldom::Placemark > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Placemark > **)&jarg1;
  arg1 = (kmldom::Placemark *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_geometry();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Placemark_1clear_1geometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Placemark *arg1 = (kmldom::Placemark *) 0 ;
  boost::intrusive_ptr< kmldom::Placemark > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Placemark > **)&jarg1;
  arg1 = (kmldom::Placemark *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_geometry();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Placemark_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Placemark > arg1 ;
  boost::intrusive_ptr< kmldom::Placemark > *argp1 ;
  boost::intrusive_ptr< kmldom::Feature > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Placemark > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Placemark_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Feature > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Feature >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Placemark(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Placemark *arg1 = (kmldom::Placemark *) 0 ;
  boost::intrusive_ptr< kmldom::Placemark > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Placemark > **)&jarg1;
  arg1 = (kmldom::Placemark *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_PolyStyle_1get_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::PolyStyle *arg1 = (kmldom::PolyStyle *) 0 ;
  boost::intrusive_ptr< kmldom::PolyStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PolyStyle > **)&jarg1;
  arg1 = (kmldom::PolyStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->get_fill();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_PolyStyle_1set_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kmldom::PolyStyle *arg1 = (kmldom::PolyStyle *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr< kmldom::PolyStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PolyStyle > **)&jarg1;
  arg1 = (kmldom::PolyStyle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_fill(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_PolyStyle_1has_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::PolyStyle *arg1 = (kmldom::PolyStyle *) 0 ;
  boost::intrusive_ptr< kmldom::PolyStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PolyStyle > **)&jarg1;
  arg1 = (kmldom::PolyStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_fill();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_PolyStyle_1clear_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::PolyStyle *arg1 = (kmldom::PolyStyle *) 0 ;
  boost::intrusive_ptr< kmldom::PolyStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PolyStyle > **)&jarg1;
  arg1 = (kmldom::PolyStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_fill();
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_PolyStyle_1get_1outline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::PolyStyle *arg1 = (kmldom::PolyStyle *) 0 ;
  boost::intrusive_ptr< kmldom::PolyStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PolyStyle > **)&jarg1;
  arg1 = (kmldom::PolyStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->get_outline();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_PolyStyle_1set_1outline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kmldom::PolyStyle *arg1 = (kmldom::PolyStyle *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr< kmldom::PolyStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PolyStyle > **)&jarg1;
  arg1 = (kmldom::PolyStyle *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_outline(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_PolyStyle_1has_1outline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::PolyStyle *arg1 = (kmldom::PolyStyle *) 0 ;
  boost::intrusive_ptr< kmldom::PolyStyle > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PolyStyle > **)&jarg1;
  arg1 = (kmldom::PolyStyle *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_outline();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_PolyStyle_1clear_1outline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::PolyStyle *arg1 = (kmldom::PolyStyle *) 0 ;
  boost::intrusive_ptr< kmldom::PolyStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PolyStyle > **)&jarg1;
  arg1 = (kmldom::PolyStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_outline();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_PolyStyle_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::PolyStyle > arg1 ;
  boost::intrusive_ptr< kmldom::PolyStyle > *argp1 ;
  boost::intrusive_ptr< kmldom::ColorStyle > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::PolyStyle > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_PolyStyle_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::ColorStyle > **)&jresult = result ? new boost::intrusive_ptr< kmldom::ColorStyle >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1PolyStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::PolyStyle *arg1 = (kmldom::PolyStyle *) 0 ;
  boost::intrusive_ptr< kmldom::PolyStyle > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::PolyStyle > **)&jarg1;
  arg1 = (kmldom::PolyStyle *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_OuterBoundaryIs_1get_1linearring(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::OuterBoundaryIs *arg1 = (kmldom::OuterBoundaryIs *) 0 ;
  boost::intrusive_ptr< kmldom::OuterBoundaryIs > *smartarg1 = 0 ;
  kmldom::LinearRingPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::OuterBoundaryIs > **)&jarg1;
  arg1 = (kmldom::OuterBoundaryIs *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_linearring();
  *(kmldom::LinearRingPtr **)&jresult = result ? new kmldom::LinearRingPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_OuterBoundaryIs_1set_1linearring(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::OuterBoundaryIs *arg1 = (kmldom::OuterBoundaryIs *) 0 ;
  kmldom::LinearRingPtr arg2 ;
  boost::intrusive_ptr< kmldom::OuterBoundaryIs > *smartarg1 = 0 ;
  kmldom::LinearRingPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::OuterBoundaryIs > **)&jarg1;
  arg1 = (kmldom::OuterBoundaryIs *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::LinearRingPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_linearring(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_OuterBoundaryIs_1has_1linearring(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::OuterBoundaryIs *arg1 = (kmldom::OuterBoundaryIs *) 0 ;
  boost::intrusive_ptr< kmldom::OuterBoundaryIs > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::OuterBoundaryIs > **)&jarg1;
  arg1 = (kmldom::OuterBoundaryIs *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_linearring();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_OuterBoundaryIs_1clear_1linearring(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::OuterBoundaryIs *arg1 = (kmldom::OuterBoundaryIs *) 0 ;
  boost::intrusive_ptr< kmldom::OuterBoundaryIs > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::OuterBoundaryIs > **)&jarg1;
  arg1 = (kmldom::OuterBoundaryIs *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_linearring();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_OuterBoundaryIs_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::OuterBoundaryIs > arg1 ;
  boost::intrusive_ptr< kmldom::OuterBoundaryIs > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::OuterBoundaryIs > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_OuterBoundaryIs_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1OuterBoundaryIs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::OuterBoundaryIs *arg1 = (kmldom::OuterBoundaryIs *) 0 ;
  boost::intrusive_ptr< kmldom::OuterBoundaryIs > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::OuterBoundaryIs > **)&jarg1;
  arg1 = (kmldom::OuterBoundaryIs *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_InnerBoundaryIs_1get_1linearring(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::InnerBoundaryIs *arg1 = (kmldom::InnerBoundaryIs *) 0 ;
  boost::intrusive_ptr< kmldom::InnerBoundaryIs > *smartarg1 = 0 ;
  kmldom::LinearRingPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::InnerBoundaryIs > **)&jarg1;
  arg1 = (kmldom::InnerBoundaryIs *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_linearring();
  *(kmldom::LinearRingPtr **)&jresult = result ? new kmldom::LinearRingPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_InnerBoundaryIs_1set_1linearring(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::InnerBoundaryIs *arg1 = (kmldom::InnerBoundaryIs *) 0 ;
  kmldom::LinearRingPtr arg2 ;
  boost::intrusive_ptr< kmldom::InnerBoundaryIs > *smartarg1 = 0 ;
  kmldom::LinearRingPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::InnerBoundaryIs > **)&jarg1;
  arg1 = (kmldom::InnerBoundaryIs *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::LinearRingPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_linearring(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_InnerBoundaryIs_1has_1linearring(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::InnerBoundaryIs *arg1 = (kmldom::InnerBoundaryIs *) 0 ;
  boost::intrusive_ptr< kmldom::InnerBoundaryIs > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::InnerBoundaryIs > **)&jarg1;
  arg1 = (kmldom::InnerBoundaryIs *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_linearring();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_InnerBoundaryIs_1clear_1linearring(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::InnerBoundaryIs *arg1 = (kmldom::InnerBoundaryIs *) 0 ;
  boost::intrusive_ptr< kmldom::InnerBoundaryIs > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::InnerBoundaryIs > **)&jarg1;
  arg1 = (kmldom::InnerBoundaryIs *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_linearring();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_InnerBoundaryIs_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::InnerBoundaryIs > arg1 ;
  boost::intrusive_ptr< kmldom::InnerBoundaryIs > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::InnerBoundaryIs > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_InnerBoundaryIs_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1InnerBoundaryIs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::InnerBoundaryIs *arg1 = (kmldom::InnerBoundaryIs *) 0 ;
  boost::intrusive_ptr< kmldom::InnerBoundaryIs > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::InnerBoundaryIs > **)&jarg1;
  arg1 = (kmldom::InnerBoundaryIs *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1get_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->get_extrude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1set_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_extrude(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1has_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_extrude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1clear_1extrude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_extrude();
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1get_1tessellate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->get_tessellate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1set_1tessellate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  bool arg2 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_tessellate(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1has_1tessellate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_tessellate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1clear_1tessellate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_tessellate();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1get_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1set_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_altitudemode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1has_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1clear_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_altitudemode();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1get_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_gx_altitudemode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1has_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_altitudemode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1set_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_gx_altitudemode(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1clear_1gx_1altitudemode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_altitudemode();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1get_1outerboundaryis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  kmldom::OuterBoundaryIsPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_outerboundaryis();
  *(kmldom::OuterBoundaryIsPtr **)&jresult = result ? new kmldom::OuterBoundaryIsPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1set_1outerboundaryis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  kmldom::OuterBoundaryIsPtr arg2 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  kmldom::OuterBoundaryIsPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::OuterBoundaryIsPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_outerboundaryis(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1has_1outerboundaryis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_outerboundaryis();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1clear_1outerboundaryis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_outerboundaryis();
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1add_1innerboundaryis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  kmldom::InnerBoundaryIsPtr arg2 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  kmldom::InnerBoundaryIsPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::InnerBoundaryIsPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_innerboundaryis(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1get_1innerboundaryis_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_innerboundaryis_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1get_1innerboundaryis_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  kmldom::InnerBoundaryIsPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_innerboundaryis_array_at(arg2);
  *(kmldom::InnerBoundaryIsPtr **)&jresult = result ? new kmldom::InnerBoundaryIsPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Polygon_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Polygon > arg1 ;
  boost::intrusive_ptr< kmldom::Polygon > *argp1 ;
  boost::intrusive_ptr< kmldom::Geometry > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Polygon > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Polygon_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Geometry > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Geometry >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Polygon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Polygon *arg1 = (kmldom::Polygon *) 0 ;
  boost::intrusive_ptr< kmldom::Polygon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Polygon > **)&jarg1;
  arg1 = (kmldom::Polygon *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleData_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::SimpleData *arg1 = (kmldom::SimpleData *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleData > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleData > **)&jarg1;
  arg1 = (kmldom::SimpleData *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleData_1has_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::SimpleData *arg1 = (kmldom::SimpleData *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleData > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleData > **)&jarg1;
  arg1 = (kmldom::SimpleData *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_name();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleData_1set_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::SimpleData *arg1 = (kmldom::SimpleData *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::SimpleData > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleData > **)&jarg1;
  arg1 = (kmldom::SimpleData *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_name((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleData_1clear_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::SimpleData *arg1 = (kmldom::SimpleData *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleData > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleData > **)&jarg1;
  arg1 = (kmldom::SimpleData *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_name();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleData_1get_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::SimpleData *arg1 = (kmldom::SimpleData *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleData > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleData > **)&jarg1;
  arg1 = (kmldom::SimpleData *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_text();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleData_1has_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::SimpleData *arg1 = (kmldom::SimpleData *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleData > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleData > **)&jarg1;
  arg1 = (kmldom::SimpleData *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_text();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleData_1set_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::SimpleData *arg1 = (kmldom::SimpleData *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::SimpleData > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleData > **)&jarg1;
  arg1 = (kmldom::SimpleData *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_text((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleData_1clear_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::SimpleData *arg1 = (kmldom::SimpleData *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleData > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleData > **)&jarg1;
  arg1 = (kmldom::SimpleData *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_text();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SimpleData_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::SimpleData > arg1 ;
  boost::intrusive_ptr< kmldom::SimpleData > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::SimpleData > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_SimpleData_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1SimpleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::SimpleData *arg1 = (kmldom::SimpleData *) 0 ;
  boost::intrusive_ptr< kmldom::SimpleData > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SimpleData > **)&jarg1;
  arg1 = (kmldom::SimpleData *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_SchemaData_1get_1schemaurl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::SchemaData *arg1 = (kmldom::SchemaData *) 0 ;
  boost::intrusive_ptr< kmldom::SchemaData > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SchemaData > **)&jarg1;
  arg1 = (kmldom::SchemaData *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_schemaurl();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_SchemaData_1has_1schemaurl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::SchemaData *arg1 = (kmldom::SchemaData *) 0 ;
  boost::intrusive_ptr< kmldom::SchemaData > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SchemaData > **)&jarg1;
  arg1 = (kmldom::SchemaData *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_schemaurl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SchemaData_1set_1schemaurl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::SchemaData *arg1 = (kmldom::SchemaData *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::SchemaData > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SchemaData > **)&jarg1;
  arg1 = (kmldom::SchemaData *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_schemaurl((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SchemaData_1clear_1schemaurl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::SchemaData *arg1 = (kmldom::SchemaData *) 0 ;
  boost::intrusive_ptr< kmldom::SchemaData > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SchemaData > **)&jarg1;
  arg1 = (kmldom::SchemaData *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_schemaurl();
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_SchemaData_1add_1simpledata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::SchemaData *arg1 = (kmldom::SchemaData *) 0 ;
  kmldom::SimpleDataPtr arg2 ;
  boost::intrusive_ptr< kmldom::SchemaData > *smartarg1 = 0 ;
  kmldom::SimpleDataPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SchemaData > **)&jarg1;
  arg1 = (kmldom::SchemaData *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::SimpleDataPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_simpledata(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SchemaData_1get_1simpledata_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::SchemaData *arg1 = (kmldom::SchemaData *) 0 ;
  boost::intrusive_ptr< kmldom::SchemaData > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SchemaData > **)&jarg1;
  arg1 = (kmldom::SchemaData *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_simpledata_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SchemaData_1get_1simpledata_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::SchemaData *arg1 = (kmldom::SchemaData *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::SchemaData > *smartarg1 = 0 ;
  kmldom::SimpleDataPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SchemaData > **)&jarg1;
  arg1 = (kmldom::SchemaData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_simpledata_array_at(arg2);
  *(kmldom::SimpleDataPtr **)&jresult = result ? new kmldom::SimpleDataPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SchemaData_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::SchemaData > arg1 ;
  boost::intrusive_ptr< kmldom::SchemaData > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::SchemaData > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_SchemaData_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1SchemaData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::SchemaData *arg1 = (kmldom::SchemaData *) 0 ;
  boost::intrusive_ptr< kmldom::SchemaData > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::SchemaData > **)&jarg1;
  arg1 = (kmldom::SchemaData *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_OverlayXY_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::OverlayXY > arg1 ;
  boost::intrusive_ptr< kmldom::OverlayXY > *argp1 ;
  boost::intrusive_ptr< kmldom::Vec2 > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::OverlayXY > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_OverlayXY_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Vec2 > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Vec2 >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1OverlayXY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::OverlayXY *arg1 = (kmldom::OverlayXY *) 0 ;
  boost::intrusive_ptr< kmldom::OverlayXY > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::OverlayXY > **)&jarg1;
  arg1 = (kmldom::OverlayXY *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenXY_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::ScreenXY > arg1 ;
  boost::intrusive_ptr< kmldom::ScreenXY > *argp1 ;
  boost::intrusive_ptr< kmldom::Vec2 > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::ScreenXY > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_ScreenXY_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Vec2 > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Vec2 >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1ScreenXY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::ScreenXY *arg1 = (kmldom::ScreenXY *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenXY > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenXY > **)&jarg1;
  arg1 = (kmldom::ScreenXY *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_RotationXY_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::RotationXY > arg1 ;
  boost::intrusive_ptr< kmldom::RotationXY > *argp1 ;
  boost::intrusive_ptr< kmldom::Vec2 > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::RotationXY > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_RotationXY_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Vec2 > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Vec2 >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1RotationXY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::RotationXY *arg1 = (kmldom::RotationXY *) 0 ;
  boost::intrusive_ptr< kmldom::RotationXY > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::RotationXY > **)&jarg1;
  arg1 = (kmldom::RotationXY *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Size_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Size > arg1 ;
  boost::intrusive_ptr< kmldom::Size > *argp1 ;
  boost::intrusive_ptr< kmldom::Vec2 > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Size > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Size_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Vec2 > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Vec2 >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Size(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Size *arg1 = (kmldom::Size *) 0 ;
  boost::intrusive_ptr< kmldom::Size > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Size > **)&jarg1;
  arg1 = (kmldom::Size *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1get_1overlayxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  kmldom::OverlayXYPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_overlayxy();
  *(kmldom::OverlayXYPtr **)&jresult = result ? new kmldom::OverlayXYPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1set_1overlayxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  kmldom::OverlayXYPtr arg2 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  kmldom::OverlayXYPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::OverlayXYPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_overlayxy(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1has_1overlayxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_overlayxy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1clear_1overlayxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_overlayxy();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1get_1screenxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  kmldom::ScreenXYPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_screenxy();
  *(kmldom::ScreenXYPtr **)&jresult = result ? new kmldom::ScreenXYPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1set_1screenxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  kmldom::ScreenXYPtr arg2 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  kmldom::ScreenXYPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::ScreenXYPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_screenxy(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1has_1screenxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_screenxy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1clear_1screenxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_screenxy();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1get_1rotationxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  kmldom::RotationXYPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_rotationxy();
  *(kmldom::RotationXYPtr **)&jresult = result ? new kmldom::RotationXYPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1set_1rotationxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  kmldom::RotationXYPtr arg2 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  kmldom::RotationXYPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::RotationXYPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_rotationxy(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1has_1rotationxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_rotationxy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1clear_1rotationxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_rotationxy();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1get_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  kmldom::SizePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_size();
  *(kmldom::SizePtr **)&jresult = result ? new kmldom::SizePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1set_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  kmldom::SizePtr arg2 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  kmldom::SizePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::SizePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_size(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1has_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_size();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1clear_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_size();
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1get_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_rotation();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1set_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_rotation(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1has_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_rotation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1clear_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_rotation();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ScreenOverlay_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > arg1 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *argp1 ;
  boost::intrusive_ptr< kmldom::Overlay > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::ScreenOverlay > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_ScreenOverlay_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Overlay > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Overlay >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1ScreenOverlay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::ScreenOverlay *arg1 = (kmldom::ScreenOverlay *) 0 ;
  boost::intrusive_ptr< kmldom::ScreenOverlay > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::ScreenOverlay > **)&jarg1;
  arg1 = (kmldom::ScreenOverlay *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1get_1iconstyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  kmldom::IconStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_iconstyle();
  *(kmldom::IconStylePtr **)&jresult = result ? new kmldom::IconStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1set_1iconstyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  kmldom::IconStylePtr arg2 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  kmldom::IconStylePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::IconStylePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_iconstyle(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1has_1iconstyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_iconstyle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1clear_1iconstyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_iconstyle();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1get_1labelstyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  kmldom::LabelStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_labelstyle();
  *(kmldom::LabelStylePtr **)&jresult = result ? new kmldom::LabelStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1set_1labelstyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  kmldom::LabelStylePtr arg2 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  kmldom::LabelStylePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::LabelStylePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_labelstyle(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1has_1labelstyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_labelstyle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1clear_1labelstyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_labelstyle();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1get_1linestyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  kmldom::LineStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_linestyle();
  *(kmldom::LineStylePtr **)&jresult = result ? new kmldom::LineStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1set_1linestyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  kmldom::LineStylePtr arg2 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  kmldom::LineStylePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::LineStylePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_linestyle(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1has_1linestyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_linestyle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1clear_1linestyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_linestyle();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1get_1polystyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  kmldom::PolyStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_polystyle();
  *(kmldom::PolyStylePtr **)&jresult = result ? new kmldom::PolyStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1set_1polystyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  kmldom::PolyStylePtr arg2 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  kmldom::PolyStylePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::PolyStylePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_polystyle(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1has_1polystyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_polystyle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1clear_1polystyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_polystyle();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1get_1balloonstyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  kmldom::BalloonStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_balloonstyle();
  *(kmldom::BalloonStylePtr **)&jresult = result ? new kmldom::BalloonStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1set_1balloonstyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  kmldom::BalloonStylePtr arg2 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  kmldom::BalloonStylePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::BalloonStylePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_balloonstyle(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1has_1balloonstyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_balloonstyle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1clear_1balloonstyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_balloonstyle();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1get_1liststyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  kmldom::ListStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_liststyle();
  *(kmldom::ListStylePtr **)&jresult = result ? new kmldom::ListStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1set_1liststyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  kmldom::ListStylePtr arg2 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  kmldom::ListStylePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::ListStylePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_liststyle(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1has_1liststyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_liststyle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1clear_1liststyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_liststyle();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Style_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Style > arg1 ;
  boost::intrusive_ptr< kmldom::Style > *argp1 ;
  boost::intrusive_ptr< kmldom::StyleSelector > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Style > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Style_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::StyleSelector > **)&jresult = result ? new boost::intrusive_ptr< kmldom::StyleSelector >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Style(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Style *arg1 = (kmldom::Style *) 0 ;
  boost::intrusive_ptr< kmldom::Style > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Style > **)&jarg1;
  arg1 = (kmldom::Style *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_StyleMap_1add_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::StyleMap *arg1 = (kmldom::StyleMap *) 0 ;
  kmldom::PairPtr arg2 ;
  boost::intrusive_ptr< kmldom::StyleMap > *smartarg1 = 0 ;
  kmldom::PairPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::StyleMap > **)&jarg1;
  arg1 = (kmldom::StyleMap *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::PairPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_pair(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_StyleMap_1get_1pair_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::StyleMap *arg1 = (kmldom::StyleMap *) 0 ;
  boost::intrusive_ptr< kmldom::StyleMap > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::StyleMap > **)&jarg1;
  arg1 = (kmldom::StyleMap *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_pair_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_StyleMap_1get_1pair_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::StyleMap *arg1 = (kmldom::StyleMap *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::StyleMap > *smartarg1 = 0 ;
  kmldom::PairPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::StyleMap > **)&jarg1;
  arg1 = (kmldom::StyleMap *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_pair_array_at(arg2);
  *(kmldom::PairPtr **)&jresult = result ? new kmldom::PairPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_StyleMap_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::StyleMap > arg1 ;
  boost::intrusive_ptr< kmldom::StyleMap > *argp1 ;
  boost::intrusive_ptr< kmldom::StyleSelector > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::StyleMap > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_StyleMap_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::StyleSelector > **)&jresult = result ? new boost::intrusive_ptr< kmldom::StyleSelector >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1StyleMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::StyleMap *arg1 = (kmldom::StyleMap *) 0 ;
  boost::intrusive_ptr< kmldom::StyleMap > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::StyleMap > **)&jarg1;
  arg1 = (kmldom::StyleMap *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_TimeSpan_1get_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::TimeSpan *arg1 = (kmldom::TimeSpan *) 0 ;
  boost::intrusive_ptr< kmldom::TimeSpan > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimeSpan > **)&jarg1;
  arg1 = (kmldom::TimeSpan *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_begin();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_TimeSpan_1set_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::TimeSpan *arg1 = (kmldom::TimeSpan *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::TimeSpan > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimeSpan > **)&jarg1;
  arg1 = (kmldom::TimeSpan *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_begin((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_TimeSpan_1has_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::TimeSpan *arg1 = (kmldom::TimeSpan *) 0 ;
  boost::intrusive_ptr< kmldom::TimeSpan > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimeSpan > **)&jarg1;
  arg1 = (kmldom::TimeSpan *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_begin();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_TimeSpan_1clear_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::TimeSpan *arg1 = (kmldom::TimeSpan *) 0 ;
  boost::intrusive_ptr< kmldom::TimeSpan > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimeSpan > **)&jarg1;
  arg1 = (kmldom::TimeSpan *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_begin();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_TimeSpan_1get_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::TimeSpan *arg1 = (kmldom::TimeSpan *) 0 ;
  boost::intrusive_ptr< kmldom::TimeSpan > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimeSpan > **)&jarg1;
  arg1 = (kmldom::TimeSpan *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_end();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_TimeSpan_1set_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::TimeSpan *arg1 = (kmldom::TimeSpan *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::TimeSpan > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimeSpan > **)&jarg1;
  arg1 = (kmldom::TimeSpan *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_end((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_TimeSpan_1has_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::TimeSpan *arg1 = (kmldom::TimeSpan *) 0 ;
  boost::intrusive_ptr< kmldom::TimeSpan > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimeSpan > **)&jarg1;
  arg1 = (kmldom::TimeSpan *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_end();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_TimeSpan_1clear_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::TimeSpan *arg1 = (kmldom::TimeSpan *) 0 ;
  boost::intrusive_ptr< kmldom::TimeSpan > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimeSpan > **)&jarg1;
  arg1 = (kmldom::TimeSpan *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_end();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_TimeSpan_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::TimeSpan > arg1 ;
  boost::intrusive_ptr< kmldom::TimeSpan > *argp1 ;
  boost::intrusive_ptr< kmldom::TimePrimitive > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::TimeSpan > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_TimeSpan_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::TimePrimitive > **)&jresult = result ? new boost::intrusive_ptr< kmldom::TimePrimitive >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1TimeSpan(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::TimeSpan *arg1 = (kmldom::TimeSpan *) 0 ;
  boost::intrusive_ptr< kmldom::TimeSpan > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimeSpan > **)&jarg1;
  arg1 = (kmldom::TimeSpan *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxTimeSpan_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::GxTimeSpan > arg1 ;
  boost::intrusive_ptr< kmldom::GxTimeSpan > *argp1 ;
  boost::intrusive_ptr< kmldom::TimeSpan > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::GxTimeSpan > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_GxTimeSpan_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::TimeSpan > **)&jresult = result ? new boost::intrusive_ptr< kmldom::TimeSpan >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1GxTimeSpan(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::GxTimeSpan *arg1 = (kmldom::GxTimeSpan *) 0 ;
  boost::intrusive_ptr< kmldom::GxTimeSpan > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxTimeSpan > **)&jarg1;
  arg1 = (kmldom::GxTimeSpan *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_TimeStamp_1get_1when(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::TimeStamp *arg1 = (kmldom::TimeStamp *) 0 ;
  boost::intrusive_ptr< kmldom::TimeStamp > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimeStamp > **)&jarg1;
  arg1 = (kmldom::TimeStamp *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_when();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_TimeStamp_1set_1when(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::TimeStamp *arg1 = (kmldom::TimeStamp *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::TimeStamp > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimeStamp > **)&jarg1;
  arg1 = (kmldom::TimeStamp *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_when((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_TimeStamp_1has_1when(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::TimeStamp *arg1 = (kmldom::TimeStamp *) 0 ;
  boost::intrusive_ptr< kmldom::TimeStamp > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimeStamp > **)&jarg1;
  arg1 = (kmldom::TimeStamp *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_when();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_TimeStamp_1clear_1when(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::TimeStamp *arg1 = (kmldom::TimeStamp *) 0 ;
  boost::intrusive_ptr< kmldom::TimeStamp > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimeStamp > **)&jarg1;
  arg1 = (kmldom::TimeStamp *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_when();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_TimeStamp_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::TimeStamp > arg1 ;
  boost::intrusive_ptr< kmldom::TimeStamp > *argp1 ;
  boost::intrusive_ptr< kmldom::TimePrimitive > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::TimeStamp > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_TimeStamp_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::TimePrimitive > **)&jresult = result ? new boost::intrusive_ptr< kmldom::TimePrimitive >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1TimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::TimeStamp *arg1 = (kmldom::TimeStamp *) 0 ;
  boost::intrusive_ptr< kmldom::TimeStamp > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::TimeStamp > **)&jarg1;
  arg1 = (kmldom::TimeStamp *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxTimeStamp_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::GxTimeStamp > arg1 ;
  boost::intrusive_ptr< kmldom::GxTimeStamp > *argp1 ;
  boost::intrusive_ptr< kmldom::TimeStamp > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::GxTimeStamp > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_GxTimeStamp_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::TimeStamp > **)&jresult = result ? new boost::intrusive_ptr< kmldom::TimeStamp >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1GxTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::GxTimeStamp *arg1 = (kmldom::GxTimeStamp *) 0 ;
  boost::intrusive_ptr< kmldom::GxTimeStamp > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxTimeStamp > **)&jarg1;
  arg1 = (kmldom::GxTimeStamp *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_Kml_1get_1hint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::Kml *arg1 = (kmldom::Kml *) 0 ;
  boost::intrusive_ptr< kmldom::Kml > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Kml > **)&jarg1;
  arg1 = (kmldom::Kml *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_hint();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Kml_1set_1hint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::Kml *arg1 = (kmldom::Kml *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::Kml > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Kml > **)&jarg1;
  arg1 = (kmldom::Kml *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_hint((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Kml_1has_1hint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Kml *arg1 = (kmldom::Kml *) 0 ;
  boost::intrusive_ptr< kmldom::Kml > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Kml > **)&jarg1;
  arg1 = (kmldom::Kml *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_hint();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Kml_1clear_1hint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Kml *arg1 = (kmldom::Kml *) 0 ;
  boost::intrusive_ptr< kmldom::Kml > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Kml > **)&jarg1;
  arg1 = (kmldom::Kml *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_hint();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Kml_1get_1networklinkcontrol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Kml *arg1 = (kmldom::Kml *) 0 ;
  boost::intrusive_ptr< kmldom::Kml > *smartarg1 = 0 ;
  kmldom::NetworkLinkControlPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Kml > **)&jarg1;
  arg1 = (kmldom::Kml *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_networklinkcontrol();
  *(kmldom::NetworkLinkControlPtr **)&jresult = result ? new kmldom::NetworkLinkControlPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Kml_1set_1networklinkcontrol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Kml *arg1 = (kmldom::Kml *) 0 ;
  kmldom::NetworkLinkControlPtr arg2 ;
  boost::intrusive_ptr< kmldom::Kml > *smartarg1 = 0 ;
  kmldom::NetworkLinkControlPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Kml > **)&jarg1;
  arg1 = (kmldom::Kml *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::NetworkLinkControlPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_networklinkcontrol(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Kml_1has_1networklinkcontrol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Kml *arg1 = (kmldom::Kml *) 0 ;
  boost::intrusive_ptr< kmldom::Kml > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Kml > **)&jarg1;
  arg1 = (kmldom::Kml *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_networklinkcontrol();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Kml_1clear_1networklinkcontrol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Kml *arg1 = (kmldom::Kml *) 0 ;
  boost::intrusive_ptr< kmldom::Kml > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Kml > **)&jarg1;
  arg1 = (kmldom::Kml *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_networklinkcontrol();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Kml_1get_1feature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::Kml *arg1 = (kmldom::Kml *) 0 ;
  boost::intrusive_ptr< kmldom::Kml > *smartarg1 = 0 ;
  kmldom::FeaturePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Kml > **)&jarg1;
  arg1 = (kmldom::Kml *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_feature();
  *(kmldom::FeaturePtr **)&jresult = result ? new kmldom::FeaturePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Kml_1set_1feature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::Kml *arg1 = (kmldom::Kml *) 0 ;
  kmldom::FeaturePtr arg2 ;
  boost::intrusive_ptr< kmldom::Kml > *smartarg1 = 0 ;
  kmldom::FeaturePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Kml > **)&jarg1;
  arg1 = (kmldom::Kml *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::FeaturePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_feature(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_Kml_1has_1feature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::Kml *arg1 = (kmldom::Kml *) 0 ;
  boost::intrusive_ptr< kmldom::Kml > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Kml > **)&jarg1;
  arg1 = (kmldom::Kml *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_feature();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_Kml_1clear_1feature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::Kml *arg1 = (kmldom::Kml *) 0 ;
  boost::intrusive_ptr< kmldom::Kml > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Kml > **)&jarg1;
  arg1 = (kmldom::Kml *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_feature();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_Kml_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::Kml > arg1 ;
  boost::intrusive_ptr< kmldom::Kml > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::Kml > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_Kml_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1Kml(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::Kml *arg1 = (kmldom::Kml *) 0 ;
  boost::intrusive_ptr< kmldom::Kml > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::Kml > **)&jarg1;
  arg1 = (kmldom::Kml *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomAuthor_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::AtomAuthor *arg1 = (kmldom::AtomAuthor *) 0 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomAuthor > **)&jarg1;
  arg1 = (kmldom::AtomAuthor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomAuthor_1set_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::AtomAuthor *arg1 = (kmldom::AtomAuthor *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomAuthor > **)&jarg1;
  arg1 = (kmldom::AtomAuthor *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_name((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomAuthor_1has_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::AtomAuthor *arg1 = (kmldom::AtomAuthor *) 0 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomAuthor > **)&jarg1;
  arg1 = (kmldom::AtomAuthor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_name();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomAuthor_1clear_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::AtomAuthor *arg1 = (kmldom::AtomAuthor *) 0 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomAuthor > **)&jarg1;
  arg1 = (kmldom::AtomAuthor *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_name();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomAuthor_1get_1uri(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::AtomAuthor *arg1 = (kmldom::AtomAuthor *) 0 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomAuthor > **)&jarg1;
  arg1 = (kmldom::AtomAuthor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_uri();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomAuthor_1set_1uri(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::AtomAuthor *arg1 = (kmldom::AtomAuthor *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomAuthor > **)&jarg1;
  arg1 = (kmldom::AtomAuthor *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_uri((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomAuthor_1has_1uri(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::AtomAuthor *arg1 = (kmldom::AtomAuthor *) 0 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomAuthor > **)&jarg1;
  arg1 = (kmldom::AtomAuthor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_uri();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomAuthor_1clear_1uri(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::AtomAuthor *arg1 = (kmldom::AtomAuthor *) 0 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomAuthor > **)&jarg1;
  arg1 = (kmldom::AtomAuthor *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_uri();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomAuthor_1get_1email(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::AtomAuthor *arg1 = (kmldom::AtomAuthor *) 0 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomAuthor > **)&jarg1;
  arg1 = (kmldom::AtomAuthor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_email();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomAuthor_1set_1email(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::AtomAuthor *arg1 = (kmldom::AtomAuthor *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomAuthor > **)&jarg1;
  arg1 = (kmldom::AtomAuthor *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_email((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomAuthor_1has_1email(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::AtomAuthor *arg1 = (kmldom::AtomAuthor *) 0 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomAuthor > **)&jarg1;
  arg1 = (kmldom::AtomAuthor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_email();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomAuthor_1clear_1email(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::AtomAuthor *arg1 = (kmldom::AtomAuthor *) 0 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomAuthor > **)&jarg1;
  arg1 = (kmldom::AtomAuthor *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_email();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomAuthor_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > arg1 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::AtomAuthor > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_AtomAuthor_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1AtomAuthor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::AtomAuthor *arg1 = (kmldom::AtomAuthor *) 0 ;
  boost::intrusive_ptr< kmldom::AtomAuthor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomAuthor > **)&jarg1;
  arg1 = (kmldom::AtomAuthor *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1get_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_href();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1has_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_href();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1set_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_href((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1clear_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_href();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1get_1rel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_rel();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1has_1rel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_rel();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1set_1rel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_rel((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1clear_1rel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_rel();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_type();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1has_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_type();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1set_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_type((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1clear_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_type();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1get_1hreflang(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_hreflang();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1has_1hreflang(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_hreflang();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1set_1hreflang(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_hreflang((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1clear_1hreflang(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_hreflang();
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1get_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_title();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1has_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_title();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1set_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_title((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1clear_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_title();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1get_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_length();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1has_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_length();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1set_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_length(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1clear_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_length();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AtomLink_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > arg1 ;
  boost::intrusive_ptr< kmldom::AtomLink > *argp1 ;
  boost::intrusive_ptr< kmldom::Element > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::AtomLink > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_AtomLink_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Element > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1AtomLink(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::AtomLink *arg1 = (kmldom::AtomLink *) 0 ;
  boost::intrusive_ptr< kmldom::AtomLink > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::AtomLink > **)&jarg1;
  arg1 = (kmldom::AtomLink *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxTourPrimitive_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::GxTourPrimitive > arg1 ;
  boost::intrusive_ptr< kmldom::GxTourPrimitive > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::GxTourPrimitive > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_GxTourPrimitive_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1GxTourPrimitive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::GxTourPrimitive *arg1 = (kmldom::GxTourPrimitive *) 0 ;
  boost::intrusive_ptr< kmldom::GxTourPrimitive > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxTourPrimitive > **)&jarg1;
  arg1 = (kmldom::GxTourPrimitive *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxPlaylist_1add_1gx_1tourprimitive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::GxPlaylist *arg1 = (kmldom::GxPlaylist *) 0 ;
  kmldom::GxTourPrimitivePtr arg2 ;
  boost::intrusive_ptr< kmldom::GxPlaylist > *smartarg1 = 0 ;
  kmldom::GxTourPrimitivePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxPlaylist > **)&jarg1;
  arg1 = (kmldom::GxPlaylist *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::GxTourPrimitivePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_gx_tourprimitive(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxPlaylist_1get_1gx_1tourprimitive_1array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::GxPlaylist *arg1 = (kmldom::GxPlaylist *) 0 ;
  boost::intrusive_ptr< kmldom::GxPlaylist > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxPlaylist > **)&jarg1;
  arg1 = (kmldom::GxPlaylist *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_gx_tourprimitive_array_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxPlaylist_1get_1gx_1tourprimitive_1array_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  kmldom::GxPlaylist *arg1 = (kmldom::GxPlaylist *) 0 ;
  unsigned int arg2 ;
  boost::intrusive_ptr< kmldom::GxPlaylist > *smartarg1 = 0 ;
  kmldom::GxTourPrimitivePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxPlaylist > **)&jarg1;
  arg1 = (kmldom::GxPlaylist *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->get_gx_tourprimitive_array_at(arg2);
  *(kmldom::GxTourPrimitivePtr **)&jresult = result ? new kmldom::GxTourPrimitivePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxPlaylist_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::GxPlaylist > arg1 ;
  boost::intrusive_ptr< kmldom::GxPlaylist > *argp1 ;
  boost::intrusive_ptr< kmldom::Object > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::GxPlaylist > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_GxPlaylist_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Object > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Object >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1GxPlaylist(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::GxPlaylist *arg1 = (kmldom::GxPlaylist *) 0 ;
  boost::intrusive_ptr< kmldom::GxPlaylist > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxPlaylist > **)&jarg1;
  arg1 = (kmldom::GxPlaylist *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxTour_1get_1gx_1playlist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::GxTour *arg1 = (kmldom::GxTour *) 0 ;
  boost::intrusive_ptr< kmldom::GxTour > *smartarg1 = 0 ;
  kmldom::GxPlaylistPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxTour > **)&jarg1;
  arg1 = (kmldom::GxTour *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_gx_playlist();
  *(kmldom::GxPlaylistPtr **)&jresult = result ? new kmldom::GxPlaylistPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GxTour_1has_1gx_1playlist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GxTour *arg1 = (kmldom::GxTour *) 0 ;
  boost::intrusive_ptr< kmldom::GxTour > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxTour > **)&jarg1;
  arg1 = (kmldom::GxTour *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_playlist();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxTour_1set_1gx_1playlist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::GxTour *arg1 = (kmldom::GxTour *) 0 ;
  kmldom::GxPlaylistPtr arg2 ;
  boost::intrusive_ptr< kmldom::GxTour > *smartarg1 = 0 ;
  kmldom::GxPlaylistPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxTour > **)&jarg1;
  arg1 = (kmldom::GxTour *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::GxPlaylistPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_gx_playlist(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxTour_1clear_1gx_1playlist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GxTour *arg1 = (kmldom::GxTour *) 0 ;
  boost::intrusive_ptr< kmldom::GxTour > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxTour > **)&jarg1;
  arg1 = (kmldom::GxTour *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_playlist();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxTour_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::GxTour > arg1 ;
  boost::intrusive_ptr< kmldom::GxTour > *argp1 ;
  boost::intrusive_ptr< kmldom::Feature > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::GxTour > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_GxTour_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::Feature > **)&jresult = result ? new boost::intrusive_ptr< kmldom::Feature >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1GxTour(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::GxTour *arg1 = (kmldom::GxTour *) 0 ;
  boost::intrusive_ptr< kmldom::GxTour > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxTour > **)&jarg1;
  arg1 = (kmldom::GxTour *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_GxAnimatedUpdate_1get_1gx_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::GxAnimatedUpdate *arg1 = (kmldom::GxAnimatedUpdate *) 0 ;
  boost::intrusive_ptr< kmldom::GxAnimatedUpdate > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxAnimatedUpdate > **)&jarg1;
  arg1 = (kmldom::GxAnimatedUpdate *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_gx_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GxAnimatedUpdate_1has_1gx_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GxAnimatedUpdate *arg1 = (kmldom::GxAnimatedUpdate *) 0 ;
  boost::intrusive_ptr< kmldom::GxAnimatedUpdate > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxAnimatedUpdate > **)&jarg1;
  arg1 = (kmldom::GxAnimatedUpdate *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_duration();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxAnimatedUpdate_1set_1gx_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::GxAnimatedUpdate *arg1 = (kmldom::GxAnimatedUpdate *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::GxAnimatedUpdate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxAnimatedUpdate > **)&jarg1;
  arg1 = (kmldom::GxAnimatedUpdate *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_gx_duration(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxAnimatedUpdate_1clear_1gx_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GxAnimatedUpdate *arg1 = (kmldom::GxAnimatedUpdate *) 0 ;
  boost::intrusive_ptr< kmldom::GxAnimatedUpdate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxAnimatedUpdate > **)&jarg1;
  arg1 = (kmldom::GxAnimatedUpdate *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_duration();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxAnimatedUpdate_1get_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::GxAnimatedUpdate *arg1 = (kmldom::GxAnimatedUpdate *) 0 ;
  boost::intrusive_ptr< kmldom::GxAnimatedUpdate > *smartarg1 = 0 ;
  kmldom::UpdatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxAnimatedUpdate > **)&jarg1;
  arg1 = (kmldom::GxAnimatedUpdate *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_update();
  *(kmldom::UpdatePtr **)&jresult = result ? new kmldom::UpdatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GxAnimatedUpdate_1has_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GxAnimatedUpdate *arg1 = (kmldom::GxAnimatedUpdate *) 0 ;
  boost::intrusive_ptr< kmldom::GxAnimatedUpdate > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxAnimatedUpdate > **)&jarg1;
  arg1 = (kmldom::GxAnimatedUpdate *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_update();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxAnimatedUpdate_1set_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::GxAnimatedUpdate *arg1 = (kmldom::GxAnimatedUpdate *) 0 ;
  kmldom::UpdatePtr arg2 ;
  boost::intrusive_ptr< kmldom::GxAnimatedUpdate > *smartarg1 = 0 ;
  kmldom::UpdatePtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxAnimatedUpdate > **)&jarg1;
  arg1 = (kmldom::GxAnimatedUpdate *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::UpdatePtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_update(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxAnimatedUpdate_1clear_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GxAnimatedUpdate *arg1 = (kmldom::GxAnimatedUpdate *) 0 ;
  boost::intrusive_ptr< kmldom::GxAnimatedUpdate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxAnimatedUpdate > **)&jarg1;
  arg1 = (kmldom::GxAnimatedUpdate *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_update();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxAnimatedUpdate_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::GxAnimatedUpdate > arg1 ;
  boost::intrusive_ptr< kmldom::GxAnimatedUpdate > *argp1 ;
  boost::intrusive_ptr< kmldom::GxTourPrimitive > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::GxAnimatedUpdate > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_GxAnimatedUpdate_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::GxTourPrimitive > **)&jresult = result ? new boost::intrusive_ptr< kmldom::GxTourPrimitive >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1GxAnimatedUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::GxAnimatedUpdate *arg1 = (kmldom::GxAnimatedUpdate *) 0 ;
  boost::intrusive_ptr< kmldom::GxAnimatedUpdate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxAnimatedUpdate > **)&jarg1;
  arg1 = (kmldom::GxAnimatedUpdate *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_GxFlyTo_1get_1gx_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::GxFlyTo *arg1 = (kmldom::GxFlyTo *) 0 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxFlyTo > **)&jarg1;
  arg1 = (kmldom::GxFlyTo *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_gx_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GxFlyTo_1has_1gx_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GxFlyTo *arg1 = (kmldom::GxFlyTo *) 0 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxFlyTo > **)&jarg1;
  arg1 = (kmldom::GxFlyTo *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_duration();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxFlyTo_1set_1gx_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::GxFlyTo *arg1 = (kmldom::GxFlyTo *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxFlyTo > **)&jarg1;
  arg1 = (kmldom::GxFlyTo *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_gx_duration(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxFlyTo_1clear_1gx_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GxFlyTo *arg1 = (kmldom::GxFlyTo *) 0 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxFlyTo > **)&jarg1;
  arg1 = (kmldom::GxFlyTo *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_duration();
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_GxFlyTo_1get_1gx_1flytomode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::GxFlyTo *arg1 = (kmldom::GxFlyTo *) 0 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxFlyTo > **)&jarg1;
  arg1 = (kmldom::GxFlyTo *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_gx_flytomode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GxFlyTo_1has_1gx_1flytomode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GxFlyTo *arg1 = (kmldom::GxFlyTo *) 0 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxFlyTo > **)&jarg1;
  arg1 = (kmldom::GxFlyTo *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_flytomode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxFlyTo_1set_1gx_1flytomode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::GxFlyTo *arg1 = (kmldom::GxFlyTo *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxFlyTo > **)&jarg1;
  arg1 = (kmldom::GxFlyTo *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_gx_flytomode(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxFlyTo_1clear_1gx_1flytomode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GxFlyTo *arg1 = (kmldom::GxFlyTo *) 0 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxFlyTo > **)&jarg1;
  arg1 = (kmldom::GxFlyTo *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_flytomode();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxFlyTo_1get_1abstractview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::GxFlyTo *arg1 = (kmldom::GxFlyTo *) 0 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > *smartarg1 = 0 ;
  kmldom::AbstractViewPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxFlyTo > **)&jarg1;
  arg1 = (kmldom::GxFlyTo *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_abstractview();
  *(kmldom::AbstractViewPtr **)&jresult = result ? new kmldom::AbstractViewPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GxFlyTo_1has_1abstractview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GxFlyTo *arg1 = (kmldom::GxFlyTo *) 0 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxFlyTo > **)&jarg1;
  arg1 = (kmldom::GxFlyTo *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_abstractview();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxFlyTo_1set_1abstractview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  kmldom::GxFlyTo *arg1 = (kmldom::GxFlyTo *) 0 ;
  kmldom::AbstractViewPtr arg2 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > *smartarg1 = 0 ;
  kmldom::AbstractViewPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxFlyTo > **)&jarg1;
  arg1 = (kmldom::GxFlyTo *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(kmldom::AbstractViewPtr **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_abstractview(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxFlyTo_1clear_1abstractview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GxFlyTo *arg1 = (kmldom::GxFlyTo *) 0 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxFlyTo > **)&jarg1;
  arg1 = (kmldom::GxFlyTo *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_abstractview();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxFlyTo_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > arg1 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > *argp1 ;
  boost::intrusive_ptr< kmldom::GxTourPrimitive > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::GxFlyTo > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_GxFlyTo_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::GxTourPrimitive > **)&jresult = result ? new boost::intrusive_ptr< kmldom::GxTourPrimitive >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1GxFlyTo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::GxFlyTo *arg1 = (kmldom::GxFlyTo *) 0 ;
  boost::intrusive_ptr< kmldom::GxFlyTo > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxFlyTo > **)&jarg1;
  arg1 = (kmldom::GxFlyTo *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_com_googlecode_libkml_kmldomJNI_GxWait_1get_1gx_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  kmldom::GxWait *arg1 = (kmldom::GxWait *) 0 ;
  boost::intrusive_ptr< kmldom::GxWait > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxWait > **)&jarg1;
  arg1 = (kmldom::GxWait *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_gx_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GxWait_1has_1gx_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GxWait *arg1 = (kmldom::GxWait *) 0 ;
  boost::intrusive_ptr< kmldom::GxWait > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxWait > **)&jarg1;
  arg1 = (kmldom::GxWait *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_duration();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxWait_1set_1gx_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmldom::GxWait *arg1 = (kmldom::GxWait *) 0 ;
  double arg2 ;
  boost::intrusive_ptr< kmldom::GxWait > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxWait > **)&jarg1;
  arg1 = (kmldom::GxWait *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_gx_duration(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxWait_1clear_1gx_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GxWait *arg1 = (kmldom::GxWait *) 0 ;
  boost::intrusive_ptr< kmldom::GxWait > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxWait > **)&jarg1;
  arg1 = (kmldom::GxWait *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_duration();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxWait_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::GxWait > arg1 ;
  boost::intrusive_ptr< kmldom::GxWait > *argp1 ;
  boost::intrusive_ptr< kmldom::GxTourPrimitive > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::GxWait > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_GxWait_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::GxTourPrimitive > **)&jresult = result ? new boost::intrusive_ptr< kmldom::GxTourPrimitive >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1GxWait(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::GxWait *arg1 = (kmldom::GxWait *) 0 ;
  boost::intrusive_ptr< kmldom::GxWait > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxWait > **)&jarg1;
  arg1 = (kmldom::GxWait *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_GxSoundCue_1get_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::GxSoundCue *arg1 = (kmldom::GxSoundCue *) 0 ;
  boost::intrusive_ptr< kmldom::GxSoundCue > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxSoundCue > **)&jarg1;
  arg1 = (kmldom::GxSoundCue *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &(arg1)->get_href();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GxSoundCue_1has_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GxSoundCue *arg1 = (kmldom::GxSoundCue *) 0 ;
  boost::intrusive_ptr< kmldom::GxSoundCue > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxSoundCue > **)&jarg1;
  arg1 = (kmldom::GxSoundCue *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_href();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxSoundCue_1set_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  kmldom::GxSoundCue *arg1 = (kmldom::GxSoundCue *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< kmldom::GxSoundCue > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxSoundCue > **)&jarg1;
  arg1 = (kmldom::GxSoundCue *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_href((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxSoundCue_1clear_1href(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GxSoundCue *arg1 = (kmldom::GxSoundCue *) 0 ;
  boost::intrusive_ptr< kmldom::GxSoundCue > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxSoundCue > **)&jarg1;
  arg1 = (kmldom::GxSoundCue *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_href();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxSoundCue_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::GxSoundCue > arg1 ;
  boost::intrusive_ptr< kmldom::GxSoundCue > *argp1 ;
  boost::intrusive_ptr< kmldom::GxTourPrimitive > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::GxSoundCue > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_GxSoundCue_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::GxTourPrimitive > **)&jresult = result ? new boost::intrusive_ptr< kmldom::GxTourPrimitive >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1GxSoundCue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::GxSoundCue *arg1 = (kmldom::GxSoundCue *) 0 ;
  boost::intrusive_ptr< kmldom::GxSoundCue > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxSoundCue > **)&jarg1;
  arg1 = (kmldom::GxSoundCue *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_googlecode_libkml_kmldomJNI_GxTourControl_1get_1gx_1playmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  kmldom::GxTourControl *arg1 = (kmldom::GxTourControl *) 0 ;
  boost::intrusive_ptr< kmldom::GxTourControl > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxTourControl > **)&jarg1;
  arg1 = (kmldom::GxTourControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_gx_playmode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_googlecode_libkml_kmldomJNI_GxTourControl_1has_1gx_1playmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  kmldom::GxTourControl *arg1 = (kmldom::GxTourControl *) 0 ;
  boost::intrusive_ptr< kmldom::GxTourControl > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxTourControl > **)&jarg1;
  arg1 = (kmldom::GxTourControl *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->has_gx_playmode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxTourControl_1set_1gx_1playmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  kmldom::GxTourControl *arg1 = (kmldom::GxTourControl *) 0 ;
  int arg2 ;
  boost::intrusive_ptr< kmldom::GxTourControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxTourControl > **)&jarg1;
  arg1 = (kmldom::GxTourControl *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_gx_playmode(arg2);
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_GxTourControl_1clear_1gx_1playmode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  kmldom::GxTourControl *arg1 = (kmldom::GxTourControl *) 0 ;
  boost::intrusive_ptr< kmldom::GxTourControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxTourControl > **)&jarg1;
  arg1 = (kmldom::GxTourControl *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_gx_playmode();
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_GxTourControl_1SWIGSharedPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< kmldom::GxTourControl > arg1 ;
  boost::intrusive_ptr< kmldom::GxTourControl > *argp1 ;
  boost::intrusive_ptr< kmldom::GxTourPrimitive > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(boost::intrusive_ptr< kmldom::GxTourControl > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom_GxTourControl_SWIGSharedPtrUpcast(arg1);
  *(boost::intrusive_ptr< kmldom::GxTourPrimitive > **)&jresult = result ? new boost::intrusive_ptr< kmldom::GxTourPrimitive >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1GxTourControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::GxTourControl *arg1 = (kmldom::GxTourControl *) 0 ;
  boost::intrusive_ptr< kmldom::GxTourControl > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::intrusive_ptr<  kmldom::GxTourControl > **)&jarg1;
  arg1 = (kmldom::GxTourControl *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1GetFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kmldom::KmlFactory *)kmldom::KmlFactory::GetFactory();
  *(kmldom::KmlFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateElementById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::KmlDomType arg2 ;
  kmldom::ElementPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  arg2 = (kmldom::KmlDomType)jarg2; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateElementById(arg2);
  *(kmldom::ElementPtr **)&jresult = result ? new kmldom::ElementPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateAlias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::AliasPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateAlias();
  *(kmldom::AliasPtr **)&jresult = result ? new kmldom::AliasPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateAtomAuthor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::AtomAuthorPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateAtomAuthor();
  *(kmldom::AtomAuthorPtr **)&jresult = result ? new kmldom::AtomAuthorPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateAtomLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::AtomLinkPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateAtomLink();
  *(kmldom::AtomLinkPtr **)&jresult = result ? new kmldom::AtomLinkPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateBalloonStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::BalloonStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateBalloonStyle();
  *(kmldom::BalloonStylePtr **)&jresult = result ? new kmldom::BalloonStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::CameraPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateCamera();
  *(kmldom::CameraPtr **)&jresult = result ? new kmldom::CameraPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::ChangePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateChange();
  *(kmldom::ChangePtr **)&jresult = result ? new kmldom::ChangePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::CoordinatesPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateCoordinates();
  *(kmldom::CoordinatesPtr **)&jresult = result ? new kmldom::CoordinatesPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateCreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::CreatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateCreate();
  *(kmldom::CreatePtr **)&jresult = result ? new kmldom::CreatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::DataPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateData();
  *(kmldom::DataPtr **)&jresult = result ? new kmldom::DataPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::DeletePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateDelete();
  *(kmldom::DeletePtr **)&jresult = result ? new kmldom::DeletePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::DocumentPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateDocument();
  *(kmldom::DocumentPtr **)&jresult = result ? new kmldom::DocumentPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateExtendedData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::ExtendedDataPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateExtendedData();
  *(kmldom::ExtendedDataPtr **)&jresult = result ? new kmldom::ExtendedDataPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateFolder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::FolderPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateFolder();
  *(kmldom::FolderPtr **)&jresult = result ? new kmldom::FolderPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateGroundOverlay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::GroundOverlayPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateGroundOverlay();
  *(kmldom::GroundOverlayPtr **)&jresult = result ? new kmldom::GroundOverlayPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateHotSpot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::HotSpotPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateHotSpot();
  *(kmldom::HotSpotPtr **)&jresult = result ? new kmldom::HotSpotPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::IconPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateIcon();
  *(kmldom::IconPtr **)&jresult = result ? new kmldom::IconPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateIconStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::IconStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateIconStyle();
  *(kmldom::IconStylePtr **)&jresult = result ? new kmldom::IconStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateIconStyleIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::IconStyleIconPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateIconStyleIcon();
  *(kmldom::IconStyleIconPtr **)&jresult = result ? new kmldom::IconStyleIconPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateImagePyramid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::ImagePyramidPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateImagePyramid();
  *(kmldom::ImagePyramidPtr **)&jresult = result ? new kmldom::ImagePyramidPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateInnerBoundaryIs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::InnerBoundaryIsPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateInnerBoundaryIs();
  *(kmldom::InnerBoundaryIsPtr **)&jresult = result ? new kmldom::InnerBoundaryIsPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateItemIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::ItemIconPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateItemIcon();
  *(kmldom::ItemIconPtr **)&jresult = result ? new kmldom::ItemIconPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateKml(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::KmlPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateKml();
  *(kmldom::KmlPtr **)&jresult = result ? new kmldom::KmlPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateLabelStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::LabelStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateLabelStyle();
  *(kmldom::LabelStylePtr **)&jresult = result ? new kmldom::LabelStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateLatLonBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::LatLonBoxPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateLatLonBox();
  *(kmldom::LatLonBoxPtr **)&jresult = result ? new kmldom::LatLonBoxPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateLatLonAltBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::LatLonAltBoxPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateLatLonAltBox();
  *(kmldom::LatLonAltBoxPtr **)&jresult = result ? new kmldom::LatLonAltBoxPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateLinearRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::LinearRingPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateLinearRing();
  *(kmldom::LinearRingPtr **)&jresult = result ? new kmldom::LinearRingPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateLineString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::LineStringPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateLineString();
  *(kmldom::LineStringPtr **)&jresult = result ? new kmldom::LineStringPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateLineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::LineStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateLineStyle();
  *(kmldom::LineStylePtr **)&jresult = result ? new kmldom::LineStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::LinkPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateLink();
  *(kmldom::LinkPtr **)&jresult = result ? new kmldom::LinkPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateLinkSnippet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::LinkSnippetPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateLinkSnippet();
  *(kmldom::LinkSnippetPtr **)&jresult = result ? new kmldom::LinkSnippetPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateListStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::ListStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateListStyle();
  *(kmldom::ListStylePtr **)&jresult = result ? new kmldom::ListStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::LocationPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateLocation();
  *(kmldom::LocationPtr **)&jresult = result ? new kmldom::LocationPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateLod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::LodPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateLod();
  *(kmldom::LodPtr **)&jresult = result ? new kmldom::LodPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateLookAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::LookAtPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateLookAt();
  *(kmldom::LookAtPtr **)&jresult = result ? new kmldom::LookAtPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::ModelPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateModel();
  *(kmldom::ModelPtr **)&jresult = result ? new kmldom::ModelPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateMultiGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::MultiGeometryPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateMultiGeometry();
  *(kmldom::MultiGeometryPtr **)&jresult = result ? new kmldom::MultiGeometryPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateNetworkLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::NetworkLinkPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateNetworkLink();
  *(kmldom::NetworkLinkPtr **)&jresult = result ? new kmldom::NetworkLinkPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::OrientationPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateOrientation();
  *(kmldom::OrientationPtr **)&jresult = result ? new kmldom::OrientationPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateNetworkLinkControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::NetworkLinkControlPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateNetworkLinkControl();
  *(kmldom::NetworkLinkControlPtr **)&jresult = result ? new kmldom::NetworkLinkControlPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateOuterBoundaryIs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::OuterBoundaryIsPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateOuterBoundaryIs();
  *(kmldom::OuterBoundaryIsPtr **)&jresult = result ? new kmldom::OuterBoundaryIsPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateOverlayXY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::OverlayXYPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateOverlayXY();
  *(kmldom::OverlayXYPtr **)&jresult = result ? new kmldom::OverlayXYPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreatePair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::PairPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreatePair();
  *(kmldom::PairPtr **)&jresult = result ? new kmldom::PairPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreatePhotoOverlay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::PhotoOverlayPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreatePhotoOverlay();
  *(kmldom::PhotoOverlayPtr **)&jresult = result ? new kmldom::PhotoOverlayPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreatePlacemark(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::PlacemarkPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreatePlacemark();
  *(kmldom::PlacemarkPtr **)&jresult = result ? new kmldom::PlacemarkPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreatePolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::PolygonPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreatePolygon();
  *(kmldom::PolygonPtr **)&jresult = result ? new kmldom::PolygonPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreatePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::PointPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreatePoint();
  *(kmldom::PointPtr **)&jresult = result ? new kmldom::PointPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreatePolyStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::PolyStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreatePolyStyle();
  *(kmldom::PolyStylePtr **)&jresult = result ? new kmldom::PolyStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::RegionPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateRegion();
  *(kmldom::RegionPtr **)&jresult = result ? new kmldom::RegionPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateResourceMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::ResourceMapPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateResourceMap();
  *(kmldom::ResourceMapPtr **)&jresult = result ? new kmldom::ResourceMapPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateRotationXY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::RotationXYPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateRotationXY();
  *(kmldom::RotationXYPtr **)&jresult = result ? new kmldom::RotationXYPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::ScalePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateScale();
  *(kmldom::ScalePtr **)&jresult = result ? new kmldom::ScalePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateSchema(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::SchemaPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateSchema();
  *(kmldom::SchemaPtr **)&jresult = result ? new kmldom::SchemaPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateSchemaData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::SchemaDataPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateSchemaData();
  *(kmldom::SchemaDataPtr **)&jresult = result ? new kmldom::SchemaDataPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateScreenOverlay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::ScreenOverlayPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateScreenOverlay();
  *(kmldom::ScreenOverlayPtr **)&jresult = result ? new kmldom::ScreenOverlayPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateScreenXY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::ScreenXYPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateScreenXY();
  *(kmldom::ScreenXYPtr **)&jresult = result ? new kmldom::ScreenXYPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::SizePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateSize();
  *(kmldom::SizePtr **)&jresult = result ? new kmldom::SizePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateSimpleData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::SimpleDataPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateSimpleData();
  *(kmldom::SimpleDataPtr **)&jresult = result ? new kmldom::SimpleDataPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateSimpleField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::SimpleFieldPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateSimpleField();
  *(kmldom::SimpleFieldPtr **)&jresult = result ? new kmldom::SimpleFieldPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateSnippet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::SnippetPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateSnippet();
  *(kmldom::SnippetPtr **)&jresult = result ? new kmldom::SnippetPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::StylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateStyle();
  *(kmldom::StylePtr **)&jresult = result ? new kmldom::StylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateStyleMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::StyleMapPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateStyleMap();
  *(kmldom::StyleMapPtr **)&jresult = result ? new kmldom::StyleMapPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateTimeSpan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::TimeSpanPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateTimeSpan();
  *(kmldom::TimeSpanPtr **)&jresult = result ? new kmldom::TimeSpanPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::TimeStampPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateTimeStamp();
  *(kmldom::TimeStampPtr **)&jresult = result ? new kmldom::TimeStampPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateViewVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::ViewVolumePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateViewVolume();
  *(kmldom::ViewVolumePtr **)&jresult = result ? new kmldom::ViewVolumePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::UpdatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateUpdate();
  *(kmldom::UpdatePtr **)&jresult = result ? new kmldom::UpdatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateGxAnimatedUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::GxAnimatedUpdatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateGxAnimatedUpdate();
  *(kmldom::GxAnimatedUpdatePtr **)&jresult = result ? new kmldom::GxAnimatedUpdatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateGxFlyTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::GxFlyToPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateGxFlyTo();
  *(kmldom::GxFlyToPtr **)&jresult = result ? new kmldom::GxFlyToPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateGxLatLonQuad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::GxLatLonQuadPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateGxLatLonQuad();
  *(kmldom::GxLatLonQuadPtr **)&jresult = result ? new kmldom::GxLatLonQuadPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateGxPlaylist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::GxPlaylistPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateGxPlaylist();
  *(kmldom::GxPlaylistPtr **)&jresult = result ? new kmldom::GxPlaylistPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateGxSoundCue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::GxSoundCuePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateGxSoundCue();
  *(kmldom::GxSoundCuePtr **)&jresult = result ? new kmldom::GxSoundCuePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateGxTimeSpan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::GxTimeSpanPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateGxTimeSpan();
  *(kmldom::GxTimeSpanPtr **)&jresult = result ? new kmldom::GxTimeSpanPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateGxTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::GxTimeStampPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateGxTimeStamp();
  *(kmldom::GxTimeStampPtr **)&jresult = result ? new kmldom::GxTimeStampPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateGxTour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::GxTourPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateGxTour();
  *(kmldom::GxTourPtr **)&jresult = result ? new kmldom::GxTourPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateGxTourControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::GxTourControlPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateGxTourControl();
  *(kmldom::GxTourControlPtr **)&jresult = result ? new kmldom::GxTourControlPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_KmlFactory_1CreateGxWait(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  kmldom::GxWaitPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  result = ((kmldom::KmlFactory const *)arg1)->CreateGxWait();
  *(kmldom::GxWaitPtr **)&jresult = result ? new kmldom::GxWaitPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_googlecode_libkml_kmldomJNI_delete_1KmlFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmldom::KmlFactory *arg1 = (kmldom::KmlFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kmldom::KmlFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_ParseKml(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  kmldom::ElementPtr result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = kmldom::ParseKml((std::string const &)*arg1);
  *(kmldom::ElementPtr **)&jresult = result ? new kmldom::ElementPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_SerializePretty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::SerializePretty((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_googlecode_libkml_kmldomJNI_SerializeRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::SerializeRaw((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  kmlbase::XmlElementPtr *arg1 = 0 ;
  kmldom::ElementPtr result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kmlbase::XmlElementPtr **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kmlbase::XmlElementPtr const & reference is null");
    return 0;
  } 
  result = kmldom::AsElement((kmlbase::XmlElementPtr const &)*arg1);
  *(kmldom::ElementPtr **)&jresult = result ? new kmldom::ElementPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsAbstractLatLonBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::AbstractLatLonBoxPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsAbstractLatLonBox(arg1);
  *(kmldom::AbstractLatLonBoxPtr **)&jresult = result ? new kmldom::AbstractLatLonBoxPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsAbstractView(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::AbstractViewPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsAbstractView(arg1);
  *(kmldom::AbstractViewPtr **)&jresult = result ? new kmldom::AbstractViewPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsColorStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::ColorStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsColorStyle(arg1);
  *(kmldom::ColorStylePtr **)&jresult = result ? new kmldom::ColorStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::ContainerPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsContainer(arg1);
  *(kmldom::ContainerPtr **)&jresult = result ? new kmldom::ContainerPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsFeature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::FeaturePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsFeature(arg1);
  *(kmldom::FeaturePtr **)&jresult = result ? new kmldom::FeaturePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::GeometryPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsGeometry(arg1);
  *(kmldom::GeometryPtr **)&jresult = result ? new kmldom::GeometryPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::ObjectPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsObject(arg1);
  *(kmldom::ObjectPtr **)&jresult = result ? new kmldom::ObjectPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsOverlay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::OverlayPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsOverlay(arg1);
  *(kmldom::OverlayPtr **)&jresult = result ? new kmldom::OverlayPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsStyleSelector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::StyleSelectorPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsStyleSelector(arg1);
  *(kmldom::StyleSelectorPtr **)&jresult = result ? new kmldom::StyleSelectorPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsSubStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::SubStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsSubStyle(arg1);
  *(kmldom::SubStylePtr **)&jresult = result ? new kmldom::SubStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsTimePrimitive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::TimePrimitivePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsTimePrimitive(arg1);
  *(kmldom::TimePrimitivePtr **)&jresult = result ? new kmldom::TimePrimitivePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsAlias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::AliasPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsAlias(arg1);
  *(kmldom::AliasPtr **)&jresult = result ? new kmldom::AliasPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsBalloonStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::BalloonStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsBalloonStyle(arg1);
  *(kmldom::BalloonStylePtr **)&jresult = result ? new kmldom::BalloonStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::CameraPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsCamera(arg1);
  *(kmldom::CameraPtr **)&jresult = result ? new kmldom::CameraPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::ChangePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsChange(arg1);
  *(kmldom::ChangePtr **)&jresult = result ? new kmldom::ChangePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  kmldom::CoordinatesPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsCoordinates((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::CoordinatesPtr **)&jresult = result ? new kmldom::CoordinatesPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsCreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::CreatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsCreate(arg1);
  *(kmldom::CreatePtr **)&jresult = result ? new kmldom::CreatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::DataPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsData(arg1);
  *(kmldom::DataPtr **)&jresult = result ? new kmldom::DataPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::DeletePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsDelete(arg1);
  *(kmldom::DeletePtr **)&jresult = result ? new kmldom::DeletePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::DocumentPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsDocument(arg1);
  *(kmldom::DocumentPtr **)&jresult = result ? new kmldom::DocumentPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsExtendedData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  kmldom::ExtendedDataPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsExtendedData((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::ExtendedDataPtr **)&jresult = result ? new kmldom::ExtendedDataPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsFolder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::FolderPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsFolder(arg1);
  *(kmldom::FolderPtr **)&jresult = result ? new kmldom::FolderPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsGroundOverlay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::GroundOverlayPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsGroundOverlay(arg1);
  *(kmldom::GroundOverlayPtr **)&jresult = result ? new kmldom::GroundOverlayPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsHotSpot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::HotSpotPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsHotSpot(arg1);
  *(kmldom::HotSpotPtr **)&jresult = result ? new kmldom::HotSpotPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::IconPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsIcon(arg1);
  *(kmldom::IconPtr **)&jresult = result ? new kmldom::IconPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsIconStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::IconStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsIconStyle(arg1);
  *(kmldom::IconStylePtr **)&jresult = result ? new kmldom::IconStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsIconStyleIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::IconStyleIconPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsIconStyleIcon(arg1);
  *(kmldom::IconStyleIconPtr **)&jresult = result ? new kmldom::IconStyleIconPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsImagePyramid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::ImagePyramidPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsImagePyramid(arg1);
  *(kmldom::ImagePyramidPtr **)&jresult = result ? new kmldom::ImagePyramidPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsInnerBoundaryIs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::InnerBoundaryIsPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsInnerBoundaryIs(arg1);
  *(kmldom::InnerBoundaryIsPtr **)&jresult = result ? new kmldom::InnerBoundaryIsPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsItemIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::ItemIconPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsItemIcon(arg1);
  *(kmldom::ItemIconPtr **)&jresult = result ? new kmldom::ItemIconPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsKml(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  kmldom::KmlPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsKml((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::KmlPtr **)&jresult = result ? new kmldom::KmlPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsLabelStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::LabelStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsLabelStyle(arg1);
  *(kmldom::LabelStylePtr **)&jresult = result ? new kmldom::LabelStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsLatLonAltBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::LatLonAltBoxPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsLatLonAltBox(arg1);
  *(kmldom::LatLonAltBoxPtr **)&jresult = result ? new kmldom::LatLonAltBoxPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsLatLonBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::LatLonBoxPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsLatLonBox(arg1);
  *(kmldom::LatLonBoxPtr **)&jresult = result ? new kmldom::LatLonBoxPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsLineString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::LineStringPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsLineString(arg1);
  *(kmldom::LineStringPtr **)&jresult = result ? new kmldom::LineStringPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsLineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::LineStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsLineStyle(arg1);
  *(kmldom::LineStylePtr **)&jresult = result ? new kmldom::LineStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsLinearRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::LinearRingPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsLinearRing(arg1);
  *(kmldom::LinearRingPtr **)&jresult = result ? new kmldom::LinearRingPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::LinkPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsLink(arg1);
  *(kmldom::LinkPtr **)&jresult = result ? new kmldom::LinkPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsLinkSnippet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::LinkSnippetPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsLinkSnippet(arg1);
  *(kmldom::LinkSnippetPtr **)&jresult = result ? new kmldom::LinkSnippetPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsListStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::ListStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsListStyle(arg1);
  *(kmldom::ListStylePtr **)&jresult = result ? new kmldom::ListStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::LocationPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsLocation(arg1);
  *(kmldom::LocationPtr **)&jresult = result ? new kmldom::LocationPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsLod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::LodPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsLod(arg1);
  *(kmldom::LodPtr **)&jresult = result ? new kmldom::LodPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsLookAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::LookAtPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsLookAt(arg1);
  *(kmldom::LookAtPtr **)&jresult = result ? new kmldom::LookAtPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::Metadata > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsMetadata((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::MetadataPtr **)&jresult = new kmldom::MetadataPtr((const kmldom::MetadataPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::ModelPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsModel(arg1);
  *(kmldom::ModelPtr **)&jresult = result ? new kmldom::ModelPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsMultiGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::MultiGeometryPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsMultiGeometry(arg1);
  *(kmldom::MultiGeometryPtr **)&jresult = result ? new kmldom::MultiGeometryPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsNetworkLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::NetworkLinkPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsNetworkLink(arg1);
  *(kmldom::NetworkLinkPtr **)&jresult = result ? new kmldom::NetworkLinkPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsNetworkLinkControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  kmldom::NetworkLinkControlPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsNetworkLinkControl((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::NetworkLinkControlPtr **)&jresult = result ? new kmldom::NetworkLinkControlPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::OrientationPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsOrientation(arg1);
  *(kmldom::OrientationPtr **)&jresult = result ? new kmldom::OrientationPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsOuterBoundaryIs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::OuterBoundaryIsPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsOuterBoundaryIs(arg1);
  *(kmldom::OuterBoundaryIsPtr **)&jresult = result ? new kmldom::OuterBoundaryIsPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsOverlayXY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::OverlayXYPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsOverlayXY(arg1);
  *(kmldom::OverlayXYPtr **)&jresult = result ? new kmldom::OverlayXYPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsPair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::PairPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsPair(arg1);
  *(kmldom::PairPtr **)&jresult = result ? new kmldom::PairPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsPhotoOverlay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::PhotoOverlayPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsPhotoOverlay(arg1);
  *(kmldom::PhotoOverlayPtr **)&jresult = result ? new kmldom::PhotoOverlayPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsPlacemark(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::PlacemarkPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsPlacemark(arg1);
  *(kmldom::PlacemarkPtr **)&jresult = result ? new kmldom::PlacemarkPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::PointPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsPoint(arg1);
  *(kmldom::PointPtr **)&jresult = result ? new kmldom::PointPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsPolyStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::PolyStylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsPolyStyle(arg1);
  *(kmldom::PolyStylePtr **)&jresult = result ? new kmldom::PolyStylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::PolygonPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsPolygon(arg1);
  *(kmldom::PolygonPtr **)&jresult = result ? new kmldom::PolygonPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::RegionPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsRegion(arg1);
  *(kmldom::RegionPtr **)&jresult = result ? new kmldom::RegionPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsResourceMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::ResourceMapPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsResourceMap(arg1);
  *(kmldom::ResourceMapPtr **)&jresult = result ? new kmldom::ResourceMapPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsRotationXY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::RotationXYPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsRotationXY(arg1);
  *(kmldom::RotationXYPtr **)&jresult = result ? new kmldom::RotationXYPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::ScalePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsScale(arg1);
  *(kmldom::ScalePtr **)&jresult = result ? new kmldom::ScalePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsSchema(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::SchemaPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsSchema(arg1);
  *(kmldom::SchemaPtr **)&jresult = result ? new kmldom::SchemaPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsSchemaData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::SchemaDataPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsSchemaData(arg1);
  *(kmldom::SchemaDataPtr **)&jresult = result ? new kmldom::SchemaDataPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsScreenOverlay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::ScreenOverlayPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsScreenOverlay(arg1);
  *(kmldom::ScreenOverlayPtr **)&jresult = result ? new kmldom::ScreenOverlayPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsScreenXY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::ScreenXYPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsScreenXY(arg1);
  *(kmldom::ScreenXYPtr **)&jresult = result ? new kmldom::ScreenXYPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsSimpleData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  kmldom::SimpleDataPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsSimpleData((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::SimpleDataPtr **)&jresult = result ? new kmldom::SimpleDataPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsSimpleField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  kmldom::SimpleFieldPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsSimpleField((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::SimpleFieldPtr **)&jresult = result ? new kmldom::SimpleFieldPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::SizePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsSize(arg1);
  *(kmldom::SizePtr **)&jresult = result ? new kmldom::SizePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsSnippet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::SnippetPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsSnippet(arg1);
  *(kmldom::SnippetPtr **)&jresult = result ? new kmldom::SnippetPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::StylePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsStyle(arg1);
  *(kmldom::StylePtr **)&jresult = result ? new kmldom::StylePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsStyleMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::StyleMapPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsStyleMap(arg1);
  *(kmldom::StyleMapPtr **)&jresult = result ? new kmldom::StyleMapPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsTimeSpan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::TimeSpanPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsTimeSpan(arg1);
  *(kmldom::TimeSpanPtr **)&jresult = result ? new kmldom::TimeSpanPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::TimeStampPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsTimeStamp(arg1);
  *(kmldom::TimeStampPtr **)&jresult = result ? new kmldom::TimeStampPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  kmldom::UpdatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsUpdate((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::UpdatePtr **)&jresult = result ? new kmldom::UpdatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsViewVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::ViewVolumePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsViewVolume(arg1);
  *(kmldom::ViewVolumePtr **)&jresult = result ? new kmldom::ViewVolumePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsAtomAuthor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  kmldom::AtomAuthorPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsAtomAuthor((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::AtomAuthorPtr **)&jresult = result ? new kmldom::AtomAuthorPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsAtomCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::AtomCategory > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsAtomCategory((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::AtomCategoryPtr **)&jresult = new kmldom::AtomCategoryPtr((const kmldom::AtomCategoryPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsAtomContent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::AtomContent > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsAtomContent((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::AtomContentPtr **)&jresult = new kmldom::AtomContentPtr((const kmldom::AtomContentPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsAtomEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::AtomEntry > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsAtomEntry((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::AtomEntryPtr **)&jresult = new kmldom::AtomEntryPtr((const kmldom::AtomEntryPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsAtomFeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::AtomFeed > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsAtomFeed((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::AtomFeedPtr **)&jresult = new kmldom::AtomFeedPtr((const kmldom::AtomFeedPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsAtomLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  kmldom::AtomLinkPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsAtomLink((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::AtomLinkPtr **)&jresult = result ? new kmldom::AtomLinkPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsXalAddressDetails(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::XalAddressDetails > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsXalAddressDetails((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::XalAddressDetailsPtr **)&jresult = new kmldom::XalAddressDetailsPtr((const kmldom::XalAddressDetailsPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsXalAdministrativeArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::XalAdministrativeArea > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsXalAdministrativeArea((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::XalAdministrativeAreaPtr **)&jresult = new kmldom::XalAdministrativeAreaPtr((const kmldom::XalAdministrativeAreaPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsXalCountry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::XalCountry > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsXalCountry((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::XalCountryPtr **)&jresult = new kmldom::XalCountryPtr((const kmldom::XalCountryPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsXalLocality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::XalLocality > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsXalLocality((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::XalLocalityPtr **)&jresult = new kmldom::XalLocalityPtr((const kmldom::XalLocalityPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsXalPostalCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::XalPostalCode > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsXalPostalCode((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::XalPostalCodePtr **)&jresult = new kmldom::XalPostalCodePtr((const kmldom::XalPostalCodePtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsXalSubAdministrativeArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::XalSubAdministrativeArea > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsXalSubAdministrativeArea((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::XalSubAdministrativeAreaPtr **)&jresult = new kmldom::XalSubAdministrativeAreaPtr((const kmldom::XalSubAdministrativeAreaPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsXalThoroughfare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  kmldom::ElementPtr tempnull1 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::XalThoroughfare > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(kmldom::ElementPtr **)&jarg1 : &tempnull1; 
  result = kmldom::AsXalThoroughfare((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::XalThoroughfarePtr **)&jresult = new kmldom::XalThoroughfarePtr((const kmldom::XalThoroughfarePtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsGxAnimatedUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::GxAnimatedUpdatePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsGxAnimatedUpdate(arg1);
  *(kmldom::GxAnimatedUpdatePtr **)&jresult = result ? new kmldom::GxAnimatedUpdatePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsGxFlyTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::GxFlyToPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsGxFlyTo(arg1);
  *(kmldom::GxFlyToPtr **)&jresult = result ? new kmldom::GxFlyToPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsGxLatLonQuad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::GxLatLonQuadPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsGxLatLonQuad(arg1);
  *(kmldom::GxLatLonQuadPtr **)&jresult = result ? new kmldom::GxLatLonQuadPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsGxPlaylist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::GxPlaylistPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsGxPlaylist(arg1);
  *(kmldom::GxPlaylistPtr **)&jresult = result ? new kmldom::GxPlaylistPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsGxSoundCue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::GxSoundCuePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsGxSoundCue(arg1);
  *(kmldom::GxSoundCuePtr **)&jresult = result ? new kmldom::GxSoundCuePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsGxTimeSpan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::GxTimeSpanPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsGxTimeSpan(arg1);
  *(kmldom::GxTimeSpanPtr **)&jresult = result ? new kmldom::GxTimeSpanPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsGxTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::GxTimeStampPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsGxTimeStamp(arg1);
  *(kmldom::GxTimeStampPtr **)&jresult = result ? new kmldom::GxTimeStampPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsGxTour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::GxTourPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsGxTour(arg1);
  *(kmldom::GxTourPtr **)&jresult = result ? new kmldom::GxTourPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsGxTourControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::GxTourControlPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsGxTourControl(arg1);
  *(kmldom::GxTourControlPtr **)&jresult = result ? new kmldom::GxTourControlPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsGxTourPrimitive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::GxTourPrimitivePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsGxTourPrimitive(arg1);
  *(kmldom::GxTourPrimitivePtr **)&jresult = result ? new kmldom::GxTourPrimitivePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_AsGxWait(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmldom::ElementPtr arg1 ;
  kmldom::ElementPtr const *argp1 ;
  kmldom::GxWaitPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(kmldom::ElementPtr **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = kmldom::AsGxWait(arg1);
  *(kmldom::GxWaitPtr **)&jresult = result ? new kmldom::GxWaitPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGElementUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmlbase::XmlElement **)&baseptr = *(kmldom::Element **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGCoordinatesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::Coordinates **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGVec2Upcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::Vec2 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGObjectUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::Object **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGSubStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::SubStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGColorStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::SubStyle **)&baseptr = *(kmldom::ColorStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGSnippetCommonUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::SnippetCommon **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGSnippetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::SnippetCommon **)&baseptr = *(kmldom::Snippet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGLinkSnippetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::SnippetCommon **)&baseptr = *(kmldom::LinkSnippet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGAbstractViewUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::AbstractView **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGTimePrimitiveUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::TimePrimitive **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGStyleSelectorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::StyleSelector **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGAbstractLatLonBoxUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::AbstractLatLonBox **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGLatLonAltBoxUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::AbstractLatLonBox **)&baseptr = *(kmldom::LatLonAltBox **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGLodUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::Lod **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGRegionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::Region **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGExtendedDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::ExtendedData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGFeatureUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::Feature **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGContainerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Feature **)&baseptr = *(kmldom::Container **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGGeometryUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::Geometry **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGBasicLinkUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::BasicLink **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGIconUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::BasicLink **)&baseptr = *(kmldom::Icon **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGIconStyleIconUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::BasicLink **)&baseptr = *(kmldom::IconStyleIcon **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGOverlayUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Feature **)&baseptr = *(kmldom::Overlay **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGBalloonStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::SubStyle **)&baseptr = *(kmldom::BalloonStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGCameraUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::AbstractView **)&baseptr = *(kmldom::Camera **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGUpdateOperationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::UpdateOperation **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGChangeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::UpdateOperation **)&baseptr = *(kmldom::Change **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGCreateUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::UpdateOperation **)&baseptr = *(kmldom::Create **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::Data **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGDeleteUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::UpdateOperation **)&baseptr = *(kmldom::Delete **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGSimpleFieldUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::SimpleField **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGSchemaUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::Schema **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGDocumentUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Container **)&baseptr = *(kmldom::Document **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGFolderUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Container **)&baseptr = *(kmldom::Folder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGLatLonBoxUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::AbstractLatLonBox **)&baseptr = *(kmldom::LatLonBox **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGGxLatLonQuadUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::GxLatLonQuad **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGGroundOverlayUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Overlay **)&baseptr = *(kmldom::GroundOverlay **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGHotSpotUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Vec2 **)&baseptr = *(kmldom::HotSpot **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGIconStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::ColorStyle **)&baseptr = *(kmldom::IconStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGImagePyramidUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::ImagePyramid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGItemIconUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::ItemIcon **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGLabelStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::ColorStyle **)&baseptr = *(kmldom::LabelStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGLineStringUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Geometry **)&baseptr = *(kmldom::LineString **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGLineStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::ColorStyle **)&baseptr = *(kmldom::LineStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGLinearRingUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Geometry **)&baseptr = *(kmldom::LinearRing **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGLinkUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::BasicLink **)&baseptr = *(kmldom::Link **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGListStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::SubStyle **)&baseptr = *(kmldom::ListStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGLocationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::Location **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGLookAtUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::AbstractView **)&baseptr = *(kmldom::LookAt **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGOrientationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::Orientation **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGScaleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::Scale **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGAliasUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::Alias **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGResourceMapUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::ResourceMap **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGModelUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Geometry **)&baseptr = *(kmldom::Model **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGMultiGeometryUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Geometry **)&baseptr = *(kmldom::MultiGeometry **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGNetworkLinkUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Feature **)&baseptr = *(kmldom::NetworkLink **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGUpdateUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::Update **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGNetworkLinkControlUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::NetworkLinkControl **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGPairUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::Pair **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGViewVolumeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::ViewVolume **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGPointUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Geometry **)&baseptr = *(kmldom::Point **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGPhotoOverlayUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Overlay **)&baseptr = *(kmldom::PhotoOverlay **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGPlacemarkUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Feature **)&baseptr = *(kmldom::Placemark **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGPolyStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::ColorStyle **)&baseptr = *(kmldom::PolyStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGOuterBoundaryIsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::OuterBoundaryIs **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGInnerBoundaryIsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::InnerBoundaryIs **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGPolygonUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Geometry **)&baseptr = *(kmldom::Polygon **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGSimpleDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::SimpleData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGSchemaDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::SchemaData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGOverlayXYUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Vec2 **)&baseptr = *(kmldom::OverlayXY **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGScreenXYUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Vec2 **)&baseptr = *(kmldom::ScreenXY **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGRotationXYUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Vec2 **)&baseptr = *(kmldom::RotationXY **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGSizeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Vec2 **)&baseptr = *(kmldom::Size **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGScreenOverlayUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Overlay **)&baseptr = *(kmldom::ScreenOverlay **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::StyleSelector **)&baseptr = *(kmldom::Style **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGStyleMapUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::StyleSelector **)&baseptr = *(kmldom::StyleMap **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGTimeSpanUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::TimePrimitive **)&baseptr = *(kmldom::TimeSpan **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGGxTimeSpanUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::TimeSpan **)&baseptr = *(kmldom::GxTimeSpan **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGTimeStampUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::TimePrimitive **)&baseptr = *(kmldom::TimeStamp **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGGxTimeStampUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::TimeStamp **)&baseptr = *(kmldom::GxTimeStamp **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGKmlUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::Kml **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGAtomAuthorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::AtomAuthor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGAtomLinkUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Element **)&baseptr = *(kmldom::AtomLink **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGGxTourPrimitiveUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::GxTourPrimitive **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGGxPlaylistUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Object **)&baseptr = *(kmldom::GxPlaylist **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGGxTourUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::Feature **)&baseptr = *(kmldom::GxTour **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGGxAnimatedUpdateUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::GxTourPrimitive **)&baseptr = *(kmldom::GxAnimatedUpdate **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGGxFlyToUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::GxTourPrimitive **)&baseptr = *(kmldom::GxFlyTo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGGxWaitUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::GxTourPrimitive **)&baseptr = *(kmldom::GxWait **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGGxSoundCueUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::GxTourPrimitive **)&baseptr = *(kmldom::GxSoundCue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_googlecode_libkml_kmldomJNI_SWIGGxTourControlUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(kmldom::GxTourPrimitive **)&baseptr = *(kmldom::GxTourControl **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

